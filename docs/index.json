[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "transpiled/.external-ecmascript.js",
    "static": true,
    "longname": "transpiled/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "transpiled/datetime.js",
    "content": "import { Duration, friendlyDuration } from \"./duration\";\r\nimport { Interval } from \"./interval\";\r\nimport { Settings } from \"./settings\";\r\nimport { Info } from \"./info\";\r\nimport { Formatter } from \"./impl/formatter\";\r\nimport { FixedOffsetZone } from \"./zones/fixedOffsetZone\";\r\nimport { Locale } from \"./impl/locale\";\r\nimport { isUndefined, maybeArray, isDate, isNumber, bestBy, daysInMonth, daysInYear, isLeapYear, weeksInWeekYear, normalizeObject, roundTo, objToLocalTS } from \"./impl/util\";\r\nimport { normalizeZone } from \"./impl/zoneUtil\";\r\nimport { diff } from \"./impl/diff\";\r\nimport { parseRFC2822Date, parseISODate, parseHTTPDate, parseSQL } from \"./impl/regexParser\";\r\nimport { parseFromTokens, explainFromTokens } from \"./impl/tokenParser\";\r\nimport { gregorianToWeek, weekToGregorian, gregorianToOrdinal, ordinalToGregorian, hasInvalidGregorianData, hasInvalidWeekData, hasInvalidOrdinalData, hasInvalidTimeData } from \"./impl/conversions\";\r\nimport * as Formats from \"./impl/formats\";\r\nimport { InvalidArgumentError, ConflictingSpecificationError, InvalidUnitError, UnitOutOfRangeError, MismatchedWeekdayError, UnparsableStringError, InvalidZoneError } from \"./errors\";\r\nimport { SystemZone } from \"./zones/systemZone\";\r\nconst MAX_DATE = 8.64e15;\r\n// find the right offset at a given local time. The o input is our guess, which determines which\r\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\r\nfunction fixOffset(localTS, o, tz) {\r\n    // Our UTC time is just a guess because our offset is just a guess\r\n    let utcGuess = localTS - o * 60 * 1000;\r\n    // Test whether the zone matches the offset for this ts\r\n    const o2 = tz.offset(utcGuess);\r\n    // If so, offset didn't change and we're done\r\n    if (o === o2) {\r\n        return [utcGuess, o];\r\n    }\r\n    // If not, change the ts by the difference in the offset\r\n    utcGuess -= (o2 - o) * 60 * 1000;\r\n    // If that gives us the local time we want, we're done\r\n    const o3 = tz.offset(utcGuess);\r\n    if (o2 === o3) {\r\n        return [utcGuess, o2];\r\n    }\r\n    // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\r\n    return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\r\n}\r\n// convert an epoch timestamp into a calendar object with the given offset\r\nfunction tsToObj(ts, offset) {\r\n    ts += offset * 60 * 1000;\r\n    const d = new Date(ts);\r\n    return {\r\n        year: d.getUTCFullYear(),\r\n        month: d.getUTCMonth() + 1,\r\n        day: d.getUTCDate(),\r\n        hour: d.getUTCHours(),\r\n        minute: d.getUTCMinutes(),\r\n        second: d.getUTCSeconds(),\r\n        millisecond: d.getUTCMilliseconds()\r\n    };\r\n}\r\n// convert a calendar object to an epoch timestamp\r\nfunction objToTS(obj, offset, zone) {\r\n    return fixOffset(objToLocalTS(obj), offset, zone);\r\n}\r\n// helper useful in turning the results of parsing into real dates\r\n// by handling the zone options\r\nfunction parseDataToDateTime(parsed, parsedZone, options, format, text) {\r\n    const { setZone, zone } = options;\r\n    if (parsed && Object.keys(parsed).length !== 0) {\r\n        const interpretationZone = parsedZone || zone, opts = Object.assign({}, options, {\r\n            zone: interpretationZone,\r\n            setZone: undefined\r\n        }), inst = DateTime.fromObject(parsed, opts);\r\n        if (inst !== null) {\r\n            return setZone ? inst : inst.setZone(zone);\r\n        }\r\n    }\r\n    if (options.nullOnInvalid) {\r\n        return null;\r\n    }\r\n    throw new UnparsableStringError(format, text);\r\n}\r\n// if you want to output a technical format (e.g. RFC 2822), this helper\r\n// helps handle the details\r\nfunction toTechFormat(dt, format, allowZ = true) {\r\n    return Formatter.create(Locale.create(\"en-US\"), {\r\n        allowZ,\r\n        forceSimple: true\r\n    }).formatDateTimeFromString(dt, format);\r\n}\r\n// technical time formats (e.g. the time part of ISO 8601), take some options\r\n// and this commonizes their handling\r\nfunction toTechTimeFormat(dt, { includeOffset, suppressSeconds = false, suppressMilliseconds = false, includeZone = false, spaceZone = false, format = \"extended\" }) {\r\n    let fmt = format === \"basic\" ? \"HHmm\" : \"HH:mm\";\r\n    if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {\r\n        fmt += format === \"basic\" ? \"ss\" : \":ss\";\r\n        if (!suppressMilliseconds || dt.millisecond !== 0) {\r\n            fmt += \".SSS\";\r\n        }\r\n    }\r\n    if ((includeZone || includeOffset) && spaceZone) {\r\n        fmt += \" \";\r\n    }\r\n    if (includeZone) {\r\n        fmt += \"z\";\r\n    }\r\n    else if (includeOffset) {\r\n        fmt += format === \"basic\" ? \"ZZZ\" : \"ZZ\";\r\n    }\r\n    return toTechFormat(dt, fmt);\r\n}\r\n// defaults for unspecified units in the supported calendars\r\nconst defaultUnitValues = {\r\n    year: 0,\r\n    month: 1,\r\n    day: 1,\r\n    hour: 0,\r\n    minute: 0,\r\n    second: 0,\r\n    millisecond: 0\r\n}, defaultWeekUnitValues = {\r\n    weekNumber: 1,\r\n    weekday: 1,\r\n    hour: 0,\r\n    minute: 0,\r\n    second: 0,\r\n    millisecond: 0\r\n}, defaultOrdinalUnitValues = {\r\n    ordinal: 1,\r\n    hour: 0,\r\n    minute: 0,\r\n    second: 0,\r\n    millisecond: 0\r\n};\r\n// Units in the supported calendars, sorted by bigness\r\nconst orderedUnits = [\r\n    \"year\",\r\n    \"month\",\r\n    \"day\",\r\n    \"hour\",\r\n    \"minute\",\r\n    \"second\",\r\n    \"millisecond\"\r\n], orderedWeekUnits = [\r\n    \"weekYear\",\r\n    \"weekNumber\",\r\n    \"weekday\",\r\n    \"hour\",\r\n    \"minute\",\r\n    \"second\",\r\n    \"millisecond\"\r\n], orderedOrdinalUnits = [\r\n    \"year\",\r\n    \"ordinal\",\r\n    \"hour\",\r\n    \"minute\",\r\n    \"second\",\r\n    \"millisecond\"\r\n];\r\n// standardize case and plurality in units\r\nfunction normalizeUnit(unit) {\r\n    const pluralMapping = {\r\n        year: \"year\",\r\n        years: \"year\",\r\n        month: \"month\",\r\n        months: \"month\",\r\n        day: \"day\",\r\n        days: \"day\",\r\n        hour: \"hour\",\r\n        hours: \"hour\",\r\n        minute: \"minute\",\r\n        minutes: \"minute\",\r\n        second: \"second\",\r\n        seconds: \"second\",\r\n        millisecond: \"millisecond\",\r\n        milliseconds: \"millisecond\",\r\n        weekday: \"weekday\",\r\n        weekdays: \"weekday\",\r\n        weeknumber: \"weekNumber\",\r\n        weeksnumber: \"weekNumber\",\r\n        weeknumbers: \"weekNumber\",\r\n        weekyear: \"weekYear\",\r\n        weekyears: \"weekYear\",\r\n        ordinal: \"ordinal\"\r\n    };\r\n    const normalized = pluralMapping[unit.toLowerCase()];\r\n    if (!normalized) {\r\n        throw new InvalidUnitError(unit);\r\n    }\r\n    return normalized;\r\n}\r\nfunction lastOpts(argList) {\r\n    if (argList.length > 0 && typeof argList[argList.length - 1] === \"object\") {\r\n        const options = argList[argList.length - 1];\r\n        const args = Array.from(argList).slice(0, argList.length - 1);\r\n        return [options, args];\r\n    }\r\n    else {\r\n        return [{}, Array.from(argList)];\r\n    }\r\n}\r\n/**\r\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\r\n *\r\n * A DateTime comprises of:\r\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\r\n * * A time zone. Each instance is considered in the context of a specific zone (by default the system's time zone).\r\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\r\n *\r\n * Here is a brief overview of the most commonly used functionality it provides:\r\n *\r\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.\r\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},\r\n * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.\r\n * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.\r\n * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.\r\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime#plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toSystemZone}.\r\n * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.\r\n *\r\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\r\n */\r\nexport class DateTime {\r\n    /**\r\n     * @access private\r\n     */\r\n    constructor(config) {\r\n        // can happen when using plus or minus with 1E8 days resulting in overflows\r\n        if (Number.isNaN(config.ts)) {\r\n            throw new InvalidArgumentError(\"invalid timestamp\");\r\n        }\r\n        const zone = config.zone || Settings.defaultZone;\r\n        if (!zone.isValid) {\r\n            throw new InvalidZoneError(zone.name);\r\n        }\r\n        /**\r\n         * @access private\r\n         */\r\n        this._ts = isUndefined(config.ts) ? Settings.now() : config.ts;\r\n        let o, c;\r\n        if (config.old !== undefined && config.old.ts === this._ts && config.old.zone.equals(zone)) {\r\n            o = config.old.o;\r\n            c = config.old.c;\r\n        }\r\n        else {\r\n            o = zone.offset(this._ts);\r\n            c = tsToObj(this._ts, o);\r\n        }\r\n        if (Number.isNaN(c.year)) {\r\n            throw new InvalidArgumentError(\"invalid timestamp\");\r\n        }\r\n        /**\r\n         * @access private\r\n         */\r\n        this._c = c;\r\n        /**\r\n         * @access private\r\n         */\r\n        this._o = o;\r\n        /**\r\n         * @access private\r\n         */\r\n        this._zone = zone;\r\n        /**\r\n         * @access private\r\n         */\r\n        this._loc = config.loc || Locale.create();\r\n        /**\r\n         * @access private\r\n         */\r\n        this._weekData = undefined;\r\n        /**\r\n         * @access private\r\n         */\r\n        this._isLuxonDateTime = true;\r\n    }\r\n    /**\r\n     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\r\n     *\r\n     * @type {string}\r\n     */\r\n    get locale() {\r\n        return this._loc.locale;\r\n    }\r\n    /**\r\n     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\r\n     *\r\n     * @type {string}\r\n     */\r\n    get numberingSystem() {\r\n        return this._loc.numberingSystem;\r\n    }\r\n    /**\r\n     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\r\n     *\r\n     * @type {string}\r\n     */\r\n    get outputCalendar() {\r\n        return this._loc.outputCalendar;\r\n    }\r\n    /**\r\n     * Get the time zone associated with this DateTime.\r\n     * @type {Zone}\r\n     */\r\n    get zone() {\r\n        return this._zone;\r\n    }\r\n    /**\r\n     * Get the name of the time zone.\r\n     * @type {string}\r\n     */\r\n    get zoneName() {\r\n        return this.zone.name;\r\n    }\r\n    /**\r\n     * Get the year\r\n     * @example DateTime.local(2017, 5, 25).year //=> 2017\r\n     * @type {number}\r\n     */\r\n    get year() {\r\n        return this._c.year;\r\n    }\r\n    /**\r\n     * Get the quarter\r\n     * @example DateTime.local(2017, 5, 25).quarter //=> 2\r\n     * @type {number}\r\n     */\r\n    get quarter() {\r\n        return Math.ceil(this._c.month / 3);\r\n    }\r\n    /**\r\n     * Get the month (1-12).\r\n     * @example DateTime.local(2017, 5, 25).month //=> 5\r\n     * @type {number}\r\n     */\r\n    get month() {\r\n        return this._c.month;\r\n    }\r\n    /**\r\n     * Get the day of the month (1-30ish).\r\n     * @example DateTime.local(2017, 5, 25).day //=> 25\r\n     * @type {number}\r\n     */\r\n    get day() {\r\n        return this._c.day;\r\n    }\r\n    /**\r\n     * Get the hour of the day (0-23).\r\n     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\r\n     * @type {number}\r\n     */\r\n    get hour() {\r\n        return this._c.hour;\r\n    }\r\n    /**\r\n     * Get the minute of the hour (0-59).\r\n     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\r\n     * @type {number}\r\n     */\r\n    get minute() {\r\n        return this._c.minute;\r\n    }\r\n    /**\r\n     * Get the second of the minute (0-59).\r\n     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\r\n     * @type {number}\r\n     */\r\n    get second() {\r\n        return this._c.second;\r\n    }\r\n    /**\r\n     * Get the millisecond of the second (0-999).\r\n     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\r\n     * @type {number}\r\n     */\r\n    get millisecond() {\r\n        return this._c.millisecond;\r\n    }\r\n    /**\r\n     * Get the week year\r\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\r\n     * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\r\n     * @type {number}\r\n     */\r\n    get weekYear() {\r\n        return this._possiblyCachedWeekData().weekYear;\r\n    }\r\n    /**\r\n     * Get the week number of the week year (1-52ish).\r\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\r\n     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\r\n     * @type {number}\r\n     */\r\n    get weekNumber() {\r\n        return this._possiblyCachedWeekData().weekNumber;\r\n    }\r\n    /**\r\n     * Get the day of the week.\r\n     * 1 is Monday and 7 is Sunday\r\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\r\n     * @example DateTime.local(2014, 11, 31).weekday //=> 4\r\n     * @type {number}\r\n     */\r\n    get weekday() {\r\n        return this._possiblyCachedWeekData().weekday;\r\n    }\r\n    /**\r\n     * Get the ordinal (meaning the day of the year)\r\n     * @example DateTime.local(2017, 5, 25).ordinal //=> 145\r\n     * @type {number}\r\n     */\r\n    get ordinal() {\r\n        return gregorianToOrdinal(this._c).ordinal;\r\n    }\r\n    /**\r\n     * Get the human readable short month name, such as 'Oct'.\r\n     * Defaults to the system's locale if no locale has been specified\r\n     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\r\n     * @type {string}\r\n     */\r\n    get monthShort() {\r\n        return Info.months(\"short\", { locale: this.locale })[this.month - 1];\r\n    }\r\n    /**\r\n     * Get the human readable long month name, such as 'October'.\r\n     * Defaults to the system's locale if no locale has been specified\r\n     * @example DateTime.local(2017, 10, 30).monthLong //=> October\r\n     * @type {string}\r\n     */\r\n    get monthLong() {\r\n        return Info.months(\"long\", { locale: this.locale })[this.month - 1];\r\n    }\r\n    /**\r\n     * Get the human readable short weekday, such as 'Mon'.\r\n     * Defaults to the system's locale if no locale has been specified\r\n     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\r\n     * @type {string}\r\n     */\r\n    get weekdayShort() {\r\n        return Info.weekdays(\"short\", { locale: this.locale })[this.weekday - 1];\r\n    }\r\n    /**\r\n     * Get the human readable long weekday, such as 'Monday'.\r\n     * Defaults to the system's locale if no locale has been specified\r\n     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\r\n     * @type {string}\r\n     */\r\n    get weekdayLong() {\r\n        return Info.weekdays(\"long\", { locale: this.locale })[this.weekday - 1];\r\n    }\r\n    /**\r\n     * Get the UTC offset of this DateTime in minutes\r\n     * @example DateTime.now().offset //=> -240\r\n     * @example DateTime.utc().offset //=> 0\r\n     * @type {number}\r\n     */\r\n    get offset() {\r\n        return this.zone.offset(this._ts);\r\n    }\r\n    /**\r\n     * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\r\n     * Defaults to the system's locale if no locale has been specified\r\n     * @type {string}\r\n     */\r\n    get offsetNameShort() {\r\n        return this.zone.offsetName(this._ts, {\r\n            format: \"short\",\r\n            locale: this.locale\r\n        });\r\n    }\r\n    /**\r\n     * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\r\n     * Defaults to the system's locale if no locale has been specified\r\n     * @type {string}\r\n     */\r\n    get offsetNameLong() {\r\n        return this.zone.offsetName(this._ts, {\r\n            format: \"long\",\r\n            locale: this.locale\r\n        });\r\n    }\r\n    /**\r\n     * Get whether this zone's offset ever changes, as in a DST.\r\n     * @type {boolean}\r\n     */\r\n    get isOffsetFixed() {\r\n        return this.zone.isUniversal;\r\n    }\r\n    /**\r\n     * Get whether the DateTime is in a DST.\r\n     * @type {boolean}\r\n     */\r\n    get isInDST() {\r\n        return (this.offset > this.set({ month: 12 }).offset || this.offset > this.set({ month: 6 }).offset);\r\n    }\r\n    /**\r\n     * Returns true if this DateTime is in a leap year, false otherwise\r\n     * @example DateTime.local(2016).isInLeapYear //=> true\r\n     * @example DateTime.local(2013).isInLeapYear //=> false\r\n     * @type {boolean}\r\n     */\r\n    get isInLeapYear() {\r\n        return isLeapYear(this.year);\r\n    }\r\n    /**\r\n     * Returns the number of days in this DateTime's month\r\n     * @example DateTime.local(2016, 2).daysInMonth //=> 29\r\n     * @example DateTime.local(2016, 3).daysInMonth //=> 31\r\n     * @type {number}\r\n     */\r\n    get daysInMonth() {\r\n        return daysInMonth(this.year, this.month);\r\n    }\r\n    /**\r\n     * Returns the number of days in this DateTime's year\r\n     * @example DateTime.local(2016).daysInYear //=> 366\r\n     * @example DateTime.local(2013).daysInYear //=> 365\r\n     * @type {number}\r\n     */\r\n    get daysInYear() {\r\n        return daysInYear(this.year);\r\n    }\r\n    /**\r\n     * Returns the number of weeks in this DateTime's year\r\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\r\n     * @example DateTime.local(2004).weeksInWeekYear //=> 53\r\n     * @example DateTime.local(2013).weeksInWeekYear //=> 52\r\n     * @type {number}\r\n     */\r\n    get weeksInWeekYear() {\r\n        return weeksInWeekYear(this.weekYear);\r\n    }\r\n    // CONSTRUCT\r\n    /**\r\n     * Create a DateTime for the current instant, in the system's time zone.\r\n     *\r\n     * Use Settings to override these default values if needed.\r\n     * @example DateTime.now().toISO() //~> now in the ISO format\r\n     * @return {DateTime}\r\n     */\r\n    static now() {\r\n        return DateTime.local();\r\n    }\r\n    /**\r\n     * Create a local DateTime\r\n     * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\r\n     * @param {number} [month=1] - The month, 1-indexed\r\n     * @param {number} [day=1] - The day of the month, 1-indexed\r\n     * @param {number} [hour=0] - The hour of the day, in 24-hour time\r\n     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\r\n     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\r\n     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\r\n     * @param {Object} options - configuration options for the DateTime\r\n     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\r\n     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\r\n     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\r\n     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\r\n     * @example DateTime.local()                                  //~> now\r\n     * @example DateTime.local({ zone: \"America/New_York\" })      //~> now, in US east coast time\r\n     * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00\r\n     * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00\r\n     * @example DateTime.local(2017, 3, 12, { locale: \"fr\")       //~> 2017-03-12T00:00:00, with a French locale\r\n     * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00\r\n     * @example DateTime.local(2017, 3, 12, 5, { zone: \"utc\" })   //~> 2017-03-12T05:00:00, in UTC\r\n     * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00\r\n     * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10\r\n     * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765\r\n     * @return {DateTime}\r\n     */\r\n    static local(...args) {\r\n        const [options, values] = lastOpts(args), [year, month, day, hour, minute, second, millisecond] = values;\r\n        return DateTime._quickDT({ year, month, day, hour, minute, second, millisecond }, options);\r\n    }\r\n    /**\r\n     * Create a DateTime in UTC\r\n     * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\r\n     * @param {number} [month=1] - The month, 1-indexed\r\n     * @param {number} [day=1] - The day of the month\r\n     * @param {number} [hour=0] - The hour of the day, in 24-hour time\r\n     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\r\n     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\r\n     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\r\n     * @param {Object} options - configuration options for the DateTime\r\n     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\r\n     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\r\n     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\r\n     * @example DateTime.utc()                                            //~> now\r\n     * @example DateTime.utc(2017)                                        //~> 2017-01-01T00:00:00Z\r\n     * @example DateTime.utc(2017, 3)                                     //~> 2017-03-01T00:00:00Z\r\n     * @example DateTime.utc(2017, 3, 12)                                 //~> 2017-03-12T00:00:00Z\r\n     * @example DateTime.utc(2017, 3, 12, 5)                              //~> 2017-03-12T05:00:00Z\r\n     * @example DateTime.utc(2017, 3, 12, 5, 45)                          //~> 2017-03-12T05:45:00Z\r\n     * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: \"fr\" } )       //~> 2017-03-12T05:45:00Z with a French locale\r\n     * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                      //~> 2017-03-12T05:45:10Z\r\n     * @return {DateTime}\r\n     */\r\n    static utc(...args) {\r\n        const [options, values] = lastOpts(args), [year, month, day, hour, minute, second, millisecond] = values;\r\n        options.zone = FixedOffsetZone.utcInstance;\r\n        return DateTime._quickDT({ year, month, day, hour, minute, second, millisecond }, options);\r\n    }\r\n    /**\r\n     * Create a DateTime from a Javascript Date object. Uses the default zone.\r\n     * @param {Date} date - a Javascript Date object\r\n     * @param {Object} options - configuration options for the DateTime\r\n     * @param {string|Zone} [options.zone='default'] - the zone to place the DateTime into\r\n     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\r\n     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\r\n     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\r\n     * @param {bool} [options.nullOnInvalid=false] - return null on invalid values instead of throwing an error\r\n     * @return {DateTime}\r\n     */\r\n    static fromJSDate(date, options = {}) {\r\n        if (!isDate(date) || Number.isNaN(date.valueOf())) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new InvalidArgumentError(\"date argument must be a valid Date\");\r\n        }\r\n        return new DateTime({\r\n            ts: date.valueOf(),\r\n            zone: normalizeZone(options.zone, Settings.defaultZone),\r\n            loc: Locale.fromObject(options)\r\n        });\r\n    }\r\n    /**\r\n     * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\r\n     * @param {number} milliseconds - a number of milliseconds since 1970 UTC\r\n     * @param {Object} options - configuration options for the DateTime\r\n     * @param {string|Zone} [options.zone='default'] - the zone to place the DateTime into\r\n     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\r\n     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\r\n     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\r\n     * @param {bool} [options.nullOnInvalid=false] - return null on invalid values instead of throwing an error\r\n     * @return {DateTime}\r\n     */\r\n    static fromMillis(milliseconds, options = {}) {\r\n        if (!isNumber(milliseconds)) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new InvalidArgumentError(`fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`);\r\n        }\r\n        if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {\r\n            // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new InvalidArgumentError(\"Timestamp out of range\");\r\n        }\r\n        return new DateTime({\r\n            ts: milliseconds,\r\n            zone: normalizeZone(options.zone, Settings.defaultZone),\r\n            loc: Locale.fromObject(options)\r\n        });\r\n    }\r\n    /**\r\n     * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\r\n     * @param {number} seconds - a number of seconds since 1970 UTC\r\n     * @param {Object} options - configuration options for the DateTime\r\n     * @param {string|Zone} [options.zone='default'] - the zone to place the DateTime into\r\n     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\r\n     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\r\n     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\r\n     * @param {bool} [options.nullOnInvalid=false] - return null on invalid values instead of throwing an error\r\n     * @return {DateTime}\r\n     */\r\n    static fromSeconds(seconds, options = {}) {\r\n        if (!isNumber(seconds)) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\r\n        }\r\n        return new DateTime({\r\n            ts: seconds * 1000,\r\n            zone: normalizeZone(options.zone, Settings.defaultZone),\r\n            loc: Locale.fromObject(options)\r\n        });\r\n    }\r\n    /**\r\n     * Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.\r\n     * @param {Object} object - the object to create the DateTime from\r\n     * @param {number} obj.year - a year, such as 1987\r\n     * @param {number} obj.month - a month, 1-12\r\n     * @param {number} obj.day - a day of the month, 1-31, depending on the month\r\n     * @param {number} obj.ordinal - day of the year, 1-365 or 366\r\n     * @param {number} obj.weekYear - an ISO week year\r\n     * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\r\n     * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\r\n     * @param {number} obj.hour - hour of the day, 0-23\r\n     * @param {number} obj.minute - minute of the hour, 0-59\r\n     * @param {number} obj.second - second of the minute, 0-59\r\n     * @param {number} obj.millisecond - millisecond of the second, 0-999\r\n     * @param {Object} options - configuration options for the DateTime\r\n     * @param {string|Zone} [options.zone='default'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\r\n     * @param {string} [options.locale='system's locale'] - a locale to set on the resulting DateTime instance\r\n     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\r\n     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\r\n     * @param {bool} [options.nullOnInvalid=false] - return null on invalid values instead of throwing an error\r\n     * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\r\n     * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'\r\n     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\r\n     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, }, {zone: 'utc' }),\r\n     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'default' })\r\n     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })\r\n     * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\r\n     * @return {DateTime}\r\n     */\r\n    static fromObject(object, options = {}) {\r\n        object = object || {};\r\n        const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);\r\n        const tsNow = Settings.now();\r\n        let normalized, offsetProvis;\r\n        try {\r\n            normalized = normalizeObject(object, normalizeUnit);\r\n            offsetProvis = zoneToUse.offset(tsNow);\r\n        }\r\n        catch (error) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw error;\r\n        }\r\n        const containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber, loc = Locale.fromObject(options);\r\n        // cases:\r\n        // just a weekday -> this week's instance of that weekday, no worries\r\n        // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\r\n        // (gregorian month or day) + ordinal -> error\r\n        // otherwise just use weeks or ordinals or gregorian, depending on what's specified\r\n        if ((containsGregor || containsOrdinal) && definiteWeekDef) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new ConflictingSpecificationError(\"Can't mix weekYear/weekNumber units with year/month/day or ordinals\");\r\n        }\r\n        if (containsGregorMD && containsOrdinal) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\r\n        }\r\n        const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\r\n        // configure ourselves to deal with gregorian dates or week stuff\r\n        const gregorianNow = tsToObj(tsNow, offsetProvis);\r\n        if (useWeekData) {\r\n            const objNow = gregorianToWeek(gregorianNow);\r\n            DateTime._normalizeWithDefaults(objNow, normalized, orderedWeekUnits, defaultWeekUnitValues);\r\n        }\r\n        else if (containsOrdinal) {\r\n            const objNow = gregorianToOrdinal(gregorianNow);\r\n            DateTime._normalizeWithDefaults(objNow, normalized, orderedOrdinalUnits, defaultOrdinalUnitValues);\r\n        }\r\n        else {\r\n            DateTime._normalizeWithDefaults(gregorianNow, normalized, orderedUnits, defaultUnitValues);\r\n        }\r\n        // make sure the values we have are in range\r\n        let error;\r\n        if (useWeekData) {\r\n            error = hasInvalidWeekData(normalized);\r\n        }\r\n        else if (containsOrdinal) {\r\n            error = hasInvalidOrdinalData(normalized);\r\n        }\r\n        else {\r\n            error = hasInvalidGregorianData(normalized);\r\n        }\r\n        error = error || hasInvalidTimeData(normalized);\r\n        if (error) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new UnitOutOfRangeError(error[0], error[1]);\r\n        }\r\n        // compute the actual time\r\n        const gregorian = useWeekData\r\n            ? weekToGregorian(normalized)\r\n            : containsOrdinal\r\n                ? ordinalToGregorian(normalized)\r\n                : normalized, ts = objToTS(gregorian, offsetProvis, zoneToUse)[0], inst = new DateTime({\r\n            ts,\r\n            zone: zoneToUse,\r\n            loc\r\n        });\r\n        // gregorian data + weekday serves only to validate\r\n        if (normalized.weekday && containsGregor && object.weekday !== inst.weekday) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new MismatchedWeekdayError(normalized.weekday, inst.toISO());\r\n        }\r\n        return inst;\r\n    }\r\n    /**\r\n     * Create a DateTime from an ISO 8601 string\r\n     * @param {string} text - the ISO string\r\n     * @param {Object} options - options to affect the creation\r\n     * @param {string|Zone} [options.zone='default'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\r\n     * @param {boolean} [options.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\r\n     * @param {string} [options.locale='system's locale'] - a locale to set on the resulting DateTime instance\r\n     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\r\n     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\r\n     * @param {bool} [options.nullOnInvalid=false] - return null on invalid strings instead of throwing an error\r\n     * @example DateTime.fromISO('2016-05-25T09:08:34.123')\r\n     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\r\n     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\r\n     * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\r\n     * @example DateTime.fromISO('2016-W05-4')\r\n     * @return {DateTime}\r\n     */\r\n    static fromISO(text, options = {}) {\r\n        const [vals, parsedZone] = parseISODate(text);\r\n        return parseDataToDateTime(vals, parsedZone, options, \"ISO 8601\", text);\r\n    }\r\n    /**\r\n     * Create a DateTime from an RFC 2822 string\r\n     * @param {string} text - the RFC 2822 string\r\n     * @param {Object} options - options to affect the creation\r\n     * @param {string|Zone} [options.zone='default'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\r\n     * @param {boolean} [options.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\r\n     * @param {string} [options.locale='system's locale'] - a locale to set on the resulting DateTime instance\r\n     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\r\n     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\r\n     * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\r\n     * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')\r\n     * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\r\n     * @return {DateTime}\r\n     */\r\n    static fromRFC2822(text, options = {}) {\r\n        const [vals, parsedZone] = parseRFC2822Date(text);\r\n        return parseDataToDateTime(vals, parsedZone, options, \"RFC 2822\", text);\r\n    }\r\n    /**\r\n     * Create a DateTime from an HTTP header date\r\n     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\r\n     * @param {string} text - the HTTP header date\r\n     * @param {Object} options - options to affect the creation\r\n     * @param {string|Zone} [options.zone='default'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\r\n     * @param {boolean} [options.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\r\n     * @param {string} [options.locale='system's locale'] - a locale to set on the resulting DateTime instance\r\n     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\r\n     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\r\n     * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\r\n     * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\r\n     * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\r\n     * @return {DateTime}\r\n     */\r\n    static fromHTTP(text, options = {}) {\r\n        const [vals, parsedZone] = parseHTTPDate(text);\r\n        return parseDataToDateTime(vals, parsedZone, options, \"HTTP\", text);\r\n    }\r\n    /**\r\n     * Create a DateTime from an input string and format string.\r\n     * Defaults to en-US if no locale has been specified, regardless of the system's locale.\r\n     * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens\r\n     * @param {string} text - the string to parse\r\n     * @param {string} format - the format the string is expected to be in (see the link below for the formats)\r\n     * @param {Object} options - options to affect the creation\r\n     * @param {string|Zone} [options.zone='default'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\r\n     * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\r\n     * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\r\n     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\r\n     * @param {string} [options.numberingSystem] - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\r\n     * @return {DateTime}\r\n     */\r\n    static fromFormat(text, format, options = {}) {\r\n        if (isUndefined(text) || isUndefined(format)) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\r\n        }\r\n        const localeToUse = Locale.create(options.locale, options.numberingSystem, options.outputCalendar, true /* defaultToEN */), [vals, parsedZone, invalid] = parseFromTokens(localeToUse, text, format);\r\n        if (invalid) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new UnparsableStringError(format, text);\r\n        }\r\n        else {\r\n            // Not invalid, vals and parsedZone are not undefined\r\n            return parseDataToDateTime(vals, parsedZone, options, `format ${format}`, text);\r\n        }\r\n    }\r\n    /**\r\n     * Create a DateTime from a SQL date, time, or datetime\r\n     * Defaults to en-US if no locale has been specified, regardless of the system's locale\r\n     * @param {string} text - the string to parse\r\n     * @param {Object} options - options to affect the creation\r\n     * @param {string|Zone} [options.zone='default'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\r\n     * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\r\n     * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\r\n     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\r\n     * @param {string} [options.numberingSystem] - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\r\n     * @example DateTime.fromSQL('2017-05-15')\r\n     * @example DateTime.fromSQL('2017-05-15 09:12:34')\r\n     * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\r\n     * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\r\n     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\r\n     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\r\n     * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\r\n     * @example DateTime.fromSQL('09:12:34.342')\r\n     * @return {DateTime}\r\n     */\r\n    static fromSQL(text, options = {}) {\r\n        const [vals, parsedZone] = parseSQL(text);\r\n        return parseDataToDateTime(vals, parsedZone, options, \"SQL\", text);\r\n    }\r\n    /**\r\n     * Check if an object is a DateTime. Works across context boundaries\r\n     * @param {Object} o\r\n     * @return {boolean}\r\n     */\r\n    static isDateTime(o) {\r\n        return (o && o._isLuxonDateTime) || false;\r\n    }\r\n    /**\r\n     * Return the min of several date times\r\n     * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\r\n     * @return {DateTime} the min DateTime, or undefined if called with no arguments\r\n     */\r\n    static min(...dateTimes) {\r\n        if (!dateTimes.every(DateTime.isDateTime)) {\r\n            throw new InvalidArgumentError(\"min requires all arguments be DateTimes\");\r\n        }\r\n        if (dateTimes.length === 0) {\r\n            return undefined;\r\n        }\r\n        return bestBy(dateTimes, i => i.valueOf(), Math.min);\r\n    }\r\n    /**\r\n     * Return the max of several date times\r\n     * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\r\n     * @return {DateTime} the max DateTime, or undefined if called with no arguments\r\n     */\r\n    static max(...dateTimes) {\r\n        if (!dateTimes.every(DateTime.isDateTime)) {\r\n            throw new InvalidArgumentError(\"max requires all arguments be DateTimes\");\r\n        }\r\n        if (dateTimes.length === 0) {\r\n            return undefined;\r\n        }\r\n        return bestBy(dateTimes, i => i.valueOf(), Math.max);\r\n    }\r\n    // MISC\r\n    /**\r\n     * Explain how a string would be parsed by fromFormat()\r\n     * @param {string} text - the string to parse\r\n     * @param {string} format - the format the string is expected to be in (see description)\r\n     * @param {Object} options - options taken by fromFormat()\r\n     * @return {Object}\r\n     */\r\n    static fromFormatExplain(text, format, options = {}) {\r\n        const localeToUse = Locale.create(options.locale, options.numberingSystem, options.outputCalendar, true /* defaultToEN */);\r\n        return explainFromTokens(localeToUse, text, format);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    // this is a dumbed down version of fromObject() that runs about 60% faster\r\n    // but doesn't do any validation, makes a bunch of assumptions about what units\r\n    // are present, and so on.\r\n    static _quickDT(obj, options) {\r\n        const zone = normalizeZone(options.zone, Settings.defaultZone), loc = Locale.fromObject(options), tsNow = Settings.now();\r\n        let ts;\r\n        // assume we have the higher-order units\r\n        if (!isUndefined(obj.year)) {\r\n            for (const u of orderedUnits) {\r\n                if (isUndefined(obj[u])) {\r\n                    obj[u] = defaultUnitValues[u];\r\n                }\r\n            }\r\n            const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\r\n            if (invalid) {\r\n                if (options.nullOnInvalid) {\r\n                    return null;\r\n                }\r\n                throw new UnitOutOfRangeError(invalid[0], invalid[1]);\r\n            }\r\n            const offsetProvis = zone.offset(tsNow);\r\n            ts = objToTS(obj, offsetProvis, zone)[0];\r\n        }\r\n        else {\r\n            ts = tsNow;\r\n        }\r\n        return new DateTime({ ts, zone, loc });\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _normalizeWithDefaults(objNow, normalized, units, defaultValues) {\r\n        // set default values for missing stuff in object\r\n        let foundFirst = false;\r\n        for (const u of units) {\r\n            const v = normalized[u];\r\n            if (!isUndefined(v)) {\r\n                foundFirst = true;\r\n            }\r\n            else if (foundFirst) {\r\n                normalized[u] = defaultValues[u];\r\n            }\r\n            else {\r\n                normalized[u] = objNow[u];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _diffRelative(start, end, options) {\r\n        const round = isUndefined(options.round) ? true : options.round, format = (c, unit) => {\r\n            c = roundTo(c, round || options.calendary ? 0 : 2, true);\r\n            const rtfOptions = { numeric: options.numeric };\r\n            if (options.style) {\r\n                rtfOptions.style = options.style;\r\n            }\r\n            const formatter = end._loc.clone(options).relFormatter(rtfOptions);\r\n            return formatter.format(c, unit);\r\n        }, differ = (unit) => {\r\n            if (options.calendary) {\r\n                if (!end.hasSame(start, unit)) {\r\n                    return end\r\n                        .startOf(unit)\r\n                        .diff(start.startOf(unit), unit)\r\n                        .get(unit);\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            }\r\n            else {\r\n                return end.diff(start, unit).get(unit);\r\n            }\r\n        };\r\n        if (options.unit) {\r\n            return format(differ(options.unit), options.unit);\r\n        }\r\n        for (const unit of options.units) {\r\n            const count = differ(unit);\r\n            if (Math.abs(count) >= 1) {\r\n                return format(count, unit);\r\n            }\r\n        }\r\n        return format(0, options.units[options.units.length - 1]);\r\n    }\r\n    // INFO\r\n    /**\r\n     * Get the value of unit.\r\n     * @param {string} unit - a unit such as 'minute' or 'day'\r\n     * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\r\n     * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\r\n     * @return {number}\r\n     */\r\n    get(unit) {\r\n        return this[unit];\r\n    }\r\n    /**\r\n     * Returns the resolved Intl options for this DateTime.\r\n     * This is useful in understanding the behavior of formatting methods\r\n     * @return {Object}\r\n     */\r\n    resolvedLocaleOptions() {\r\n        const { locale, numberingSystem: ns, calendar } = Formatter.create(this._loc).resolvedOptions(this);\r\n        const numberingSystem = ns;\r\n        const outputCalendar = calendar;\r\n        return { locale, numberingSystem, outputCalendar };\r\n    }\r\n    // TRANSFORM\r\n    /**\r\n     * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\r\n     *\r\n     * Equivalent to {@link DateTime#setZone}('utc')\r\n     * @param {number} [offset=0] - optionally, an offset from UTC in minutes\r\n     * @param {Object} [options={}] - options to pass to `setZone()`\r\n     * @return {DateTime}\r\n     */\r\n    toUTC(offset = 0, options = {}) {\r\n        return this.setZone(FixedOffsetZone.instance(offset), options);\r\n    }\r\n    /**\r\n     * \"Set\" the DateTime's zone to the system's time zone. Returns a newly-constructed DateTime.\r\n     * The system time zone is the one set on the machine where this code gets executed.\r\n     *\r\n     * Equivalent to `setZone(\"system\")`\r\n     * @return {DateTime}\r\n     */\r\n    toSystemZone() {\r\n        return this.setZone(SystemZone.instance);\r\n    }\r\n    /**\r\n     * \"Set\" the DateTime's zone to the default zone. Returns a newly-constructed DateTime.\r\n     * The default time zone is used when creating new DateTimes, unless otherwise specified.\r\n     * It defaults to the system's time zone, but can be overriden in `Settings`.\r\n     *\r\n     * Equivalent to `setZone(\"default\")`\r\n     * @return {DateTime}\r\n     */\r\n    toDefaultZone() {\r\n        return this.setZone(Settings.defaultZone);\r\n    }\r\n    /**\r\n     * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\r\n     *\r\n     * By default, the setter keeps the underlying instant the same (as in, the same timestamp), but the new instance will report different local time and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toSystemZone} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.\r\n     * @param {string|Zone} [zone='default'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'default', 'system' or 'utc'. You may also supply an instance of a {@link Zone} class.\r\n     * @param {Object} options - options\r\n     * @param {boolean} [options.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\r\n     * @return {DateTime}\r\n     */\r\n    setZone(zone, { keepLocalTime = false } = {}) {\r\n        zone = normalizeZone(zone, Settings.defaultZone);\r\n        if (zone.equals(this.zone)) {\r\n            return this;\r\n        }\r\n        else if (!zone.isValid) {\r\n            throw new InvalidZoneError(zone.name);\r\n        }\r\n        else {\r\n            let newTS = this._ts;\r\n            if (keepLocalTime) {\r\n                const offsetGuess = zone.offset(this._ts);\r\n                const asObj = this.toObject();\r\n                newTS = objToTS(asObj, offsetGuess, zone)[0];\r\n            }\r\n            return this._clone({ ts: newTS, zone });\r\n        }\r\n    }\r\n    /**\r\n     * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\r\n     * @param {Object} [options] - the options to set\r\n     * @param {string} [options.locale] - ;\r\n     * @param {CalendarSystem} [options.outputCalendar] - ;\r\n     * @param {NumberingSystem} [options.numberingSystem] - ;\r\n     * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\r\n     * @return {DateTime}\r\n     */\r\n    reconfigure(options) {\r\n        const loc = this._loc.clone(options);\r\n        return this._clone({ loc });\r\n    }\r\n    /**\r\n     * \"Set\" the locale. Returns a newly-constructed DateTime.\r\n     * Just a convenient alias for reconfigure({ locale })\r\n     * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\r\n     * @return {DateTime}\r\n     */\r\n    setLocale(locale) {\r\n        return this.reconfigure({ locale });\r\n    }\r\n    /**\r\n     * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\r\n     * You can only set units with this method; for \"setting\" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.\r\n     * @param {Object} values - a mapping of units to numbers\r\n     * @example dt.set({ year: 2017 })\r\n     * @example dt.set({ hour: 8, minute: 30 })\r\n     * @example dt.set({ weekday: 5 })\r\n     * @example dt.set({ year: 2005, ordinal: 234 })\r\n     * @return {DateTime}\r\n     */\r\n    set(values) {\r\n        const normalized = normalizeObject(values, normalizeUnit), settingWeekStuff = !isUndefined(normalized.weekYear) ||\r\n            !isUndefined(normalized.weekNumber) ||\r\n            !isUndefined(normalized.weekday);\r\n        let mixed;\r\n        if (settingWeekStuff) {\r\n            mixed = weekToGregorian(Object.assign(gregorianToWeek(this._c), normalized));\r\n        }\r\n        else if (!isUndefined(normalized.ordinal)) {\r\n            mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this._c), normalized));\r\n        }\r\n        else {\r\n            mixed = Object.assign(this.toObject(), normalized);\r\n            // if we didn't set the day but we ended up on an overflow date,\r\n            // use the last day of the right month\r\n            if (isUndefined(normalized.day)) {\r\n                mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\r\n            }\r\n        }\r\n        const [ts, o] = objToTS(mixed, this._o, this.zone);\r\n        return this._clone({ ts, o });\r\n    }\r\n    /**\r\n     * Add a period of time to this DateTime and return the resulting DateTime\r\n     *\r\n     * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\r\n     * @param {Duration|Object} duration - The amount to add. Either a Luxon Duration or the object argument to Duration.fromObject()\r\n     * @example DateTime.now().plus(123) //~> in 123 milliseconds\r\n     * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes\r\n     * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow\r\n     * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday\r\n     * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min\r\n     * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min\r\n     * @return {DateTime}\r\n     */\r\n    plus(duration) {\r\n        const dur = friendlyDuration(duration);\r\n        return this._clone(this._adjustTime(dur));\r\n    }\r\n    /**\r\n     * Subtract a period of time to this DateTime and return the resulting DateTime\r\n     * See {@link DateTime#plus}\r\n     * @param {Duration|Object} duration - The amount to subtract. Either a Luxon Duration or the object argument to Duration.fromObject()\r\n     @return {DateTime}\r\n     */\r\n    minus(duration) {\r\n        const dur = friendlyDuration(duration).negate();\r\n        return this._clone(this._adjustTime(dur));\r\n    }\r\n    /**\r\n     * \"Set\" this DateTime to the beginning of a unit of time.\r\n     * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\r\n     * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\r\n     * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\r\n     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('week').toISOTime(); //=> '2014-03-03', weeks always start on a Monday\r\n     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\r\n     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\r\n     * @return {DateTime}\r\n     */\r\n    startOf(unit) {\r\n        const o = {}, normalizedUnit = Duration.normalizeUnit(unit);\r\n        switch (normalizedUnit) {\r\n            case \"years\":\r\n                o.month = 1;\r\n            // falls through\r\n            case \"quarters\":\r\n            case \"months\":\r\n                o.day = 1;\r\n            // falls through\r\n            case \"weeks\":\r\n            case \"days\":\r\n                o.hour = 0;\r\n            // falls through\r\n            case \"hours\":\r\n                o.minute = 0;\r\n            // falls through\r\n            case \"minutes\":\r\n                o.second = 0;\r\n            // falls through\r\n            case \"seconds\":\r\n                o.millisecond = 0;\r\n                break;\r\n            case \"milliseconds\":\r\n                break;\r\n            // no default, invalid units throw in normalizeUnit()\r\n        }\r\n        if (normalizedUnit === \"weeks\") {\r\n            o.weekday = 1;\r\n        }\r\n        if (normalizedUnit === \"quarters\") {\r\n            const q = Math.ceil(this.month / 3);\r\n            o.month = (q - 1) * 3 + 1;\r\n        }\r\n        return this.set(o);\r\n    }\r\n    /**\r\n     * \"Set\" this DateTime to the end (meaning the last millisecond) of a unit of time\r\n     * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\r\n     * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\r\n     * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\r\n     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\r\n     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\r\n     * @return {DateTime}\r\n     */\r\n    endOf(unit) {\r\n        return this.plus({ [unit]: 1 })\r\n            .startOf(unit)\r\n            .minus({ milliseconds: 1 });\r\n    }\r\n    // OUTPUT\r\n    /**\r\n     * Returns a string representation of this DateTime formatted according to the specified format string.\r\n     * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).\r\n     * Defaults to en-US if no locale has been specified, regardless of the system's locale.\r\n     * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens\r\n     * @param {string} format - the format string\r\n     * @param {Object} options - overriden configuration options\r\n     * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\r\n     * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\r\n     * @example DateTime.now().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\r\n     * @example DateTime.now().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\r\n     * @return {string}\r\n     */\r\n    toFormat(format, options = {}) {\r\n        return Formatter.create(this._loc.redefaultToEN(options)).formatDateTimeFromString(this, format);\r\n    }\r\n    /**\r\n     * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\r\n     * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation\r\n     * of the DateTime in the assigned locale.\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\r\n     * @param options {Object} - Intl.DateTimeFormat constructor options and configuration options\r\n     * @example DateTime.now().toLocaleString(); //=> 4/20/2017\r\n     * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\r\n     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\r\n     * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\r\n     * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\r\n     * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'\r\n     * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'\r\n     * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hour12: false }); //=> '21:32'\r\n     * @return {string}\r\n     */\r\n    toLocaleString(options = Formats.DATE_SHORT) {\r\n        return Formatter.create(this._loc, options).formatDateTime(this);\r\n    }\r\n    /**\r\n     * Returns an array of format \"parts\", meaning individual tokens along with metadata. This allows callers to post-process individual sections of the formatted output.\r\n     * Defaults to the system's locale if no locale has been specified\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\r\n     * @param options {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\r\n     * @example DateTime.now().toLocaleParts(); //=> [\r\n     *                                   //=>   { type: 'day', value: '25' },\r\n     *                                   //=>   { type: 'literal', value: '/' },\r\n     *                                   //=>   { type: 'month', value: '05' },\r\n     *                                   //=>   { type: 'literal', value: '/' },\r\n     *                                   //=>   { type: 'year', value: '1982' }\r\n     *                                   //=> ]\r\n     */\r\n    toLocaleParts(options = {}) {\r\n        return Formatter.create(this._loc, options).formatDateTimeParts(this);\r\n    }\r\n    /**\r\n     * Returns an ISO 8601-compliant string representation of this DateTime\r\n     * @param {Object} options - options\r\n     * @param {boolean} [options.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\r\n     * @param {boolean} [options.suppressSeconds=false] - exclude seconds from the format if they're 0\r\n     * @param {boolean} [options.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\r\n     * @param {string} [options.format='extended'] - choose between the basic and extended format\r\n     * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\r\n     * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'\r\n     * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\r\n     * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'\r\n     * @return {string}\r\n     */\r\n    toISO(options = {}) {\r\n        return `${this.toISODate({ format: options.format })}T${this.toISOTime(options)}`;\r\n    }\r\n    /**\r\n     * Returns an ISO 8601-compliant string representation of this DateTime's date component\r\n     * @param {Object} options - options\r\n     * @param {string} [options.format='extended'] - choose between the basic and extended format\r\n     * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\r\n     * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'\r\n     * @return {string}\r\n     */\r\n    toISODate(options = { format: \"extended\" }) {\r\n        let fmt = options.format === \"basic\" ? \"yyyyMMdd\" : \"yyyy-MM-dd\";\r\n        if (this.year > 9999) {\r\n            fmt = \"+\" + fmt;\r\n        }\r\n        return toTechFormat(this, fmt);\r\n    }\r\n    /**\r\n     * Returns an ISO 8601-compliant string representation of this DateTime's week date\r\n     * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\r\n     * @return {string}\r\n     */\r\n    toISOWeekDate() {\r\n        return toTechFormat(this, \"kkkk-[W]WW-c\");\r\n    }\r\n    /**\r\n     * Returns an ISO 8601-compliant string representation of this DateTime's time component\r\n     * @param {Object} options - options\r\n     * @param {boolean} [options.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\r\n     * @param {boolean} [options.suppressSeconds=false] - exclude seconds from the format if they're 0\r\n     * @param {boolean} [options.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\r\n     * @param {string} [options.format='extended'] - choose between the basic and extended format\r\n     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'\r\n     * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\r\n     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'\r\n     * @return {string}\r\n     */\r\n    toISOTime({ suppressMilliseconds = false, suppressSeconds = false, includeOffset = true, format = \"extended\" } = {}) {\r\n        return toTechTimeFormat(this, {\r\n            suppressSeconds,\r\n            suppressMilliseconds,\r\n            includeOffset,\r\n            format\r\n        });\r\n    }\r\n    /**\r\n     * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\r\n     * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\r\n     * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\r\n     * @return {string}\r\n     */\r\n    toRFC2822() {\r\n        return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\", false);\r\n    }\r\n    /**\r\n     * Returns a string representation of this DateTime appropriate for use in HTTP headers.\r\n     * Specifically, the string conforms to RFC 1123.\r\n     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\r\n     * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\r\n     * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\r\n     * @return {string}\r\n     */\r\n    toHTTP() {\r\n        return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss [GMT]\");\r\n    }\r\n    /**\r\n     * Returns a string representation of this DateTime appropriate for use in SQL Date\r\n     * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\r\n     * @return {string}\r\n     */\r\n    toSQLDate() {\r\n        return toTechFormat(this, \"yyyy-MM-dd\");\r\n    }\r\n    /**\r\n     * Returns a string representation of this DateTime appropriate for use in SQL Time\r\n     * @param {Object} options - options\r\n     * @param {boolean} [options.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\r\n     * @param {boolean} [options.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\r\n     * @example DateTime.utc().toSQL() //=> '05:15:16.345'\r\n     * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'\r\n     * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'\r\n     * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\r\n     * @return {string}\r\n     */\r\n    toSQLTime({ includeOffset = true, includeZone = false } = {}) {\r\n        return toTechTimeFormat(this, {\r\n            includeOffset,\r\n            includeZone,\r\n            spaceZone: true\r\n        });\r\n    }\r\n    /**\r\n     * Returns a string representation of this DateTime appropriate for use in SQL DateTime\r\n     * @param {Object} options - options\r\n     * @param {boolean} [options.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\r\n     * @param {boolean} [options.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\r\n     * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\r\n     * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\r\n     * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\r\n     * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\r\n     * @return {string}\r\n     */\r\n    toSQL(options = {}) {\r\n        return `${this.toSQLDate()} ${this.toSQLTime(options)}`;\r\n    }\r\n    /**\r\n     * Returns a string representation of this DateTime appropriate for debugging\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return this.toISO();\r\n    }\r\n    /**\r\n     * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}\r\n     * @return {number}\r\n     */\r\n    valueOf() {\r\n        return this.toMillis();\r\n    }\r\n    /**\r\n     * Returns the epoch milliseconds of this DateTime.\r\n     * @return {number}\r\n     */\r\n    toMillis() {\r\n        return this._ts;\r\n    }\r\n    /**\r\n     * Returns the epoch seconds of this DateTime.\r\n     * @return {number}\r\n     */\r\n    toSeconds() {\r\n        return this._ts / 1000;\r\n    }\r\n    /**\r\n     * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\r\n     * @return {string}\r\n     */\r\n    toJSON() {\r\n        return this.toISO();\r\n    }\r\n    /**\r\n     * Returns a BSON serializable equivalent to this DateTime.\r\n     * @return {Date}\r\n     */\r\n    toBSON() {\r\n        return this.toJSDate();\r\n    }\r\n    /**\r\n     * Returns a Javascript object with this DateTime's year, month, day, and so on.\r\n     * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\r\n     * @return {Object}\r\n     */\r\n    toObject() {\r\n        return Object.assign({}, this._c);\r\n    }\r\n    /**\r\n     * Returns a Javascript Date equivalent to this DateTime.\r\n     * @return {Date}\r\n     */\r\n    toJSDate() {\r\n        return new Date(this._ts);\r\n    }\r\n    /**\r\n     * Return the difference between two DateTimes as a Duration.\r\n     * @param {DateTime} other - the DateTime to compare this one to\r\n     * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\r\n     * @param {Object} options - options that affect the creation of the Duration\r\n     * @param {string} [options.locale=locale()] - the locale to use\r\n     * @param {string} [options.numberingSystem=numberingSystem()] - the numbering system to use\r\n     * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on error instead of throwing\r\n     * @example\r\n     * var i1 = DateTime.fromISO('1982-05-25T09:45'),\r\n     *     i2 = DateTime.fromISO('1983-10-14T10:30');\r\n     * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\r\n     * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\r\n     * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\r\n     * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\r\n     * @return {Duration}\r\n     */\r\n    diff(other, unit = \"milliseconds\", options = {}) {\r\n        const durOpts = Object.assign({ locale: this.locale, numberingSystem: this.numberingSystem }, options, { nullOnInvalid: false });\r\n        let units;\r\n        try {\r\n            units = maybeArray(unit).map(Duration.normalizeUnit);\r\n            if (units.length === 0) {\r\n                throw new InvalidArgumentError(\"At least one unit must be specified\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw error;\r\n        }\r\n        const otherIsLater = other.valueOf() > this.valueOf(), earlier = otherIsLater ? this : other, later = otherIsLater ? other : this, diffed = diff(earlier, later, units, durOpts);\r\n        return otherIsLater ? diffed.negate() : diffed;\r\n    }\r\n    /**\r\n     * Return the difference between this DateTime and right now.\r\n     * See {@link DateTime#diff}\r\n     * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\r\n     * @param {Object} options - options that affect the creation of the Duration\r\n     * @param {string} [options.locale=locale()] - the locale to use\r\n     * @param {string} [options.numberingSystem=numberingSystem()] - the numbering system to use\r\n     * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on error instead of throwing\r\n     * @return {Duration}\r\n     */\r\n    diffNow(unit = \"milliseconds\", options = {}) {\r\n        return this.diff(DateTime.now(), unit, options);\r\n    }\r\n    /**\r\n     * Return an Interval spanning between this DateTime and another DateTime\r\n     * @param {DateTime} other - the other end point of the Interval\r\n     * @return {Interval}\r\n     */\r\n    until(other) {\r\n        return Interval.fromDateTimes(this, other);\r\n    }\r\n    /**\r\n     * Return whether this DateTime is in the same unit of time as another DateTime\r\n     * @param {DateTime} other - the other DateTime\r\n     * @param {string} unit - the unit of time to check sameness on\r\n     * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if both have the same calendar day\r\n     * @return {boolean}\r\n     */\r\n    hasSame(other, unit) {\r\n        if (Duration.normalizeUnit(unit) === \"milliseconds\") {\r\n            return this.valueOf() === other.valueOf();\r\n        }\r\n        else {\r\n            const inputMs = other.valueOf();\r\n            const otherZoneDateTime = this.setZone(other.zone, { keepLocalTime: true });\r\n            return +otherZoneDateTime.startOf(unit) <= inputMs && inputMs <= +otherZoneDateTime.endOf(unit);\r\n        }\r\n    }\r\n    /**\r\n     * Equality check\r\n     * Two DateTimes are equal iff they represent the same millisecond and have the same zone and location.\r\n     * To compare just the millisecond values, use `+dt1 === +dt2`.\r\n     * @param {DateTime} other - the other DateTime\r\n     * @return {boolean}\r\n     */\r\n    equals(other) {\r\n        return (this.valueOf() === other.valueOf() &&\r\n            this.zone.equals(other.zone) &&\r\n            this._loc.equals(other._loc));\r\n    }\r\n    /**\r\n     * Returns a string representation of a this time relative to now, such as \"in two days\". Can only internationalize if your\r\n     * platform supports Intl.RelativeTimeFormat. Rounds down by default.\r\n     * @param {Object} options - options that affect the output\r\n     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\r\n     * @param {string} [options.style=\"long\"] - the style of units, must be \"long\", \"short\", or \"narrow\"\r\n     * @param {string} [options.unit] - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", or \"seconds\"\r\n     * @param {boolean} [options.round=true] - whether to round the numbers in the output.\r\n     * @param {boolean} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.\r\n     * @param {string} [options.locale] - override the locale of this DateTime\r\n     * @param {string} [options.numberingSystem] - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\r\n     * @example DateTime.now().plus({ days: 1 }).toRelative() //=> \"in 1 day\"\r\n     * @example DateTime.now().setLocale(\"es\").toRelative({ days: 1 }) //=> \"dentro de 1 día\"\r\n     * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: \"fr\" }) //=> \"dans 23 heures\"\r\n     * @example DateTime.now().minus({ days: 2 }).toRelative() //=> \"2 days ago\"\r\n     * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: \"hours\" }) //=> \"48 hours ago\"\r\n     * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> \"1.5 days ago\"\r\n     */\r\n    toRelative(options = {}) {\r\n        const base = options.base || DateTime.fromObject({}, { zone: this.zone });\r\n        const padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;\r\n        return DateTime._diffRelative(base, this.plus({ milliseconds: padding }), Object.assign(options, {\r\n            numeric: \"always\",\r\n            units: [\r\n                \"years\",\r\n                \"months\",\r\n                \"days\",\r\n                \"hours\",\r\n                \"minutes\",\r\n                \"seconds\"\r\n            ],\r\n            calendary: false\r\n        }));\r\n    }\r\n    /**\r\n     * Returns a string representation of this date relative to today, such as \"yesterday\" or \"next month\".\r\n     * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.\r\n     * @param {Object} options - options that affect the output\r\n     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\r\n     * @param {string} [options.locale] - override the locale of this DateTime\r\n     * @param {string} [options.unit] - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", or \"days\"\r\n     * @param {string} [options.numberingSystem] - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\r\n     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> \"tomorrow\"\r\n     * @example DateTime.now().setLocale(\"es\").plus({ days: 1 }).toRelative() //=> \"\"mañana\"\r\n     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: \"fr\" }) //=> \"demain\"\r\n     * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> \"2 days ago\"\r\n     */\r\n    toRelativeCalendar(options = {}) {\r\n        return DateTime._diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, Object.assign(options, {\r\n            numeric: \"auto\",\r\n            units: [\"years\", \"months\", \"days\"],\r\n            calendary: true\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    // * *************************** *//\r\n    // Static private helper methods //\r\n    // * *************************** *//\r\n    // we cache week data on the DT object and this intermediates the cache\r\n    _possiblyCachedWeekData() {\r\n        if (this._weekData === undefined) {\r\n            this._weekData = gregorianToWeek(this._c);\r\n        }\r\n        return this._weekData;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    // clone really means, \"make a new object with these modifications\". all \"setters\" really use this\r\n    // to create a new object while only changing some of the properties\r\n    _clone(alts) {\r\n        const current = {\r\n            ts: this._ts,\r\n            zone: this.zone,\r\n            c: this._c,\r\n            o: this._o,\r\n            loc: this._loc\r\n        };\r\n        return new DateTime(Object.assign({}, current, alts, { old: current }));\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    // create a new DT instance by adding a duration, adjusting for DSTs\r\n    _adjustTime(dur) {\r\n        const previousOffset = this._o, year = this._c.year + Math.trunc(dur.years), month = this._c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c = Object.assign({}, this._c, {\r\n            year,\r\n            month,\r\n            day: Math.min(this._c.day, daysInMonth(year, month)) +\r\n                Math.trunc(dur.days) +\r\n                Math.trunc(dur.weeks) * 7\r\n        }), millisToAdd = Duration.fromObject({\r\n            years: dur.years - Math.trunc(dur.years),\r\n            quarters: dur.quarters - Math.trunc(dur.quarters),\r\n            months: dur.months - Math.trunc(dur.months),\r\n            weeks: dur.weeks - Math.trunc(dur.weeks),\r\n            days: dur.days - Math.trunc(dur.days),\r\n            hours: dur.hours,\r\n            minutes: dur.minutes,\r\n            seconds: dur.seconds,\r\n            milliseconds: dur.milliseconds\r\n        }).as(\"milliseconds\"), localTS = objToLocalTS(c);\r\n        let [ts, o] = fixOffset(localTS, previousOffset, this.zone);\r\n        if (millisToAdd !== 0) {\r\n            ts += millisToAdd;\r\n            // that could have changed the offset by going over a DST, but we want to keep the ts the same\r\n            o = this.zone.offset(ts);\r\n        }\r\n        return { ts, o };\r\n    }\r\n}\r\n// FORMAT PRESETS\r\n/**\r\n * {@link DateTime#toLocaleString} format like 10/14/1983\r\n * @type {Object}\r\n */\r\nDateTime.DATE_SHORT = Formats.DATE_SHORT;\r\n/**\r\n * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'\r\n * @type {Object}\r\n */\r\nDateTime.DATE_MED = Formats.DATE_MED;\r\n/**\r\n * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'\r\n * @type {Object}\r\n */\r\nDateTime.DATE_MED_WITH_WEEKDAY = Formats.DATE_MED_WITH_WEEKDAY;\r\n/**\r\n * {@link DateTime#toLocaleString} format like 'October 14, 1983'\r\n * @type {Object}\r\n */\r\nDateTime.DATE_FULL = Formats.DATE_FULL;\r\n/**\r\n * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'\r\n * @type {Object}\r\n */\r\nDateTime.DATE_HUGE = Formats.DATE_HUGE;\r\n/**\r\n * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.TIME_SIMPLE = Formats.TIME_SIMPLE;\r\n/**\r\n * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.TIME_WITH_SECONDS = Formats.TIME_WITH_SECONDS;\r\n/**\r\n * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.TIME_WITH_SHORT_OFFSET = Formats.TIME_WITH_SHORT_OFFSET;\r\n/**\r\n * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.TIME_WITH_LONG_OFFSET = Formats.TIME_WITH_LONG_OFFSET;\r\n/**\r\n * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.\r\n * @type {Object}\r\n */\r\nDateTime.TIME_24_SIMPLE = Formats.TIME_24_SIMPLE;\r\n/**\r\n * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.\r\n * @type {Object}\r\n */\r\nDateTime.TIME_24_WITH_SECONDS = Formats.TIME_24_WITH_SECONDS;\r\n/**\r\n * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.\r\n * @type {Object}\r\n */\r\nDateTime.TIME_24_WITH_SHORT_OFFSET = Formats.TIME_24_WITH_SHORT_OFFSET;\r\n/**\r\n * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\r\n * @type {Object}\r\n */\r\nDateTime.TIME_24_WITH_LONG_OFFSET = Formats.TIME_24_WITH_LONG_OFFSET;\r\n/**\r\n * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.DATETIME_SHORT = Formats.DATETIME_SHORT;\r\n/**\r\n * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.DATETIME_SHORT_WITH_SECONDS = Formats.DATETIME_SHORT_WITH_SECONDS;\r\n/**\r\n * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.DATETIME_MED = Formats.DATETIME_MED;\r\n/**\r\n * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.DATETIME_MED_WITH_SECONDS = Formats.DATETIME_MED_WITH_SECONDS;\r\n/**\r\n * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.DATETIME_MED_WITH_WEEKDAY = Formats.DATETIME_MED_WITH_WEEKDAY;\r\n/**\r\n * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.DATETIME_FULL = Formats.DATETIME_FULL;\r\n/**\r\n * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.DATETIME_FULL_WITH_SECONDS = Formats.DATETIME_FULL_WITH_SECONDS;\r\n/**\r\n * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.DATETIME_HUGE = Formats.DATETIME_HUGE;\r\n/**\r\n * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\r\n * @type {Object}\r\n */\r\nDateTime.DATETIME_HUGE_WITH_SECONDS = Formats.DATETIME_HUGE_WITH_SECONDS;\r\n//# sourceMappingURL=datetime.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/datetime.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "MAX_DATE",
    "memberof": "transpiled/datetime.js",
    "static": true,
    "longname": "transpiled/datetime.js~MAX_DATE",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "fixOffset",
    "memberof": "transpiled/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~fixOffset",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "localTS",
        "types": [
          "*"
        ]
      },
      {
        "name": "o",
        "types": [
          "*"
        ]
      },
      {
        "name": "tz",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "tsToObj",
    "memberof": "transpiled/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~tsToObj",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"hour\": *, \"minute\": *, \"second\": *, \"millisecond\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "objToTS",
    "memberof": "transpiled/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~objToTS",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "types": [
          "*"
        ]
      },
      {
        "name": "zone",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "parseDataToDateTime",
    "memberof": "transpiled/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~parseDataToDateTime",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "parsed",
        "types": [
          "*"
        ]
      },
      {
        "name": "parsedZone",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      },
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "toTechFormat",
    "memberof": "transpiled/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~toTechFormat",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      },
      {
        "name": "allowZ",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "toTechTimeFormat",
    "memberof": "transpiled/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~toTechTimeFormat",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"includeOffset\": *, \"suppressSeconds\": *, \"suppressMilliseconds\": *, \"includeZone\": *, \"spaceZone\": *, \"format\": *}"
        ],
        "defaultRaw": {
          "includeOffset": null,
          "suppressSeconds": null,
          "suppressMilliseconds": null,
          "includeZone": null,
          "spaceZone": null,
          "format": null
        },
        "defaultValue": "{\"includeOffset\":null,\"suppressSeconds\":null,\"suppressMilliseconds\":null,\"includeZone\":null,\"spaceZone\":null,\"format\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "defaultUnitValues",
    "memberof": "transpiled/datetime.js",
    "static": true,
    "longname": "transpiled/datetime.js~defaultUnitValues",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": number, \"day\": number, \"hour\": *, \"minute\": *, \"second\": *, \"millisecond\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "orderedUnits",
    "memberof": "transpiled/datetime.js",
    "static": true,
    "longname": "transpiled/datetime.js~orderedUnits",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "normalizeUnit",
    "memberof": "transpiled/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~normalizeUnit",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "unit",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "lastOpts",
    "memberof": "transpiled/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~lastOpts",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [
      {
        "name": "argList",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "DateTime",
    "memberof": "transpiled/datetime.js",
    "static": true,
    "longname": "transpiled/datetime.js~DateTime",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/datetime.js",
    "importStyle": "{DateTime}",
    "description": "A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n\nA DateTime comprises of:\n* A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n* A time zone. Each instance is considered in the context of a specific zone (by default the system's time zone).\n* Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n\nHere is a brief overview of the most commonly used functionality it provides:\n\n* **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.\n* **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},\n{@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.\n* **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.\n* **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.\n* **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime#plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toSystemZone}.\n* **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.\n\nThere's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.",
    "lineNumber": 214,
    "interface": false
  },
  {
    "__docId__": 61,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 218,
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_ts",
    "memberof": "transpiled/datetime.js~DateTime",
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#_ts",
    "access": "private",
    "description": "",
    "lineNumber": 230,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_c",
    "memberof": "transpiled/datetime.js~DateTime",
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#_c",
    "access": "private",
    "description": "",
    "lineNumber": 246,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "_o",
    "memberof": "transpiled/datetime.js~DateTime",
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#_o",
    "access": "private",
    "description": "",
    "lineNumber": 250,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_zone",
    "memberof": "transpiled/datetime.js~DateTime",
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#_zone",
    "access": "private",
    "description": "",
    "lineNumber": 254,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_loc",
    "memberof": "transpiled/datetime.js~DateTime",
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#_loc",
    "access": "private",
    "description": "",
    "lineNumber": 258,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "_weekData",
    "memberof": "transpiled/datetime.js~DateTime",
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#_weekData",
    "access": "private",
    "description": "",
    "lineNumber": 262,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_isLuxonDateTime",
    "memberof": "transpiled/datetime.js~DateTime",
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#_isLuxonDateTime",
    "access": "private",
    "description": "",
    "lineNumber": 266,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "get",
    "name": "locale",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#locale",
    "access": "public",
    "description": "Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime",
    "lineNumber": 273,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "get",
    "name": "numberingSystem",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#numberingSystem",
    "access": "public",
    "description": "Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime",
    "lineNumber": 281,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "get",
    "name": "outputCalendar",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#outputCalendar",
    "access": "public",
    "description": "Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime",
    "lineNumber": 289,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "get",
    "name": "zone",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#zone",
    "access": "public",
    "description": "Get the time zone associated with this DateTime.",
    "lineNumber": 296,
    "type": {
      "nullable": null,
      "types": [
        "Zone"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "get",
    "name": "zoneName",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#zoneName",
    "access": "public",
    "description": "Get the name of the time zone.",
    "lineNumber": 303,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "get",
    "name": "year",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#year",
    "access": "public",
    "description": "Get the year",
    "examples": [
      "DateTime.local(2017, 5, 25).year //=> 2017"
    ],
    "lineNumber": 311,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "get",
    "name": "quarter",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#quarter",
    "access": "public",
    "description": "Get the quarter",
    "examples": [
      "DateTime.local(2017, 5, 25).quarter //=> 2"
    ],
    "lineNumber": 319,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "get",
    "name": "month",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#month",
    "access": "public",
    "description": "Get the month (1-12).",
    "examples": [
      "DateTime.local(2017, 5, 25).month //=> 5"
    ],
    "lineNumber": 327,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "get",
    "name": "day",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#day",
    "access": "public",
    "description": "Get the day of the month (1-30ish).",
    "examples": [
      "DateTime.local(2017, 5, 25).day //=> 25"
    ],
    "lineNumber": 335,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "get",
    "name": "hour",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#hour",
    "access": "public",
    "description": "Get the hour of the day (0-23).",
    "examples": [
      "DateTime.local(2017, 5, 25, 9).hour //=> 9"
    ],
    "lineNumber": 343,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "get",
    "name": "minute",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#minute",
    "access": "public",
    "description": "Get the minute of the hour (0-59).",
    "examples": [
      "DateTime.local(2017, 5, 25, 9, 30).minute //=> 30"
    ],
    "lineNumber": 351,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 80,
    "kind": "get",
    "name": "second",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#second",
    "access": "public",
    "description": "Get the second of the minute (0-59).",
    "examples": [
      "DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52"
    ],
    "lineNumber": 359,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "get",
    "name": "millisecond",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#millisecond",
    "access": "public",
    "description": "Get the millisecond of the second (0-999).",
    "examples": [
      "DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654"
    ],
    "lineNumber": 367,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "get",
    "name": "weekYear",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#weekYear",
    "access": "public",
    "description": "Get the week year",
    "examples": [
      "DateTime.local(2014, 11, 31).weekYear //=> 2015"
    ],
    "see": [
      "https://en.wikipedia.org/wiki/ISO_week_date"
    ],
    "lineNumber": 376,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "get",
    "name": "weekNumber",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#weekNumber",
    "access": "public",
    "description": "Get the week number of the week year (1-52ish).",
    "examples": [
      "DateTime.local(2017, 5, 25).weekNumber //=> 21"
    ],
    "see": [
      "https://en.wikipedia.org/wiki/ISO_week_date"
    ],
    "lineNumber": 385,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "get",
    "name": "weekday",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#weekday",
    "access": "public",
    "description": "Get the day of the week.\n1 is Monday and 7 is Sunday",
    "examples": [
      "DateTime.local(2014, 11, 31).weekday //=> 4"
    ],
    "see": [
      "https://en.wikipedia.org/wiki/ISO_week_date"
    ],
    "lineNumber": 395,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "get",
    "name": "ordinal",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#ordinal",
    "access": "public",
    "description": "Get the ordinal (meaning the day of the year)",
    "examples": [
      "DateTime.local(2017, 5, 25).ordinal //=> 145"
    ],
    "lineNumber": 403,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "get",
    "name": "monthShort",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#monthShort",
    "access": "public",
    "description": "Get the human readable short month name, such as 'Oct'.\nDefaults to the system's locale if no locale has been specified",
    "examples": [
      "DateTime.local(2017, 10, 30).monthShort //=> Oct"
    ],
    "lineNumber": 412,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "get",
    "name": "monthLong",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#monthLong",
    "access": "public",
    "description": "Get the human readable long month name, such as 'October'.\nDefaults to the system's locale if no locale has been specified",
    "examples": [
      "DateTime.local(2017, 10, 30).monthLong //=> October"
    ],
    "lineNumber": 421,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "get",
    "name": "weekdayShort",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#weekdayShort",
    "access": "public",
    "description": "Get the human readable short weekday, such as 'Mon'.\nDefaults to the system's locale if no locale has been specified",
    "examples": [
      "DateTime.local(2017, 10, 30).weekdayShort //=> Mon"
    ],
    "lineNumber": 430,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "get",
    "name": "weekdayLong",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#weekdayLong",
    "access": "public",
    "description": "Get the human readable long weekday, such as 'Monday'.\nDefaults to the system's locale if no locale has been specified",
    "examples": [
      "DateTime.local(2017, 10, 30).weekdayLong //=> Monday"
    ],
    "lineNumber": 439,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "get",
    "name": "offset",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#offset",
    "access": "public",
    "description": "Get the UTC offset of this DateTime in minutes",
    "examples": [
      "DateTime.now().offset //=> -240",
      "DateTime.utc().offset //=> 0"
    ],
    "lineNumber": 448,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 91,
    "kind": "get",
    "name": "offsetNameShort",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#offsetNameShort",
    "access": "public",
    "description": "Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\nDefaults to the system's locale if no locale has been specified",
    "lineNumber": 456,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "get",
    "name": "offsetNameLong",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#offsetNameLong",
    "access": "public",
    "description": "Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\nDefaults to the system's locale if no locale has been specified",
    "lineNumber": 467,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "get",
    "name": "isOffsetFixed",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#isOffsetFixed",
    "access": "public",
    "description": "Get whether this zone's offset ever changes, as in a DST.",
    "lineNumber": 477,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "get",
    "name": "isInDST",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#isInDST",
    "access": "public",
    "description": "Get whether the DateTime is in a DST.",
    "lineNumber": 484,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "get",
    "name": "isInLeapYear",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#isInLeapYear",
    "access": "public",
    "description": "Returns true if this DateTime is in a leap year, false otherwise",
    "examples": [
      "DateTime.local(2016).isInLeapYear //=> true",
      "DateTime.local(2013).isInLeapYear //=> false"
    ],
    "lineNumber": 493,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "get",
    "name": "daysInMonth",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#daysInMonth",
    "access": "public",
    "description": "Returns the number of days in this DateTime's month",
    "examples": [
      "DateTime.local(2016, 2).daysInMonth //=> 29",
      "DateTime.local(2016, 3).daysInMonth //=> 31"
    ],
    "lineNumber": 502,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "get",
    "name": "daysInYear",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#daysInYear",
    "access": "public",
    "description": "Returns the number of days in this DateTime's year",
    "examples": [
      "DateTime.local(2016).daysInYear //=> 366",
      "DateTime.local(2013).daysInYear //=> 365"
    ],
    "lineNumber": 511,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "get",
    "name": "weeksInWeekYear",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#weeksInWeekYear",
    "access": "public",
    "description": "Returns the number of weeks in this DateTime's year",
    "examples": [
      "DateTime.local(2004).weeksInWeekYear //=> 53",
      "DateTime.local(2013).weeksInWeekYear //=> 52"
    ],
    "see": [
      "https://en.wikipedia.org/wiki/ISO_week_date"
    ],
    "lineNumber": 521,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "now",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.now",
    "access": "public",
    "description": "Create a DateTime for the current instant, in the system's time zone.\n\nUse Settings to override these default values if needed.",
    "examples": [
      "DateTime.now().toISO() //~> now in the ISO format"
    ],
    "lineNumber": 532,
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "local",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.local",
    "access": "public",
    "description": "Create a local DateTime",
    "examples": [
      "DateTime.local()                                  //~> now",
      "DateTime.local({ zone: \"America/New_York\" })      //~> now, in US east coast time",
      "DateTime.local(2017)                              //~> 2017-01-01T00:00:00",
      "DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00",
      "DateTime.local(2017, 3, 12, { locale: \"fr\")       //~> 2017-03-12T00:00:00, with a French locale",
      "DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00",
      "DateTime.local(2017, 3, 12, 5, { zone: \"utc\" })   //~> 2017-03-12T05:00:00, in UTC",
      "DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00",
      "DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10",
      "DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765"
    ],
    "lineNumber": 562,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "year",
        "description": "The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "month",
        "description": "The month, 1-indexed"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "day",
        "description": "The day of the month, 1-indexed"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "hour",
        "description": "The hour of the day, in 24-hour time"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "minute",
        "description": "The minute of the hour, meaning a number between 0 and 59"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "second",
        "description": "The second of the minute, meaning a number between 0 and 59"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "millisecond",
        "description": "The millisecond of the second, meaning a number between 0 and 999"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "configuration options for the DateTime"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Zone"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "options.zone",
        "description": "the zone to place the DateTime into"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on failed parsing instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "utc",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.utc",
    "access": "public",
    "description": "Create a DateTime in UTC",
    "examples": [
      "DateTime.utc()                                            //~> now",
      "DateTime.utc(2017)                                        //~> 2017-01-01T00:00:00Z",
      "DateTime.utc(2017, 3)                                     //~> 2017-03-01T00:00:00Z",
      "DateTime.utc(2017, 3, 12)                                 //~> 2017-03-12T00:00:00Z",
      "DateTime.utc(2017, 3, 12, 5)                              //~> 2017-03-12T05:00:00Z",
      "DateTime.utc(2017, 3, 12, 5, 45)                          //~> 2017-03-12T05:45:00Z",
      "DateTime.utc(2017, 3, 12, 5, 45, { locale: \"fr\" } )       //~> 2017-03-12T05:45:00Z with a French locale",
      "DateTime.utc(2017, 3, 12, 5, 45, 10)                      //~> 2017-03-12T05:45:10Z"
    ],
    "lineNumber": 590,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "year",
        "description": "The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "month",
        "description": "The month, 1-indexed"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "day",
        "description": "The day of the month"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "hour",
        "description": "The hour of the day, in 24-hour time"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "minute",
        "description": "The minute of the hour, meaning a number between 0 and 59"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "second",
        "description": "The second of the minute, meaning a number between 0 and 59"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "millisecond",
        "description": "The millisecond of the second, meaning a number between 0 and 999"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "configuration options for the DateTime"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on failed parsing instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "fromJSDate",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.fromJSDate",
    "access": "public",
    "description": "Create a DateTime from a Javascript Date object. Uses the default zone.",
    "lineNumber": 606,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "a Javascript Date object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "configuration options for the DateTime"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Zone"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "options.zone",
        "description": "the zone to place the DateTime into"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "return null on invalid values instead of throwing an error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "fromMillis",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.fromMillis",
    "access": "public",
    "description": "Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.",
    "lineNumber": 630,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "milliseconds",
        "description": "a number of milliseconds since 1970 UTC"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "configuration options for the DateTime"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Zone"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "options.zone",
        "description": "the zone to place the DateTime into"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "return null on invalid values instead of throwing an error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "fromSeconds",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.fromSeconds",
    "access": "public",
    "description": "Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.",
    "lineNumber": 661,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seconds",
        "description": "a number of seconds since 1970 UTC"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "configuration options for the DateTime"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Zone"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "options.zone",
        "description": "the zone to place the DateTime into"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "return null on invalid values instead of throwing an error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "fromObject",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.fromObject",
    "access": "public",
    "description": "Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.",
    "examples": [
      "DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'",
      "DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'",
      "DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06",
      "DateTime.fromObject({ hour: 10, minute: 26, second: 6, }, {zone: 'utc' }),",
      "DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'default' })",
      "DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })",
      "DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'"
    ],
    "lineNumber": 703,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "the object to create the DateTime from"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.year",
        "description": "a year, such as 1987"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.month",
        "description": "a month, 1-12"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.day",
        "description": "a day of the month, 1-31, depending on the month"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.ordinal",
        "description": "day of the year, 1-365 or 366"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.weekYear",
        "description": "an ISO week year"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.weekNumber",
        "description": "an ISO week number, between 1 and 52 or 53, depending on the year"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.weekday",
        "description": "an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.hour",
        "description": "hour of the day, 0-23"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.minute",
        "description": "minute of the hour, 0-59"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.second",
        "description": "second of the minute, 0-59"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.millisecond",
        "description": "millisecond of the second, 0-999"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "configuration options for the DateTime"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Zone"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "options.zone",
        "description": "interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'system's locale'",
        "defaultRaw": "'system's locale'",
        "name": "options.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "return null on invalid values instead of throwing an error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "fromISO",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.fromISO",
    "access": "public",
    "description": "Create a DateTime from an ISO 8601 string",
    "examples": [
      "DateTime.fromISO('2016-05-25T09:08:34.123')",
      "DateTime.fromISO('2016-05-25T09:08:34.123+06:00')",
      "DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})",
      "DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})",
      "DateTime.fromISO('2016-W05-4')"
    ],
    "lineNumber": 804,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the ISO string"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options to affect the creation"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Zone"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "options.zone",
        "description": "use this zone if no offset is specified in the input string itself. Will also convert the time to this zone"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.setZone",
        "description": "override the zone with a fixed-offset zone specified in the string itself, if it specifies one"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'system's locale'",
        "defaultRaw": "'system's locale'",
        "name": "options.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "return null on invalid strings instead of throwing an error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "fromRFC2822",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.fromRFC2822",
    "access": "public",
    "description": "Create a DateTime from an RFC 2822 string",
    "examples": [
      "DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')",
      "DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')",
      "DateTime.fromRFC2822('25 Nov 2016 13:23 Z')"
    ],
    "lineNumber": 823,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the RFC 2822 string"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options to affect the creation"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Zone"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "options.zone",
        "description": "convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.setZone",
        "description": "override the zone with a fixed-offset zone specified in the string itself, if it specifies one"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'system's locale'",
        "defaultRaw": "'system's locale'",
        "name": "options.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on failed parsing instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "fromHTTP",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.fromHTTP",
    "access": "public",
    "description": "Create a DateTime from an HTTP header date",
    "examples": [
      "DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')",
      "DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')",
      "DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')"
    ],
    "see": [
      "https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1"
    ],
    "lineNumber": 843,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the HTTP header date"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options to affect the creation"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Zone"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "options.zone",
        "description": "convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.setZone",
        "description": "override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'system's locale'",
        "defaultRaw": "'system's locale'",
        "name": "options.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on failed parsing instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "fromFormat",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.fromFormat",
    "access": "public",
    "description": "Create a DateTime from an input string and format string.\nDefaults to en-US if no locale has been specified, regardless of the system's locale.",
    "see": [
      "https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens"
    ],
    "lineNumber": 862,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the string to parse"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "the format the string is expected to be in (see the link below for the formats)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options to affect the creation"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Zone"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "options.zone",
        "description": "use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.setZone",
        "description": "override the zone with a zone specified in the string itself, if it specifies one"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "options.locale",
        "description": "a locale string to use when parsing. Will also set the DateTime to this locale"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on failed parsing instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "fromSQL",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.fromSQL",
    "access": "public",
    "description": "Create a DateTime from a SQL date, time, or datetime\nDefaults to en-US if no locale has been specified, regardless of the system's locale",
    "examples": [
      "DateTime.fromSQL('2017-05-15')",
      "DateTime.fromSQL('2017-05-15 09:12:34')",
      "DateTime.fromSQL('2017-05-15 09:12:34.342')",
      "DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')",
      "DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')",
      "DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })",
      "DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })",
      "DateTime.fromSQL('09:12:34.342')"
    ],
    "lineNumber": 902,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the string to parse"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options to affect the creation"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Zone"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "options.zone",
        "description": "use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.setZone",
        "description": "override the zone with a zone specified in the string itself, if it specifies one"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "options.locale",
        "description": "a locale string to use when parsing. Will also set the DateTime to this locale"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on failed parsing instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "isDateTime",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.isDateTime",
    "access": "public",
    "description": "Check if an object is a DateTime. Works across context boundaries",
    "lineNumber": 911,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "min",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.min",
    "access": "public",
    "description": "Return the min of several date times",
    "lineNumber": 919,
    "params": [
      {
        "nullable": null,
        "types": [
          "...DateTime"
        ],
        "spread": true,
        "optional": false,
        "name": "dateTimes",
        "description": "the DateTimes from which to choose the minimum"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": "the min DateTime, or undefined if called with no arguments"
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "max",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.max",
    "access": "public",
    "description": "Return the max of several date times",
    "lineNumber": 933,
    "params": [
      {
        "nullable": null,
        "types": [
          "...DateTime"
        ],
        "spread": true,
        "optional": false,
        "name": "dateTimes",
        "description": "the DateTimes from which to choose the maximum"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": "the max DateTime, or undefined if called with no arguments"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "fromFormatExplain",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime.fromFormatExplain",
    "access": "public",
    "description": "Explain how a string would be parsed by fromFormat()",
    "lineNumber": 950,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the string to parse"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "the format the string is expected to be in (see description)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options taken by fromFormat()"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "_quickDT",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime._quickDT",
    "access": "private",
    "description": "",
    "lineNumber": 960,
    "ignore": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "_normalizeWithDefaults",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime._normalizeWithDefaults",
    "access": "private",
    "description": "",
    "lineNumber": 988,
    "ignore": true,
    "params": [
      {
        "name": "objNow",
        "types": [
          "*"
        ]
      },
      {
        "name": "normalized",
        "types": [
          "*"
        ]
      },
      {
        "name": "units",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultValues",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "_diffRelative",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/datetime.js~DateTime._diffRelative",
    "access": "private",
    "description": "",
    "lineNumber": 1007,
    "ignore": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "get",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#get",
    "access": "public",
    "description": "Get the value of unit.",
    "examples": [
      "DateTime.local(2017, 7, 4).get('month'); //=> 7",
      "DateTime.local(2017, 7, 4).get('day'); //=> 4"
    ],
    "lineNumber": 1051,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "a unit such as 'minute' or 'day'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "resolvedLocaleOptions",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#resolvedLocaleOptions",
    "access": "public",
    "description": "Returns the resolved Intl options for this DateTime.\nThis is useful in understanding the behavior of formatting methods",
    "lineNumber": 1059,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "toUTC",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toUTC",
    "access": "public",
    "description": "\"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n\nEquivalent to {@link DateTime#setZone}('utc')",
    "lineNumber": 1074,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "offset",
        "description": "optionally, an offset from UTC in minutes"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "options to pass to `setZone()`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "toSystemZone",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toSystemZone",
    "access": "public",
    "description": "\"Set\" the DateTime's zone to the system's time zone. Returns a newly-constructed DateTime.\nThe system time zone is the one set on the machine where this code gets executed.\n\nEquivalent to `setZone(\"system\")`",
    "lineNumber": 1084,
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "toDefaultZone",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toDefaultZone",
    "access": "public",
    "description": "\"Set\" the DateTime's zone to the default zone. Returns a newly-constructed DateTime.\nThe default time zone is used when creating new DateTimes, unless otherwise specified.\nIt defaults to the system's time zone, but can be overriden in `Settings`.\n\nEquivalent to `setZone(\"default\")`",
    "lineNumber": 1095,
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "setZone",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#setZone",
    "access": "public",
    "description": "\"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n\nBy default, the setter keeps the underlying instant the same (as in, the same timestamp), but the new instance will report different local time and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toSystemZone} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.",
    "lineNumber": 1107,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Zone"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "zone",
        "description": "a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'default', 'system' or 'utc'. You may also supply an instance of a {@link Zone} class."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.keepLocalTime",
        "description": "If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "reconfigure",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#reconfigure",
    "access": "public",
    "description": "\"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.",
    "examples": [
      "DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })"
    ],
    "lineNumber": 1134,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "the options to set"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": ";"
      },
      {
        "nullable": null,
        "types": [
          "CalendarSystem"
        ],
        "spread": false,
        "optional": true,
        "name": "options.outputCalendar",
        "description": ";"
      },
      {
        "nullable": null,
        "types": [
          "NumberingSystem"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": ";"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "setLocale",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#setLocale",
    "access": "public",
    "description": "\"Set\" the locale. Returns a newly-constructed DateTime.\nJust a convenient alias for reconfigure({ locale })",
    "examples": [
      "DateTime.local(2017, 5, 25).setLocale('en-GB')"
    ],
    "lineNumber": 1144,
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "locale",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "set",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#set",
    "access": "public",
    "description": "\"Set\" the values of specified units. Returns a newly-constructed DateTime.\nYou can only set units with this method; for \"setting\" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.",
    "examples": [
      "dt.set({ year: 2017 })",
      "dt.set({ hour: 8, minute: 30 })",
      "dt.set({ weekday: 5 })",
      "dt.set({ year: 2005, ordinal: 234 })"
    ],
    "lineNumber": 1157,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "a mapping of units to numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "plus",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#plus",
    "access": "public",
    "description": "Add a period of time to this DateTime and return the resulting DateTime\n\nAdding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.",
    "examples": [
      "DateTime.now().plus(123) //~> in 123 milliseconds",
      "DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes",
      "DateTime.now().plus({ days: 1 }) //~> this time tomorrow",
      "DateTime.now().plus({ days: -1 }) //~> this time yesterday",
      "DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min",
      "DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min"
    ],
    "lineNumber": 1192,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The amount to add. Either a Luxon Duration or the object argument to Duration.fromObject()"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "minus",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#minus",
    "access": "public",
    "description": "Subtract a period of time to this DateTime and return the resulting DateTime\nSee {@link DateTime#plus}",
    "lineNumber": 1202,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The amount to subtract. Either a Luxon Duration or the object argument to Duration.fromObject()"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "startOf",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#startOf",
    "access": "public",
    "description": "\"Set\" this DateTime to the beginning of a unit of time.",
    "examples": [
      "DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'",
      "DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'",
      "DateTime.local(2014, 3, 3, 5, 30).startOf('week').toISOTime(); //=> '2014-03-03', weeks always start on a Monday",
      "DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'",
      "DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'"
    ],
    "lineNumber": 1216,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "endOf",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#endOf",
    "access": "public",
    "description": "\"Set\" this DateTime to the end (meaning the last millisecond) of a unit of time",
    "examples": [
      "DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'",
      "DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'",
      "DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'",
      "DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'"
    ],
    "lineNumber": 1261,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "toFormat",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toFormat",
    "access": "public",
    "description": "Returns a string representation of this DateTime formatted according to the specified format string.\n**You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).\nDefaults to en-US if no locale has been specified, regardless of the system's locale.",
    "examples": [
      "DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'",
      "DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'",
      "DateTime.now().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'",
      "DateTime.now().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'"
    ],
    "see": [
      "https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens"
    ],
    "lineNumber": 1280,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "the format string"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "overriden configuration options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "toLocaleString",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toLocaleString",
    "access": "public",
    "description": "Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\nThe exact behavior of this method is browser-specific, but in general it will return an appropriate representation\nof the DateTime in the assigned locale.",
    "examples": [
      "DateTime.now().toLocaleString(); //=> 4/20/2017",
      "DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'",
      "DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'",
      "DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'",
      "DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'",
      "DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'",
      "DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'",
      "DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hour12: false }); //=> '21:32'"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"
    ],
    "lineNumber": 1299,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{Object} - Intl.DateTimeFormat constructor options and configuration options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "toLocaleParts",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toLocaleParts",
    "access": "public",
    "description": "Returns an array of format \"parts\", meaning individual tokens along with metadata. This allows callers to post-process individual sections of the formatted output.\nDefaults to the system's locale if no locale has been specified",
    "examples": [
      "DateTime.now().toLocaleParts(); //=> [\n                                  //=>   { type: 'day', value: '25' },\n                                  //=>   { type: 'literal', value: '/' },\n                                  //=>   { type: 'month', value: '05' },\n                                  //=>   { type: 'literal', value: '/' },\n                                  //=>   { type: 'year', value: '1982' }\n                                  //=> ]"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts"
    ],
    "lineNumber": 1315,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "toISO",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toISO",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this DateTime",
    "examples": [
      "DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'",
      "DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'",
      "DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'",
      "DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'"
    ],
    "lineNumber": 1331,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.suppressMilliseconds",
        "description": "exclude milliseconds from the format if they're 0"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.suppressSeconds",
        "description": "exclude seconds from the format if they're 0"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.includeOffset",
        "description": "include the offset, such as 'Z' or '-04:00'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'extended'",
        "defaultRaw": "'extended'",
        "name": "options.format",
        "description": "choose between the basic and extended format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "toISODate",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toISODate",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this DateTime's date component",
    "examples": [
      "DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'",
      "DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'"
    ],
    "lineNumber": 1342,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'extended'",
        "defaultRaw": "'extended'",
        "name": "options.format",
        "description": "choose between the basic and extended format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "toISOWeekDate",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toISOWeekDate",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this DateTime's week date",
    "examples": [
      "DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'"
    ],
    "lineNumber": 1354,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "toISOTime",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toISOTime",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this DateTime's time component",
    "examples": [
      "DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'",
      "DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'",
      "DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'"
    ],
    "lineNumber": 1369,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.suppressMilliseconds",
        "description": "exclude milliseconds from the format if they're 0"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.suppressSeconds",
        "description": "exclude seconds from the format if they're 0"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.includeOffset",
        "description": "include the offset, such as 'Z' or '-04:00'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'extended'",
        "defaultRaw": "'extended'",
        "name": "options.format",
        "description": "choose between the basic and extended format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "toRFC2822",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toRFC2822",
    "access": "public",
    "description": "Returns an RFC 2822-compatible string representation of this DateTime, always in UTC",
    "examples": [
      "DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'",
      "DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'"
    ],
    "lineNumber": 1383,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "toHTTP",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toHTTP",
    "access": "public",
    "description": "Returns a string representation of this DateTime appropriate for use in HTTP headers.\nSpecifically, the string conforms to RFC 1123.",
    "examples": [
      "DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'",
      "DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'"
    ],
    "see": [
      "https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1"
    ],
    "lineNumber": 1394,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "toSQLDate",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toSQLDate",
    "access": "public",
    "description": "Returns a string representation of this DateTime appropriate for use in SQL Date",
    "examples": [
      "DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'"
    ],
    "lineNumber": 1402,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "toSQLTime",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toSQLTime",
    "access": "public",
    "description": "Returns a string representation of this DateTime appropriate for use in SQL Time",
    "examples": [
      "DateTime.utc().toSQL() //=> '05:15:16.345'",
      "DateTime.now().toSQL() //=> '05:15:16.345 -04:00'",
      "DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'",
      "DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'"
    ],
    "lineNumber": 1416,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.includeZone",
        "description": "include the zone, such as 'America/New_York'. Overrides includeOffset."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.includeOffset",
        "description": "include the offset, such as 'Z' or '-04:00'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "toSQL",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toSQL",
    "access": "public",
    "description": "Returns a string representation of this DateTime appropriate for use in SQL DateTime",
    "examples": [
      "DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'",
      "DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'",
      "DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'",
      "DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'"
    ],
    "lineNumber": 1434,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.includeZone",
        "description": "include the zone, such as 'America/New_York'. Overrides includeOffset."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.includeOffset",
        "description": "include the offset, such as 'Z' or '-04:00'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "toString",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toString",
    "access": "public",
    "description": "Returns a string representation of this DateTime appropriate for debugging",
    "lineNumber": 1441,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "valueOf",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#valueOf",
    "access": "public",
    "description": "Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}",
    "lineNumber": 1448,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "toMillis",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toMillis",
    "access": "public",
    "description": "Returns the epoch milliseconds of this DateTime.",
    "lineNumber": 1455,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "toSeconds",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toSeconds",
    "access": "public",
    "description": "Returns the epoch seconds of this DateTime.",
    "lineNumber": 1462,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "toJSON",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toJSON",
    "access": "public",
    "description": "Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.",
    "lineNumber": 1469,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "toBSON",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toBSON",
    "access": "public",
    "description": "Returns a BSON serializable equivalent to this DateTime.",
    "lineNumber": 1476,
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "toObject",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toObject",
    "access": "public",
    "description": "Returns a Javascript object with this DateTime's year, month, day, and so on.",
    "examples": [
      "DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }"
    ],
    "lineNumber": 1484,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "toJSDate",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toJSDate",
    "access": "public",
    "description": "Returns a Javascript Date equivalent to this DateTime.",
    "lineNumber": 1491,
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "diff",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#diff",
    "access": "public",
    "description": "Return the difference between two DateTimes as a Duration.",
    "examples": [
      "var i1 = DateTime.fromISO('1982-05-25T09:45'),\n    i2 = DateTime.fromISO('1983-10-14T10:30');\ni2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\ni2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\ni2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\ni2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }"
    ],
    "lineNumber": 1512,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateTime"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the DateTime to compare this one to"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "['milliseconds']",
        "defaultRaw": "['milliseconds']",
        "name": "unit",
        "description": "the unit or array of units (such as 'hours' or 'days') to include in the duration."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options that affect the creation of the Duration"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "locale()",
        "defaultRaw": "locale()",
        "name": "options.locale",
        "description": "the locale to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "numberingSystem()",
        "defaultRaw": "numberingSystem()",
        "name": "options.numberingSystem",
        "description": "the numbering system to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "options.conversionAccuracy",
        "description": "the conversion system to use"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on error instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "diffNow",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#diffNow",
    "access": "public",
    "description": "Return the difference between this DateTime and right now.\nSee {@link DateTime#diff}",
    "lineNumber": 1541,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "['milliseconds']",
        "defaultRaw": "['milliseconds']",
        "name": "unit",
        "description": "the unit or units units (such as 'hours' or 'days') to include in the duration"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options that affect the creation of the Duration"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "locale()",
        "defaultRaw": "locale()",
        "name": "options.locale",
        "description": "the locale to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "numberingSystem()",
        "defaultRaw": "numberingSystem()",
        "name": "options.numberingSystem",
        "description": "the numbering system to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "options.conversionAccuracy",
        "description": "the conversion system to use"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on error instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "until",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#until",
    "access": "public",
    "description": "Return an Interval spanning between this DateTime and another DateTime",
    "lineNumber": 1549,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateTime"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other end point of the Interval"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interval"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "hasSame",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#hasSame",
    "access": "public",
    "description": "Return whether this DateTime is in the same unit of time as another DateTime",
    "examples": [
      "DateTime.now().hasSame(otherDT, 'day'); //~> true if both have the same calendar day"
    ],
    "lineNumber": 1559,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateTime"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other DateTime"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "the unit of time to check sameness on"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "equals",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#equals",
    "access": "public",
    "description": "Equality check\nTwo DateTimes are equal iff they represent the same millisecond and have the same zone and location.\nTo compare just the millisecond values, use `+dt1 === +dt2`.",
    "lineNumber": 1576,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateTime"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other DateTime"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "toRelative",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toRelative",
    "access": "public",
    "description": "Returns a string representation of a this time relative to now, such as \"in two days\". Can only internationalize if your\nplatform supports Intl.RelativeTimeFormat. Rounds down by default.",
    "examples": [
      "DateTime.now().plus({ days: 1 }).toRelative() //=> \"in 1 day\"",
      "DateTime.now().setLocale(\"es\").toRelative({ days: 1 }) //=> \"dentro de 1 día\"",
      "DateTime.now().plus({ days: 1 }).toRelative({ locale: \"fr\" }) //=> \"dans 23 heures\"",
      "DateTime.now().minus({ days: 2 }).toRelative() //=> \"2 days ago\"",
      "DateTime.now().minus({ days: 2 }).toRelative({ unit: \"hours\" }) //=> \"48 hours ago\"",
      "DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> \"1.5 days ago\""
    ],
    "lineNumber": 1599,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options that affect the output"
      },
      {
        "nullable": null,
        "types": [
          "DateTime"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "DateTime.now()",
        "defaultRaw": "DateTime.now()",
        "name": "options.base",
        "description": "the DateTime to use as the basis to which this time is compared. Defaults to now."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"long\"",
        "defaultRaw": "long",
        "name": "options.style",
        "description": "the style of units, must be \"long\", \"short\", or \"narrow\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.unit",
        "description": "use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", or \"seconds\""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.round",
        "description": "whether to round the numbers in the output."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "options.padding",
        "description": "padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "override the locale of this DateTime"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "override the numberingSystem of this DateTime. The Intl system may choose not to honor this"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "toRelativeCalendar",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#toRelativeCalendar",
    "access": "public",
    "description": "Returns a string representation of this date relative to today, such as \"yesterday\" or \"next month\".\nOnly internationalizes on platforms that supports Intl.RelativeTimeFormat.",
    "examples": [
      "DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> \"tomorrow\"",
      "DateTime.now().setLocale(\"es\").plus({ days: 1 }).toRelative() //=> \"\"mañana\"",
      "DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: \"fr\" }) //=> \"demain\"",
      "DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> \"2 days ago\""
    ],
    "lineNumber": 1628,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options that affect the output"
      },
      {
        "nullable": null,
        "types": [
          "DateTime"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "DateTime.now()",
        "defaultRaw": "DateTime.now()",
        "name": "options.base",
        "description": "the DateTime to use as the basis to which this time is compared. Defaults to now."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "override the locale of this DateTime"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.unit",
        "description": "use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", or \"days\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "override the numberingSystem of this DateTime. The Intl system may choose not to honor this"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "_possiblyCachedWeekData",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#_possiblyCachedWeekData",
    "access": "private",
    "description": "",
    "lineNumber": 1642,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "_clone",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#_clone",
    "access": "private",
    "description": "",
    "lineNumber": 1653,
    "ignore": true,
    "params": [
      {
        "name": "alts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "_adjustTime",
    "memberof": "transpiled/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/datetime.js~DateTime#_adjustTime",
    "access": "private",
    "description": "",
    "lineNumber": 1667,
    "ignore": true,
    "params": [
      {
        "name": "dur",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"ts\": *, \"o\": *}"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "transpiled/duration.js",
    "content": "import { asNumber, isUndefined, isNumber, normalizeObject, roundTo } from \"./impl/util\";\r\nimport { Locale } from \"./impl/locale\";\r\nimport { Formatter } from \"./impl/formatter\";\r\nimport { parseISODuration } from \"./impl/regexParser\";\r\nimport { InvalidArgumentError, InvalidUnitError, UnparsableStringError } from \"./errors\";\r\n// unit conversion constants\r\nconst lowOrderMatrix = {\r\n    weeks: {\r\n        days: 7,\r\n        hours: 7 * 24,\r\n        minutes: 7 * 24 * 60,\r\n        seconds: 7 * 24 * 60 * 60,\r\n        milliseconds: 7 * 24 * 60 * 60 * 1000\r\n    },\r\n    days: {\r\n        hours: 24,\r\n        minutes: 24 * 60,\r\n        seconds: 24 * 60 * 60,\r\n        milliseconds: 24 * 60 * 60 * 1000\r\n    },\r\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\r\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\r\n    seconds: { milliseconds: 1000 }\r\n}, casualMatrix = Object.assign({\r\n    years: {\r\n        quarters: 4,\r\n        months: 12,\r\n        weeks: 52,\r\n        days: 365,\r\n        hours: 365 * 24,\r\n        minutes: 365 * 24 * 60,\r\n        seconds: 365 * 24 * 60 * 60,\r\n        milliseconds: 365 * 24 * 60 * 60 * 1000\r\n    },\r\n    quarters: {\r\n        months: 3,\r\n        weeks: 13,\r\n        days: 91,\r\n        hours: 91 * 24,\r\n        minutes: 91 * 24 * 60,\r\n        seconds: 91 * 24 * 60 * 60,\r\n        milliseconds: 91 * 24 * 60 * 60 * 1000\r\n    },\r\n    months: {\r\n        weeks: 4,\r\n        days: 30,\r\n        hours: 30 * 24,\r\n        minutes: 30 * 24 * 60,\r\n        seconds: 30 * 24 * 60 * 60,\r\n        milliseconds: 30 * 24 * 60 * 60 * 1000\r\n    }\r\n}, lowOrderMatrix), daysInYearAccurate = 146097.0 / 400, daysInMonthAccurate = 146097.0 / 4800, accurateMatrix = Object.assign({\r\n    years: {\r\n        quarters: 4,\r\n        months: 12,\r\n        weeks: daysInYearAccurate / 7,\r\n        days: daysInYearAccurate,\r\n        hours: daysInYearAccurate * 24,\r\n        minutes: daysInYearAccurate * 24 * 60,\r\n        seconds: daysInYearAccurate * 24 * 60 * 60,\r\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\r\n    },\r\n    quarters: {\r\n        months: 3,\r\n        weeks: daysInYearAccurate / 28,\r\n        days: daysInYearAccurate / 4,\r\n        hours: (daysInYearAccurate * 24) / 4,\r\n        minutes: (daysInYearAccurate * 24 * 60) / 4,\r\n        seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,\r\n        milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4\r\n    },\r\n    months: {\r\n        weeks: daysInMonthAccurate / 7,\r\n        days: daysInMonthAccurate,\r\n        hours: daysInMonthAccurate * 24,\r\n        minutes: daysInMonthAccurate * 24 * 60,\r\n        seconds: daysInMonthAccurate * 24 * 60 * 60,\r\n        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000\r\n    }\r\n}, lowOrderMatrix);\r\n// units ordered by size\r\nconst orderedUnits = [\r\n    \"years\",\r\n    \"quarters\",\r\n    \"months\",\r\n    \"weeks\",\r\n    \"days\",\r\n    \"hours\",\r\n    \"minutes\",\r\n    \"seconds\",\r\n    \"milliseconds\"\r\n];\r\nconst reverseUnits = orderedUnits.slice(0).reverse();\r\nfunction antiTrunc(n) {\r\n    return n < 0 ? Math.floor(n) : Math.ceil(n);\r\n}\r\n// NB: mutates parameters\r\nfunction convert(matrix, fromMap, fromUnit, toMap, toUnit) {\r\n    const conv = matrix[toUnit][fromUnit], raw = fromMap[fromUnit] / conv, sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]), \r\n    // ok, so this is wild, but see the matrix in the tests\r\n    added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);\r\n    toMap[toUnit] = toMap[toUnit] + added;\r\n    fromMap[fromUnit] = fromMap[fromUnit] - added * conv;\r\n}\r\n// NB: mutates vals parameters\r\nfunction normalizeValues(matrix, vals) {\r\n    let previousUnit;\r\n    reverseUnits.forEach(unit => {\r\n        if (!isUndefined(vals[unit])) {\r\n            if (previousUnit) {\r\n                convert(matrix, vals, previousUnit, vals, unit);\r\n            }\r\n            previousUnit = unit;\r\n        }\r\n    });\r\n}\r\n/**\r\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\r\n *\r\n * Here is a brief overview of commonly used methods and getters in Duration:\r\n *\r\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\r\n * * **Unit values** See the {@link Duration#years}, {@link Duration.months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.\r\n * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.\r\n * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.\r\n * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}\r\n *\r\n * There are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\r\n */\r\nexport class Duration {\r\n    /**\r\n     * @private\r\n     */\r\n    constructor(config) {\r\n        const accurate = config.conversionAccuracy === \"longterm\" || false;\r\n        /**\r\n         * @access private\r\n         */\r\n        this._values = config.values;\r\n        /**\r\n         * @access private\r\n         */\r\n        this._loc = config.loc || Locale.create();\r\n        /**\r\n         * @access private\r\n         */\r\n        this._matrix = accurate ? accurateMatrix : casualMatrix;\r\n        /**\r\n         * @access private\r\n         */\r\n        this._isLuxonDuration = true;\r\n    }\r\n    /**\r\n     * Create Duration from a number of milliseconds.\r\n     * @param {number} count of milliseconds\r\n     * @param {Object} options - options for parsing\r\n     * @param {string} [options.locale='en-US'] - the locale to use\r\n     * @param {string} [options.numberingSystem] - the numbering system to use\r\n     * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on error instead of throwing\r\n     * @return {Duration}\r\n     */\r\n    static fromMillis(count, options = {}) {\r\n        return Duration.fromObject({ milliseconds: count }, options);\r\n    }\r\n    /**\r\n     * Create a Duration from a Javascript object with keys like 'years' and 'hours.\r\n     * If this object is empty then a zero milliseconds duration is returned.\r\n     * @param {Object} obj - the object to create the Duration from\r\n     * @param {number} obj.years\r\n     * @param {number} obj.quarters\r\n     * @param {number} obj.months\r\n     * @param {number} obj.weeks\r\n     * @param {number} obj.days\r\n     * @param {number} obj.hours\r\n     * @param {number} obj.minutes\r\n     * @param {number} obj.seconds\r\n     * @param {number} obj.milliseconds\r\n     * @param {Object} options - options for parsing\r\n     * @param {string} [options.locale='en-US'] - the locale to use\r\n     * @param {string} [options.numberingSystem] - the numbering system to use\r\n     * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on error instead of throwing\r\n     * @return {Duration}\r\n     */\r\n    static fromObject(obj, options = {}) {\r\n        if (obj === undefined || obj === null || typeof obj !== \"object\") {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new InvalidArgumentError(`Duration.fromObject: argument expected to be an object, got ${obj === null ? \"null\" : typeof obj}`);\r\n        }\r\n        let values;\r\n        try {\r\n            values = normalizeObject(obj, Duration.normalizeUnit);\r\n        }\r\n        catch (error) {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw error;\r\n        }\r\n        return new Duration({\r\n            values,\r\n            loc: Locale.fromObject(options),\r\n            conversionAccuracy: options.conversionAccuracy\r\n        });\r\n    }\r\n    /**\r\n     * Create a Duration from an ISO 8601 duration string.\r\n     * @param {string} text - text to parse\r\n     * @param {Object} options - options for parsing\r\n     * @param {string} [options.locale='en-US'] - the locale to use\r\n     * @param {string} [options.numberingSystem] - the numbering system to use\r\n     * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\r\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\r\n     * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }\r\n     * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\r\n     * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\r\n     * @return {Duration}\r\n     */\r\n    static fromISO(text, options = {}) {\r\n        const parsed = parseISODuration(text);\r\n        if (parsed) {\r\n            return Duration.fromObject(parsed, options);\r\n        }\r\n        else {\r\n            if (options.nullOnInvalid) {\r\n                return null;\r\n            }\r\n            throw new UnparsableStringError(\"ISO 8601\", text);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static normalizeUnit(unit) {\r\n        // TODO should be private\r\n        const pluralMapping = {\r\n            year: \"years\",\r\n            years: \"years\",\r\n            quarter: \"quarters\",\r\n            quarters: \"quarters\",\r\n            month: \"months\",\r\n            months: \"months\",\r\n            week: \"weeks\",\r\n            weeks: \"weeks\",\r\n            day: \"days\",\r\n            days: \"days\",\r\n            hour: \"hours\",\r\n            hours: \"hours\",\r\n            minute: \"minutes\",\r\n            minutes: \"minutes\",\r\n            second: \"seconds\",\r\n            seconds: \"seconds\",\r\n            millisecond: \"milliseconds\",\r\n            milliseconds: \"milliseconds\"\r\n        };\r\n        const normalized = pluralMapping[(unit ? unit.toLowerCase() : unit)];\r\n        if (!normalized) {\r\n            throw new InvalidUnitError(unit);\r\n        }\r\n        return normalized;\r\n    }\r\n    /**\r\n     * Check if an object is a Duration. Works across context boundaries\r\n     * @param {Object} o\r\n     * @return {boolean}\r\n     */\r\n    static isDuration(o) {\r\n        return (o && o._isLuxonDuration) || false;\r\n    }\r\n    /**\r\n     * Get  the locale of a Duration, such 'en-GB'\r\n     * @type {string}\r\n     */\r\n    get locale() {\r\n        return this._loc.locale;\r\n    }\r\n    /**\r\n     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\r\n     *\r\n     * @type {NumberingSystem}\r\n     */\r\n    get numberingSystem() {\r\n        return this._loc.numberingSystem;\r\n    }\r\n    /**\r\n     * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\r\n     * * `S` for milliseconds\r\n     * * `s` for seconds\r\n     * * `m` for minutes\r\n     * * `h` for hours\r\n     * * `d` for days\r\n     * * `M` for months\r\n     * * `y` for years\r\n     * Notes:\r\n     * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\r\n     * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.\r\n     * @param {string} format - the format string\r\n     * @param {Object} options - options\r\n     * @param {boolean} [options.floor=true] - whether to floor numerical values or not\r\n     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\r\n     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\r\n     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\r\n     * @return {string}\r\n     */\r\n    toFormat(format, options = { floor: true }) {\r\n        return Formatter.create(this._loc, options).formatDurationFromString(this, format);\r\n    }\r\n    /**\r\n     * Returns a Javascript object with this Duration's values.\r\n     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\r\n     * @return {Object}\r\n     */\r\n    toObject() {\r\n        return Object.assign({}, this._values);\r\n    }\r\n    /**\r\n     * Returns an ISO 8601-compliant string representation of this Duration.\r\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\r\n     * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\r\n     * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\r\n     * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\r\n     * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\r\n     * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\r\n     * @return {string}\r\n     */\r\n    toISO() {\r\n        // we could use the formatter, but this is an easier way to get the minimum string\r\n        let s = \"P\";\r\n        if (this.years !== 0) {\r\n            s += this.years + \"Y\";\r\n        }\r\n        if (this.months !== 0 || this.quarters !== 0) {\r\n            s += this.months + this.quarters * 3 + \"M\";\r\n        }\r\n        if (this.weeks !== 0) {\r\n            s += this.weeks + \"W\";\r\n        }\r\n        if (this.days !== 0) {\r\n            s += this.days + \"D\";\r\n        }\r\n        if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) {\r\n            s += \"T\";\r\n        }\r\n        if (this.hours !== 0) {\r\n            s += this.hours + \"H\";\r\n        }\r\n        if (this.minutes !== 0) {\r\n            s += this.minutes + \"M\";\r\n        }\r\n        if (this.seconds !== 0 || this.milliseconds !== 0) {\r\n            // this will handle \"floating point madness\" by removing extra decimal places\r\n            // https://stackoverflow.com/questions/588004/is-floating-point-math-broken\r\n            s += roundTo(this.seconds + this.milliseconds / 1000, 3) + \"S\";\r\n        }\r\n        if (s === \"P\") {\r\n            s += \"T0S\";\r\n        }\r\n        return s;\r\n    }\r\n    /**\r\n     * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\r\n     * @return {string}\r\n     */\r\n    toJSON() {\r\n        return this.toISO();\r\n    }\r\n    /**\r\n     * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return this.toISO();\r\n    }\r\n    /**\r\n     * Returns an milliseconds value of this Duration.\r\n     * @return {number}\r\n     */\r\n    valueOf() {\r\n        return this.as(\"milliseconds\");\r\n    }\r\n    /**\r\n     * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\r\n     * @param {Duration|Object} duration - The amount to add. Either a Luxon Duration or the object argument to Duration.fromObject()\r\n     * @return {Duration}\r\n     */\r\n    plus(duration) {\r\n        const dur = friendlyDuration(duration), result = {};\r\n        orderedUnits.forEach(unit => {\r\n            if (dur._values[unit] !== undefined || this._values[unit] !== undefined) {\r\n                result[unit] = dur.get(unit) + this.get(unit);\r\n            }\r\n        });\r\n        return this._clone(result);\r\n    }\r\n    /**\r\n     * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\r\n     * @param {Duration|Object} duration - The amount to subtract. Either a Luxon Duration or the object argument to Duration.fromObject()\r\n     * @return {Duration}\r\n     */\r\n    minus(duration) {\r\n        const dur = friendlyDuration(duration);\r\n        return this.plus(dur.negate());\r\n    }\r\n    /**\r\n     * Scale this Duration by the specified amount. Return a newly-constructed Duration.\r\n     * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.\r\n     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }\r\n     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === \"hour\" ? x * 2 : x) //=> { hours: 2, minutes: 30 }\r\n     * @return {Duration}\r\n     */\r\n    mapUnits(fn) {\r\n        const result = {};\r\n        for (const k in this._values) {\r\n            const unit = k;\r\n            result[unit] = asNumber(fn(this._values[unit], unit));\r\n        }\r\n        return this._clone(result);\r\n    }\r\n    /**\r\n     * Get the value of unit.\r\n     * @param {string} unit - a unit such as 'minute' or 'day'\r\n     * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\r\n     * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\r\n     * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\r\n     * @return {number}\r\n     */\r\n    get(unit) {\r\n        return this[Duration.normalizeUnit(unit)];\r\n    }\r\n    /**\r\n     * \"Set\" the values of specified units. Non-specified units stay unchanged. Return a newly-constructed Duration.\r\n     * @param {Object} values - a mapping of units to numbers\r\n     * @example dur.set({ years: 2017 })\r\n     * @example dur.set({ hours: 8, minutes: 30 })\r\n     * @return {Duration}\r\n     */\r\n    set(values) {\r\n        const mixed = Object.assign(this._values, normalizeObject(values, Duration.normalizeUnit));\r\n        return this._clone(mixed, false /* do not clean, merge with existing */);\r\n    }\r\n    /**\r\n     * \"Set\" the locale and/or numberingSystem and/or conversionAccuracy. Returns a newly-constructed Duration.\r\n     * @example dur.reconfigure({ locale: 'en-GB' })\r\n     * @return {Duration}\r\n     */\r\n    reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\r\n        const conf = {\r\n            values: this._values,\r\n            loc: this._loc.clone({ locale, numberingSystem }),\r\n            conversionAccuracy: conversionAccuracy || this._conversionAccuracy()\r\n        };\r\n        return new Duration(conf);\r\n    }\r\n    /**\r\n     * Return the length of the duration in the specified unit.\r\n     * @param {string} unit - a unit such as 'minutes' or 'days'\r\n     * @example Duration.fromObject({years: 1}).as('days') //=> 365\r\n     * @example Duration.fromObject({years: 1}).as('months') //=> 12\r\n     * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\r\n     * @return {number}\r\n     */\r\n    as(unit) {\r\n        return this.shiftTo(unit).get(unit);\r\n    }\r\n    /**\r\n     * Reduce this Duration to its canonical representation in its current units.\r\n     * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\r\n     * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\r\n     * @return {Duration}\r\n     */\r\n    normalize() {\r\n        // todo - this should keep the options...\r\n        const vals = this.toObject();\r\n        normalizeValues(this._matrix, vals);\r\n        return this._clone(vals);\r\n    }\r\n    /**\r\n     * Convert this Duration into its representation in a different set of units.\r\n     * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\r\n     * @return {Duration}\r\n     */\r\n    shiftTo(...units) {\r\n        const normalizedUnits = units.map(u => Duration.normalizeUnit(u));\r\n        if (normalizedUnits.length === 0) {\r\n            return this;\r\n        }\r\n        const built = {}, accumulated = {}, vals = this.toObject();\r\n        let lastUnit;\r\n        orderedUnits.forEach((k) => {\r\n            if (normalizedUnits.indexOf(k) >= 0) {\r\n                lastUnit = k;\r\n                let own = 0;\r\n                // anything we haven't boiled down yet should get boiled to this unit\r\n                for (const acc in accumulated) {\r\n                    const unit = acc;\r\n                    own += this._matrix[unit][k] * accumulated[unit];\r\n                    delete accumulated[unit];\r\n                }\r\n                // plus anything that's already in this unit\r\n                const unitValue = vals[k];\r\n                if (isNumber(unitValue)) {\r\n                    own += unitValue;\r\n                }\r\n                const i = Math.trunc(own);\r\n                built[k] = i;\r\n                accumulated[k] = own - i; // we'd like to absorb these fractions in another unit\r\n                // plus anything further down the chain that should be rolled up in to this\r\n                for (const down in vals) {\r\n                    if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\r\n                        // never happens when k is milliseconds\r\n                        convert(this._matrix, vals, down, built, k);\r\n                    }\r\n                }\r\n                // otherwise, keep it in the wings to boil it later\r\n            }\r\n            else if (isNumber(vals[k])) {\r\n                accumulated[k] = vals[k];\r\n            }\r\n        });\r\n        // anything leftover becomes the decimal for the last unit\r\n        // lastUnit is defined here since units is not empty\r\n        for (const key in accumulated) {\r\n            const unit = key;\r\n            const acc = accumulated[unit];\r\n            if (acc !== undefined) {\r\n                // @ts-ignore\r\n                built[lastUnit] = built[lastUnit] +\r\n                    // @ts-ignore\r\n                    (key === lastUnit\r\n                        ? accumulated[key]\r\n                        : // lastUnit could be 'milliseconds' but so would then be the unique key in accumulated\r\n                            // Cast to ConversionMatrixUnit is hence safe here\r\n                            // @ts-ignore\r\n                            acc / this._matrix[lastUnit][unit]);\r\n            }\r\n        }\r\n        return this._clone(built).normalize();\r\n    }\r\n    /**\r\n     * Return the negative of this Duration.\r\n     * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\r\n     * @return {Duration}\r\n     */\r\n    negate() {\r\n        const negated = {};\r\n        for (const k in this._values) {\r\n            const unit = k;\r\n            negated[unit] = -this._values[unit];\r\n        }\r\n        return this._clone(negated);\r\n    }\r\n    /**\r\n     * Get the years.\r\n     * @type {number}\r\n     */\r\n    get years() {\r\n        return this._values.years || 0;\r\n    }\r\n    /**\r\n     * Get the quarters.\r\n     * @type {number}\r\n     */\r\n    get quarters() {\r\n        return this._values.quarters || 0;\r\n    }\r\n    /**\r\n     * Get the months.\r\n     * @type {number}\r\n     */\r\n    get months() {\r\n        return this._values.months || 0;\r\n    }\r\n    /**\r\n     * Get the weeks\r\n     * @type {number}\r\n     */\r\n    get weeks() {\r\n        return this._values.weeks || 0;\r\n    }\r\n    /**\r\n     * Get the days.\r\n     * @type {number}\r\n     */\r\n    get days() {\r\n        return this._values.days || 0;\r\n    }\r\n    /**\r\n     * Get the hours.\r\n     * @type {number}\r\n     */\r\n    get hours() {\r\n        return this._values.hours || 0;\r\n    }\r\n    /**\r\n     * Get the minutes.\r\n     * @type {number}\r\n     */\r\n    get minutes() {\r\n        return this._values.minutes || 0;\r\n    }\r\n    /**\r\n     * Get the seconds.\r\n     * @return {number}\r\n     */\r\n    get seconds() {\r\n        return this._values.seconds || 0;\r\n    }\r\n    /**\r\n     * Get the milliseconds.\r\n     * @return {number}\r\n     */\r\n    get milliseconds() {\r\n        return this._values.milliseconds || 0;\r\n    }\r\n    /**\r\n     * Equality check\r\n     * Two Durations are equal iff they have the same units and the same values for each unit.\r\n     * @param {Duration} other\r\n     * @return {boolean}\r\n     */\r\n    equals(other) {\r\n        if (!this._loc.equals(other._loc)) {\r\n            return false;\r\n        }\r\n        for (const u of orderedUnits) {\r\n            if (this._values[u] !== other._values[u]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    // clone really means \"create another instance just like this one, but with these changes\"\r\n    _clone(values, clear = true) {\r\n        // deep merge for vals\r\n        const conf = {\r\n            values: clear ? values : Object.assign({}, this._values, values),\r\n            loc: this._loc,\r\n            conversionAccuracy: this._conversionAccuracy()\r\n        };\r\n        return new Duration(conf);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _conversionAccuracy() {\r\n        return this._matrix === accurateMatrix ? \"longterm\" : \"casual\";\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport function friendlyDuration(duration) {\r\n    if (Duration.isDuration(duration)) {\r\n        return duration;\r\n    }\r\n    if (typeof duration === \"object\" && duration !== null) {\r\n        return Duration.fromObject(duration);\r\n    }\r\n    throw new InvalidArgumentError(`Unknown duration argument ${duration} of type ${typeof duration}`);\r\n}\r\n//# sourceMappingURL=duration.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/duration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "lowOrderMatrix",
    "memberof": "transpiled/duration.js",
    "static": true,
    "longname": "transpiled/duration.js~lowOrderMatrix",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"weeks\": *, \"days\": *, \"hours\": *, \"minutes\": *, \"seconds\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "orderedUnits",
    "memberof": "transpiled/duration.js",
    "static": true,
    "longname": "transpiled/duration.js~orderedUnits",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "reverseUnits",
    "memberof": "transpiled/duration.js",
    "static": true,
    "longname": "transpiled/duration.js~reverseUnits",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "antiTrunc",
    "memberof": "transpiled/duration.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/duration.js~antiTrunc",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "convert",
    "memberof": "transpiled/duration.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/duration.js~convert",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "matrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "fromMap",
        "types": [
          "*"
        ]
      },
      {
        "name": "fromUnit",
        "types": [
          "*"
        ]
      },
      {
        "name": "toMap",
        "types": [
          "*"
        ]
      },
      {
        "name": "toUnit",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "normalizeValues",
    "memberof": "transpiled/duration.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/duration.js~normalizeValues",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [
      {
        "name": "matrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "vals",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "class",
    "name": "Duration",
    "memberof": "transpiled/duration.js",
    "static": true,
    "longname": "transpiled/duration.js~Duration",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/duration.js",
    "importStyle": "{Duration}",
    "description": "A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n\nHere is a brief overview of commonly used methods and getters in Duration:\n\n* **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n* **Unit values** See the {@link Duration#years}, {@link Duration.months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.\n* **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.\n* **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.\n* **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}\n\nThere are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.",
    "lineNumber": 130,
    "interface": false
  },
  {
    "__docId__": 170,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 134,
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "_values",
    "memberof": "transpiled/duration.js~Duration",
    "static": false,
    "longname": "transpiled/duration.js~Duration#_values",
    "access": "private",
    "description": "",
    "lineNumber": 139,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "_loc",
    "memberof": "transpiled/duration.js~Duration",
    "static": false,
    "longname": "transpiled/duration.js~Duration#_loc",
    "access": "private",
    "description": "",
    "lineNumber": 143,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "_matrix",
    "memberof": "transpiled/duration.js~Duration",
    "static": false,
    "longname": "transpiled/duration.js~Duration#_matrix",
    "access": "private",
    "description": "",
    "lineNumber": 147,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "_isLuxonDuration",
    "memberof": "transpiled/duration.js~Duration",
    "static": false,
    "longname": "transpiled/duration.js~Duration#_isLuxonDuration",
    "access": "private",
    "description": "",
    "lineNumber": 151,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "fromMillis",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/duration.js~Duration.fromMillis",
    "access": "public",
    "description": "Create Duration from a number of milliseconds.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "of milliseconds"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options for parsing"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "options.locale",
        "description": "the locale to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "options.conversionAccuracy",
        "description": "the conversion system to use"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on error instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "fromObject",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/duration.js~Duration.fromObject",
    "access": "public",
    "description": "Create a Duration from a Javascript object with keys like 'years' and 'hours.\nIf this object is empty then a zero milliseconds duration is returned.",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the object to create the Duration from"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.years",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.quarters",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.months",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.weeks",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.days",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.hours",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.minutes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.seconds",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "obj.milliseconds",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options for parsing"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "options.locale",
        "description": "the locale to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "options.conversionAccuracy",
        "description": "the conversion system to use"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on error instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "fromISO",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/duration.js~Duration.fromISO",
    "access": "public",
    "description": "Create a Duration from an ISO 8601 duration string.",
    "examples": [
      "Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }",
      "Duration.fromISO('PT23H').toObject() //=> { hours: 23 }",
      "Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }"
    ],
    "see": [
      "https://en.wikipedia.org/wiki/ISO_8601#Durations"
    ],
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "text to parse"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options for parsing"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "options.locale",
        "description": "the locale to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "options.conversionAccuracy",
        "description": "the conversion system to use"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on failed parsing instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "normalizeUnit",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/duration.js~Duration.normalizeUnit",
    "access": "private",
    "description": "",
    "lineNumber": 238,
    "ignore": true,
    "params": [
      {
        "name": "unit",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "isDuration",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/duration.js~Duration.isDuration",
    "access": "public",
    "description": "Check if an object is a Duration. Works across context boundaries",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 180,
    "kind": "get",
    "name": "locale",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#locale",
    "access": "public",
    "description": "Get  the locale of a Duration, such 'en-GB'",
    "lineNumber": 278,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "get",
    "name": "numberingSystem",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#numberingSystem",
    "access": "public",
    "description": "Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration",
    "lineNumber": 286,
    "type": {
      "nullable": null,
      "types": [
        "NumberingSystem"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "toFormat",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#toFormat",
    "access": "public",
    "description": "Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n* `S` for milliseconds\n* `s` for seconds\n* `m` for minutes\n* `h` for hours\n* `d` for days\n* `M` for months\n* `y` for years\nNotes:\n* Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n* The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.",
    "examples": [
      "Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"",
      "Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"",
      "Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\""
    ],
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "the format string"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.floor",
        "description": "whether to floor numerical values or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "toObject",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#toObject",
    "access": "public",
    "description": "Returns a Javascript object with this Duration's values.",
    "examples": [
      "Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }"
    ],
    "lineNumber": 317,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "toISO",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#toISO",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this Duration.",
    "examples": [
      "Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'",
      "Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'",
      "Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'",
      "Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'",
      "Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'"
    ],
    "see": [
      "https://en.wikipedia.org/wiki/ISO_8601#Durations"
    ],
    "lineNumber": 330,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "toJSON",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#toJSON",
    "access": "public",
    "description": "Returns an ISO 8601 representation of this Duration appropriate for use in JSON.",
    "lineNumber": 368,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "toString",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#toString",
    "access": "public",
    "description": "Returns an ISO 8601 representation of this Duration appropriate for use in debugging.",
    "lineNumber": 375,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "valueOf",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#valueOf",
    "access": "public",
    "description": "Returns an milliseconds value of this Duration.",
    "lineNumber": 382,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "plus",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#plus",
    "access": "public",
    "description": "Make this Duration longer by the specified amount. Return a newly-constructed Duration.",
    "lineNumber": 390,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The amount to add. Either a Luxon Duration or the object argument to Duration.fromObject()"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "minus",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#minus",
    "access": "public",
    "description": "Make this Duration shorter by the specified amount. Return a newly-constructed Duration.",
    "lineNumber": 404,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The amount to subtract. Either a Luxon Duration or the object argument to Duration.fromObject()"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "mapUnits",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#mapUnits",
    "access": "public",
    "description": "Scale this Duration by the specified amount. Return a newly-constructed Duration.",
    "examples": [
      "Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }",
      "Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === \"hour\" ? x * 2 : x) //=> { hours: 2, minutes: 30 }"
    ],
    "lineNumber": 415,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "get",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#get",
    "access": "public",
    "description": "Get the value of unit.",
    "examples": [
      "Duration.fromObject({years: 2, days: 3}).years //=> 2",
      "Duration.fromObject({years: 2, days: 3}).months //=> 0",
      "Duration.fromObject({years: 2, days: 3}).days //=> 3"
    ],
    "lineNumber": 431,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "a unit such as 'minute' or 'day'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "set",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#set",
    "access": "public",
    "description": "\"Set\" the values of specified units. Non-specified units stay unchanged. Return a newly-constructed Duration.",
    "examples": [
      "dur.set({ years: 2017 })",
      "dur.set({ hours: 8, minutes: 30 })"
    ],
    "lineNumber": 441,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "a mapping of units to numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "reconfigure",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#reconfigure",
    "access": "public",
    "description": "\"Set\" the locale and/or numberingSystem and/or conversionAccuracy. Returns a newly-constructed Duration.",
    "examples": [
      "dur.reconfigure({ locale: 'en-GB' })"
    ],
    "lineNumber": 450,
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"locale\": *, \"numberingSystem\": *, \"conversionAccuracy\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "as",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#as",
    "access": "public",
    "description": "Return the length of the duration in the specified unit.",
    "examples": [
      "Duration.fromObject({years: 1}).as('days') //=> 365",
      "Duration.fromObject({years: 1}).as('months') //=> 12",
      "Duration.fromObject({hours: 60}).as('days') //=> 2.5"
    ],
    "lineNumber": 466,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "a unit such as 'minutes' or 'days'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "normalize",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#normalize",
    "access": "public",
    "description": "Reduce this Duration to its canonical representation in its current units.",
    "examples": [
      "Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }",
      "Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }"
    ],
    "lineNumber": 475,
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "shiftTo",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#shiftTo",
    "access": "public",
    "description": "Convert this Duration into its representation in a different set of units.",
    "examples": [
      "Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }"
    ],
    "lineNumber": 486,
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "units",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ]
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "negate",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#negate",
    "access": "public",
    "description": "Return the negative of this Duration.",
    "examples": [
      "Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }"
    ],
    "lineNumber": 548,
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 198,
    "kind": "get",
    "name": "years",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#years",
    "access": "public",
    "description": "Get the years.",
    "lineNumber": 560,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "get",
    "name": "quarters",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#quarters",
    "access": "public",
    "description": "Get the quarters.",
    "lineNumber": 567,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 200,
    "kind": "get",
    "name": "months",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#months",
    "access": "public",
    "description": "Get the months.",
    "lineNumber": 574,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 201,
    "kind": "get",
    "name": "weeks",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#weeks",
    "access": "public",
    "description": "Get the weeks",
    "lineNumber": 581,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "get",
    "name": "days",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#days",
    "access": "public",
    "description": "Get the days.",
    "lineNumber": 588,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 203,
    "kind": "get",
    "name": "hours",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#hours",
    "access": "public",
    "description": "Get the hours.",
    "lineNumber": 595,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 204,
    "kind": "get",
    "name": "minutes",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#minutes",
    "access": "public",
    "description": "Get the minutes.",
    "lineNumber": 602,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "get",
    "name": "seconds",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#seconds",
    "access": "public",
    "description": "Get the seconds.",
    "lineNumber": 609,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "get",
    "name": "milliseconds",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#milliseconds",
    "access": "public",
    "description": "Get the milliseconds.",
    "lineNumber": 616,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "equals",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#equals",
    "access": "public",
    "description": "Equality check\nTwo Durations are equal iff they have the same units and the same values for each unit.",
    "lineNumber": 625,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "_clone",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#_clone",
    "access": "private",
    "description": "",
    "lineNumber": 640,
    "ignore": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "clear",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "_conversionAccuracy",
    "memberof": "transpiled/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/duration.js~Duration#_conversionAccuracy",
    "access": "private",
    "description": "",
    "lineNumber": 652,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "friendlyDuration",
    "memberof": "transpiled/duration.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/duration.js~friendlyDuration",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/duration.js",
    "importStyle": "{friendlyDuration}",
    "description": "",
    "lineNumber": 659,
    "ignore": true,
    "params": [
      {
        "name": "duration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "transpiled/errors.js",
    "content": "// these aren't really private, but nor are they really useful to document\r\n/**\r\n * @private\r\n */\r\nclass LuxonError extends Error {\r\n}\r\n/**\r\n * @private\r\n */\r\nexport class UnitOutOfRangeError extends LuxonError {\r\n    constructor(unit, value) {\r\n        super(`you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`);\r\n        // See https://github.com/facebook/jest/issues/8279#issuecomment-539775425\r\n        Object.setPrototypeOf(this, UnitOutOfRangeError.prototype);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport class InvalidUnitError extends LuxonError {\r\n    constructor(unit) {\r\n        super(`Invalid unit ${unit}`);\r\n        Object.setPrototypeOf(this, InvalidUnitError.prototype);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport class InvalidZoneError extends LuxonError {\r\n    constructor(zoneName) {\r\n        super(`${zoneName} is an invalid or unknown zone specifier`);\r\n        Object.setPrototypeOf(this, InvalidZoneError.prototype);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport class MissingPlatformFeatureError extends LuxonError {\r\n    constructor(feature) {\r\n        super(`missing ${feature} support`);\r\n        Object.setPrototypeOf(this, MissingPlatformFeatureError.prototype);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport class MismatchedWeekdayError extends LuxonError {\r\n    constructor(weekday, date) {\r\n        super(`you can't specify both a weekday of ${weekday} and a date of ${date}`);\r\n        Object.setPrototypeOf(this, MismatchedWeekdayError.prototype);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport class UnparsableStringError extends LuxonError {\r\n    constructor(format, text) {\r\n        super(`can't parse ${text} into format ${format}`);\r\n        Object.setPrototypeOf(this, UnparsableStringError.prototype);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport class ConflictingSpecificationError extends LuxonError {\r\n    constructor(message) {\r\n        super(message);\r\n        Object.setPrototypeOf(this, ConflictingSpecificationError.prototype);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport class InvalidArgumentError extends LuxonError {\r\n    constructor(message) {\r\n        super(message);\r\n        Object.setPrototypeOf(this, InvalidArgumentError.prototype);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport class ZoneIsAbstractError extends LuxonError {\r\n    constructor() {\r\n        super(\"Zone is an abstract class\");\r\n        Object.setPrototypeOf(this, ZoneIsAbstractError.prototype);\r\n    }\r\n}\r\n//# sourceMappingURL=errors.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/errors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "class",
    "name": "LuxonError",
    "memberof": "transpiled/errors.js",
    "static": true,
    "longname": "transpiled/errors.js~LuxonError",
    "access": "private",
    "export": false,
    "importPath": "ts-luxon/transpiled/errors.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "UnitOutOfRangeError",
    "memberof": "transpiled/errors.js",
    "static": true,
    "longname": "transpiled/errors.js~UnitOutOfRangeError",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/errors.js",
    "importStyle": "{UnitOutOfRangeError}",
    "description": "",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "LuxonError"
    ],
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/errors.js~UnitOutOfRangeError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/errors.js~UnitOutOfRangeError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 215,
    "kind": "class",
    "name": "InvalidUnitError",
    "memberof": "transpiled/errors.js",
    "static": true,
    "longname": "transpiled/errors.js~InvalidUnitError",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/errors.js",
    "importStyle": "{InvalidUnitError}",
    "description": "",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "LuxonError"
    ],
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/errors.js~InvalidUnitError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/errors.js~InvalidUnitError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "InvalidZoneError",
    "memberof": "transpiled/errors.js",
    "static": true,
    "longname": "transpiled/errors.js~InvalidZoneError",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/errors.js",
    "importStyle": "{InvalidZoneError}",
    "description": "",
    "lineNumber": 29,
    "interface": false,
    "extends": [
      "LuxonError"
    ],
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/errors.js~InvalidZoneError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/errors.js~InvalidZoneError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 219,
    "kind": "class",
    "name": "MissingPlatformFeatureError",
    "memberof": "transpiled/errors.js",
    "static": true,
    "longname": "transpiled/errors.js~MissingPlatformFeatureError",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/errors.js",
    "importStyle": "{MissingPlatformFeatureError}",
    "description": "",
    "lineNumber": 38,
    "interface": false,
    "extends": [
      "LuxonError"
    ],
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/errors.js~MissingPlatformFeatureError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/errors.js~MissingPlatformFeatureError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 221,
    "kind": "class",
    "name": "MismatchedWeekdayError",
    "memberof": "transpiled/errors.js",
    "static": true,
    "longname": "transpiled/errors.js~MismatchedWeekdayError",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/errors.js",
    "importStyle": "{MismatchedWeekdayError}",
    "description": "",
    "lineNumber": 47,
    "interface": false,
    "extends": [
      "LuxonError"
    ],
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/errors.js~MismatchedWeekdayError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/errors.js~MismatchedWeekdayError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true
  },
  {
    "__docId__": 223,
    "kind": "class",
    "name": "UnparsableStringError",
    "memberof": "transpiled/errors.js",
    "static": true,
    "longname": "transpiled/errors.js~UnparsableStringError",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/errors.js",
    "importStyle": "{UnparsableStringError}",
    "description": "",
    "lineNumber": 56,
    "interface": false,
    "extends": [
      "LuxonError"
    ],
    "ignore": true
  },
  {
    "__docId__": 224,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/errors.js~UnparsableStringError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/errors.js~UnparsableStringError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true
  },
  {
    "__docId__": 225,
    "kind": "class",
    "name": "ConflictingSpecificationError",
    "memberof": "transpiled/errors.js",
    "static": true,
    "longname": "transpiled/errors.js~ConflictingSpecificationError",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/errors.js",
    "importStyle": "{ConflictingSpecificationError}",
    "description": "",
    "lineNumber": 65,
    "interface": false,
    "extends": [
      "LuxonError"
    ],
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/errors.js~ConflictingSpecificationError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/errors.js~ConflictingSpecificationError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true
  },
  {
    "__docId__": 227,
    "kind": "class",
    "name": "InvalidArgumentError",
    "memberof": "transpiled/errors.js",
    "static": true,
    "longname": "transpiled/errors.js~InvalidArgumentError",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/errors.js",
    "importStyle": "{InvalidArgumentError}",
    "description": "",
    "lineNumber": 74,
    "interface": false,
    "extends": [
      "LuxonError"
    ],
    "ignore": true
  },
  {
    "__docId__": 228,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/errors.js~InvalidArgumentError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/errors.js~InvalidArgumentError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true
  },
  {
    "__docId__": 229,
    "kind": "class",
    "name": "ZoneIsAbstractError",
    "memberof": "transpiled/errors.js",
    "static": true,
    "longname": "transpiled/errors.js~ZoneIsAbstractError",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/errors.js",
    "importStyle": "{ZoneIsAbstractError}",
    "description": "",
    "lineNumber": 83,
    "interface": false,
    "extends": [
      "LuxonError"
    ],
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/errors.js~ZoneIsAbstractError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/errors.js~ZoneIsAbstractError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "transpiled/impl/conversions.js",
    "content": "import { integerBetween, isLeapYear, timeObject, daysInYear, daysInMonth, weeksInWeekYear, isInteger } from \"./util\";\r\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\r\nfunction dayOfWeek(year, month, day) {\r\n    const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\r\n    return js === 0 ? 7 : js;\r\n}\r\nfunction computeOrdinal(year, month, day) {\r\n    return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\r\n}\r\nfunction uncomputeOrdinal(year, ordinal) {\r\n    const table = isLeapYear(year) ? leapLadder : nonLeapLadder, month0 = table.findIndex(i => i < ordinal), day = ordinal - table[month0];\r\n    return { month: month0 + 1, day };\r\n}\r\n/**\r\n * @private\r\n */\r\nexport function gregorianToWeek(gregObj) {\r\n    const { year, month, day } = gregObj, ordinal = computeOrdinal(year, month, day), weekday = dayOfWeek(year, month, day);\r\n    let weekNumber = Math.floor((ordinal - weekday + 10) / 7), weekYear;\r\n    if (weekNumber < 1) {\r\n        weekYear = year - 1;\r\n        weekNumber = weeksInWeekYear(weekYear);\r\n    }\r\n    else if (weekNumber > weeksInWeekYear(year)) {\r\n        weekYear = year + 1;\r\n        weekNumber = 1;\r\n    }\r\n    else {\r\n        weekYear = year;\r\n    }\r\n    return Object.assign({ weekYear, weekNumber, weekday }, timeObject(gregObj));\r\n}\r\nexport function weekToGregorian(weekData) {\r\n    const { weekYear, weekNumber, weekday } = weekData, weekdayOfJan4 = dayOfWeek(weekYear, 1, 4), yearInDays = daysInYear(weekYear);\r\n    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3, year;\r\n    if (ordinal < 1) {\r\n        year = weekYear - 1;\r\n        ordinal += daysInYear(year);\r\n    }\r\n    else if (ordinal > yearInDays) {\r\n        year = weekYear + 1;\r\n        ordinal -= daysInYear(weekYear);\r\n    }\r\n    else {\r\n        year = weekYear;\r\n    }\r\n    const { month, day } = uncomputeOrdinal(year, ordinal);\r\n    return Object.assign({ year, month, day }, timeObject(weekData));\r\n}\r\nexport function gregorianToOrdinal(gregData) {\r\n    const { year, month, day } = gregData, ordinal = computeOrdinal(year, month, day);\r\n    return Object.assign({ year, ordinal }, timeObject(gregData));\r\n}\r\nexport function ordinalToGregorian(ordinalData) {\r\n    const { year, ordinal } = ordinalData, { month, day } = uncomputeOrdinal(year, ordinal);\r\n    return Object.assign({ year, month, day }, timeObject(ordinalData));\r\n}\r\nexport function hasInvalidWeekData(obj) {\r\n    const validYear = isInteger(obj.weekYear), validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)), validWeekday = integerBetween(obj.weekday, 1, 7);\r\n    if (!validYear) {\r\n        return [\"weekYear\", obj.weekYear];\r\n    }\r\n    else if (!validWeek) {\r\n        return [\"weekNumber\", obj.weekNumber];\r\n    }\r\n    else if (!validWeekday) {\r\n        return [\"weekday\", obj.weekday];\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexport function hasInvalidOrdinalData(obj) {\r\n    const validYear = isInteger(obj.year), validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\r\n    if (!validYear) {\r\n        return [\"year\", obj.year];\r\n    }\r\n    else if (!validOrdinal) {\r\n        return [\"ordinal\", obj.ordinal];\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexport function hasInvalidGregorianData(obj) {\r\n    const validYear = isInteger(obj.year), validMonth = integerBetween(obj.month, 1, 12), validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\r\n    if (!validYear) {\r\n        return [\"year\", obj.year];\r\n    }\r\n    else if (!validMonth) {\r\n        return [\"month\", obj.month];\r\n    }\r\n    else if (!validDay) {\r\n        return [\"day\", obj.day];\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexport function hasInvalidTimeData(obj) {\r\n    const { hour, minute, second, millisecond } = obj;\r\n    const validHour = integerBetween(hour, 0, 23) ||\r\n        (hour === 24 && minute === 0 && second === 0 && millisecond === 0), validMinute = integerBetween(minute, 0, 59), validSecond = integerBetween(second, 0, 59), validMillisecond = integerBetween(millisecond, 0, 999);\r\n    if (!validHour) {\r\n        return [\"hour\", obj.hour];\r\n    }\r\n    else if (!validMinute) {\r\n        return [\"minute\", obj.minute];\r\n    }\r\n    else if (!validSecond) {\r\n        return [\"second\", obj.second];\r\n    }\r\n    else if (!validMillisecond) {\r\n        return [\"millisecond\", obj.millisecond];\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n//# sourceMappingURL=conversions.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/impl/conversions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "variable",
    "name": "nonLeapLadder",
    "memberof": "transpiled/impl/conversions.js",
    "static": true,
    "longname": "transpiled/impl/conversions.js~nonLeapLadder",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "dayOfWeek",
    "memberof": "transpiled/impl/conversions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/conversions.js~dayOfWeek",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "year",
        "types": [
          "*"
        ]
      },
      {
        "name": "month",
        "types": [
          "*"
        ]
      },
      {
        "name": "day",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 234,
    "kind": "function",
    "name": "computeOrdinal",
    "memberof": "transpiled/impl/conversions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/conversions.js~computeOrdinal",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "year",
        "types": [
          "*"
        ]
      },
      {
        "name": "month",
        "types": [
          "*"
        ]
      },
      {
        "name": "day",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "uncomputeOrdinal",
    "memberof": "transpiled/impl/conversions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/conversions.js~uncomputeOrdinal",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "year",
        "types": [
          "*"
        ]
      },
      {
        "name": "ordinal",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"month\": *, \"day\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "gregorianToWeek",
    "memberof": "transpiled/impl/conversions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/conversions.js~gregorianToWeek",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": "{gregorianToWeek}",
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "params": [
      {
        "name": "gregObj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "weekToGregorian",
    "memberof": "transpiled/impl/conversions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/conversions.js~weekToGregorian",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": "{weekToGregorian}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "weekData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "gregorianToOrdinal",
    "memberof": "transpiled/impl/conversions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/conversions.js~gregorianToOrdinal",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": "{gregorianToOrdinal}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "gregData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "ordinalToGregorian",
    "memberof": "transpiled/impl/conversions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/conversions.js~ordinalToGregorian",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": "{ordinalToGregorian}",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "ordinalData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "hasInvalidWeekData",
    "memberof": "transpiled/impl/conversions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/conversions.js~hasInvalidWeekData",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": "{hasInvalidWeekData}",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "hasInvalidOrdinalData",
    "memberof": "transpiled/impl/conversions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/conversions.js~hasInvalidOrdinalData",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": "{hasInvalidOrdinalData}",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "hasInvalidGregorianData",
    "memberof": "transpiled/impl/conversions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/conversions.js~hasInvalidGregorianData",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": "{hasInvalidGregorianData}",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "hasInvalidTimeData",
    "memberof": "transpiled/impl/conversions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/conversions.js~hasInvalidTimeData",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/conversions.js",
    "importStyle": "{hasInvalidTimeData}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "transpiled/impl/diff.js",
    "content": "import { Duration } from \"../duration\";\r\nfunction dayDiff(earlier, later) {\r\n    const utcDayStart = (dt) => dt\r\n        .toUTC(0, { keepLocalTime: true })\r\n        .startOf(\"days\")\r\n        .valueOf(), ms = utcDayStart(later) - utcDayStart(earlier);\r\n    return Math.floor(Duration.fromMillis(ms).as(\"days\"));\r\n}\r\nfunction highOrderDiffs(earlier, later, units) {\r\n    const differs = [\r\n        [\"years\", (a, b) => b.year - a.year],\r\n        [\"months\", (a, b) => b.month - a.month + (b.year - a.year) * 12],\r\n        [\r\n            \"weeks\",\r\n            (a, b) => {\r\n                const days = dayDiff(a, b);\r\n                return (days - (days % 7)) / 7;\r\n            }\r\n        ],\r\n        [\"days\", dayDiff]\r\n    ];\r\n    const results = {};\r\n    let lowestOrder, highWater = earlier, cursor = earlier.reconfigure({});\r\n    for (const [unit, differ] of differs) {\r\n        if (units.indexOf(unit) >= 0) {\r\n            lowestOrder = unit;\r\n            let delta = differ(cursor, later);\r\n            highWater = cursor.plus({ [unit]: delta });\r\n            if (highWater > later) {\r\n                cursor = cursor.plus({ [unit]: delta - 1 });\r\n                delta -= 1;\r\n            }\r\n            else {\r\n                cursor = highWater;\r\n            }\r\n            results[unit] = delta;\r\n        }\r\n    }\r\n    return [cursor, results, highWater, lowestOrder];\r\n}\r\nexport const diff = (earlier, later, units, options) => {\r\n    // tslint:disable-next-line:prefer-const\r\n    let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);\r\n    const remainingMillis = later.valueOf() - cursor.valueOf();\r\n    const lowerOrderUnits = units.filter(u => [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].indexOf(u) >= 0);\r\n    if (lowerOrderUnits.length === 0) {\r\n        // if there are no low order units, there is at least one high order unit\r\n        // and lowestOrder is hence defined\r\n        if (highWater < later) {\r\n            highWater = cursor.plus({ [lowestOrder]: 1 });\r\n        }\r\n        if (highWater !== cursor) {\r\n            results[lowestOrder] =\r\n                results[lowestOrder] +\r\n                    remainingMillis / (highWater.valueOf() - cursor.valueOf());\r\n        }\r\n    }\r\n    const duration = Duration.fromObject(results, options);\r\n    if (lowerOrderUnits.length > 0) {\r\n        return Duration.fromMillis(remainingMillis, options)\r\n            .shiftTo(...lowerOrderUnits)\r\n            .plus(duration);\r\n    }\r\n    else {\r\n        return duration;\r\n    }\r\n};\r\n//# sourceMappingURL=diff.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/impl/diff.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "dayDiff",
    "memberof": "transpiled/impl/diff.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/diff.js~dayDiff",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/diff.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "earlier",
        "types": [
          "*"
        ]
      },
      {
        "name": "later",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "highOrderDiffs",
    "memberof": "transpiled/impl/diff.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/diff.js~highOrderDiffs",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/diff.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "earlier",
        "types": [
          "*"
        ]
      },
      {
        "name": "later",
        "types": [
          "*"
        ]
      },
      {
        "name": "units",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "diff",
    "memberof": "transpiled/impl/diff.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/diff.js~diff",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/diff.js",
    "importStyle": "{diff}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "earlier",
        "types": [
          "*"
        ]
      },
      {
        "name": "later",
        "types": [
          "*"
        ]
      },
      {
        "name": "units",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "transpiled/impl/digits.js",
    "content": "const numberingSystems = {\r\n    arab: \"[\\u0660-\\u0669]\",\r\n    arabext: \"[\\u06F0-\\u06F9]\",\r\n    bali: \"[\\u1B50-\\u1B59]\",\r\n    beng: \"[\\u09E6-\\u09EF]\",\r\n    deva: \"[\\u0966-\\u096F]\",\r\n    fullwide: \"[\\uFF10-\\uFF19]\",\r\n    gujr: \"[\\u0AE6-\\u0AEF]\",\r\n    hanidec: \"[〇|一|二|三|四|五|六|七|八|九]\",\r\n    khmr: \"[\\u17E0-\\u17E9]\",\r\n    knda: \"[\\u0CE6-\\u0CEF]\",\r\n    laoo: \"[\\u0ED0-\\u0ED9]\",\r\n    limb: \"[\\u1946-\\u194F]\",\r\n    mlym: \"[\\u0D66-\\u0D6F]\",\r\n    mong: \"[\\u1810-\\u1819]\",\r\n    mymr: \"[\\u1040-\\u1049]\",\r\n    orya: \"[\\u0B66-\\u0B6F]\",\r\n    tamldec: \"[\\u0BE6-\\u0BEF]\",\r\n    telu: \"[\\u0C66-\\u0C6F]\",\r\n    thai: \"[\\u0E50-\\u0E59]\",\r\n    tibt: \"[\\u0F20-\\u0F29]\",\r\n    latn: \"\\\\d\"\r\n};\r\nconst numberingSystemsUTF16 = {\r\n    arab: [1632, 1641],\r\n    arabext: [1776, 1785],\r\n    bali: [6992, 7001],\r\n    beng: [2534, 2543],\r\n    deva: [2406, 2415],\r\n    fullwide: [65296, 65303],\r\n    gujr: [2790, 2799],\r\n    khmr: [6112, 6121],\r\n    knda: [3302, 3311],\r\n    laoo: [3792, 3801],\r\n    limb: [6470, 6479],\r\n    mlym: [3430, 3439],\r\n    mong: [6160, 6169],\r\n    mymr: [4160, 4169],\r\n    orya: [2918, 2927],\r\n    tamldec: [3046, 3055],\r\n    telu: [3174, 3183],\r\n    thai: [3664, 3673],\r\n    tibt: [3872, 3881],\r\n    latn: [48, 57],\r\n    hanidec: [-1, -1] // see special case for hanidec characters below\r\n};\r\n// eslint-disable-next-line no-useless-escape\r\nconst hanidecChars = numberingSystems.hanidec.replace(/[\\[|\\]]/g, \"\").split(\"\");\r\nexport function parseDigits(str) {\r\n    const intValue = parseInt(str, 10);\r\n    if (!isNaN(intValue)) {\r\n        return intValue;\r\n    }\r\n    let digits = \"\";\r\n    for (let i = 0; i < str.length; i++) {\r\n        const code = str.charCodeAt(i);\r\n        if (str[i].search(numberingSystems.hanidec) !== -1) {\r\n            digits += hanidecChars.indexOf(str[i]);\r\n        }\r\n        else {\r\n            for (const key in numberingSystemsUTF16) {\r\n                const [min, max] = numberingSystemsUTF16[key];\r\n                if (code >= min && code <= max) {\r\n                    digits += code - min;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return parseInt(digits, 10);\r\n}\r\nexport function digitRegex(locale, append = \"\") {\r\n    return new RegExp(`${numberingSystems[locale.numberingSystem || \"latn\"]}${append}`);\r\n}\r\n//# sourceMappingURL=digits.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/impl/digits.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "name": "numberingSystems",
    "memberof": "transpiled/impl/digits.js",
    "static": true,
    "longname": "transpiled/impl/digits.js~numberingSystems",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/digits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"arab\": string, \"arabext\": string, \"bali\": string, \"beng\": string, \"deva\": string, \"fullwide\": string, \"gujr\": string, \"hanidec\": string, \"khmr\": string, \"knda\": string, \"laoo\": string, \"limb\": string, \"mlym\": string, \"mong\": string, \"mymr\": string, \"orya\": string, \"tamldec\": string, \"telu\": string, \"thai\": string, \"tibt\": string, \"latn\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 250,
    "kind": "variable",
    "name": "numberingSystemsUTF16",
    "memberof": "transpiled/impl/digits.js",
    "static": true,
    "longname": "transpiled/impl/digits.js~numberingSystemsUTF16",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/digits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{\"arab\": *, \"arabext\": *, \"bali\": *, \"beng\": *, \"deva\": *, \"fullwide\": *, \"gujr\": *, \"khmr\": *, \"knda\": *, \"laoo\": *, \"limb\": *, \"mlym\": *, \"mong\": *, \"mymr\": *, \"orya\": *, \"tamldec\": *, \"telu\": *, \"thai\": *, \"tibt\": *, \"latn\": *, \"hanidec\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "hanidecChars",
    "memberof": "transpiled/impl/digits.js",
    "static": true,
    "longname": "transpiled/impl/digits.js~hanidecChars",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/digits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "parseDigits",
    "memberof": "transpiled/impl/digits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/digits.js~parseDigits",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/digits.js",
    "importStyle": "{parseDigits}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "digitRegex",
    "memberof": "transpiled/impl/digits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/digits.js~digitRegex",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/digits.js",
    "importStyle": "{digitRegex}",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "locale",
        "types": [
          "*"
        ]
      },
      {
        "name": "append",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "transpiled/impl/english.js",
    "content": "import * as Formats from \"./formats\";\r\nimport { pick } from \"./util\";\r\nimport { Duration } from \"../duration\";\r\nfunction stringify(obj) {\r\n    return JSON.stringify(obj, Object.keys(obj).sort());\r\n}\r\n/**\r\n * @private\r\n */\r\n// tslint:disable-next-line:naming-convention\r\nexport const monthsLong = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n];\r\n// tslint:disable-next-line:naming-convention\r\nexport const monthsShort = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\"\r\n];\r\n// tslint:disable-next-line:naming-convention\r\nexport const monthsNarrow = [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\r\nexport function months(length) {\r\n    switch (length) {\r\n        case \"narrow\":\r\n            return monthsNarrow;\r\n        case \"short\":\r\n            return monthsShort;\r\n        case \"long\":\r\n            return monthsLong;\r\n        case \"numeric\":\r\n            return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\r\n        case \"2-digit\":\r\n            return [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\r\n    }\r\n}\r\n// tslint:disable-next-line:naming-convention\r\nexport const weekdaysLong = [\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n    \"Sunday\"\r\n];\r\n// tslint:disable-next-line:naming-convention\r\nexport const weekdaysShort = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n// tslint:disable-next-line:naming-convention\r\nexport const weekdaysNarrow = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\r\nexport function weekdays(length) {\r\n    switch (length) {\r\n        case \"narrow\":\r\n            return weekdaysNarrow;\r\n        case \"short\":\r\n            return weekdaysShort;\r\n        case \"long\":\r\n            return weekdaysLong;\r\n    }\r\n}\r\n// tslint:disable-next-line:naming-convention\r\nexport const meridiems = [\"AM\", \"PM\"];\r\n// tslint:disable-next-line:naming-convention\r\nexport const erasLong = [\"Before Christ\", \"Anno Domini\"];\r\n// tslint:disable-next-line:naming-convention\r\nexport const erasShort = [\"BC\", \"AD\"];\r\n// tslint:disable-next-line:naming-convention\r\nexport const erasNarrow = [\"B\", \"A\"];\r\nexport function eras(length) {\r\n    switch (length) {\r\n        case \"narrow\":\r\n            return erasNarrow;\r\n        case \"short\":\r\n            return erasShort;\r\n        case \"long\":\r\n            return erasLong;\r\n    }\r\n}\r\nexport function meridiemForDateTime(dt) {\r\n    return meridiems[dt.hour < 12 ? 0 : 1];\r\n}\r\nexport function weekdayForDateTime(dt, length) {\r\n    return weekdays(length)[dt.weekday - 1];\r\n}\r\nexport function monthForDateTime(dt, length) {\r\n    return months(length)[dt.month - 1];\r\n}\r\nexport function eraForDateTime(dt, length) {\r\n    return eras(length)[dt.year < 0 ? 0 : 1];\r\n}\r\nexport function formatRelativeTime(unit, count, numeric = \"always\", narrow = false) {\r\n    const units = {\r\n        years: [\"year\", \"yr.\"],\r\n        quarters: [\"quarter\", \"qtr.\"],\r\n        months: [\"month\", \"mo.\"],\r\n        weeks: [\"week\", \"wk.\"],\r\n        days: [\"day\", \"day\", \"days\"],\r\n        hours: [\"hour\", \"hr.\"],\r\n        minutes: [\"minute\", \"min.\"],\r\n        seconds: [\"second\", \"sec.\"],\r\n        milliseconds: [] // never used\r\n    };\r\n    const normalizedUnit = Duration.normalizeUnit(unit), unitTexts = units[normalizedUnit], lastable = [\"hours\", \"minutes\", \"seconds\"].indexOf(normalizedUnit) === -1;\r\n    if (numeric === \"auto\" && lastable) {\r\n        const isDay = normalizedUnit === \"days\";\r\n        switch (count) {\r\n            case 1:\r\n                return isDay ? \"tomorrow\" : `next ${unitTexts[0]}`;\r\n            case -1:\r\n                return isDay ? \"yesterday\" : `last ${unitTexts[0]}`;\r\n            case 0:\r\n                return isDay ? \"today\" : `this ${unitTexts[0]}`;\r\n            default: // fall through\r\n        }\r\n    }\r\n    const isInPast = Object.is(count, -0) || count < 0, formatValue = Math.abs(count), singular = formatValue === 1, formatUnit = narrow\r\n        ? singular\r\n            ? unitTexts[1]\r\n            : unitTexts[2] || unitTexts[1]\r\n        : singular\r\n            ? unitTexts[0]\r\n            : normalizedUnit;\r\n    return isInPast ? `${formatValue} ${formatUnit} ago` : `in ${formatValue} ${formatUnit}`;\r\n}\r\nexport function formatString(knownFormat) {\r\n    // these all have the offsets removed because we don't have access to them\r\n    // without all the intl stuff this is backfilling\r\n    const filtered = pick(knownFormat, [\r\n        \"weekday\",\r\n        \"era\",\r\n        \"year\",\r\n        \"month\",\r\n        \"day\",\r\n        \"hour\",\r\n        \"minute\",\r\n        \"second\",\r\n        \"timeZoneName\",\r\n        \"hour12\"\r\n    ]), key = stringify(filtered), dateTimeHuge = \"EEEE, LLLL d, yyyy, h:mm a\";\r\n    switch (key) {\r\n        case stringify(Formats.DATE_SHORT):\r\n            return \"M/d/yyyy\";\r\n        case stringify(Formats.DATE_MED):\r\n            return \"LLL d, yyyy\";\r\n        case stringify(Formats.DATE_MED_WITH_WEEKDAY):\r\n            return \"EEE, LLL d, yyyy\";\r\n        case stringify(Formats.DATE_FULL):\r\n            return \"LLLL d, yyyy\";\r\n        case stringify(Formats.DATE_HUGE):\r\n            return \"EEEE, LLLL d, yyyy\";\r\n        case stringify(Formats.TIME_SIMPLE):\r\n            return \"h:mm a\";\r\n        case stringify(Formats.TIME_WITH_SECONDS):\r\n            return \"h:mm:ss a\";\r\n        case stringify(Formats.TIME_WITH_SHORT_OFFSET):\r\n            return \"h:mm a\";\r\n        case stringify(Formats.TIME_WITH_LONG_OFFSET):\r\n            return \"h:mm a\";\r\n        case stringify(Formats.TIME_24_SIMPLE):\r\n            return \"HH:mm\";\r\n        case stringify(Formats.TIME_24_WITH_SECONDS):\r\n            return \"HH:mm:ss\";\r\n        case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):\r\n            return \"HH:mm\";\r\n        case stringify(Formats.TIME_24_WITH_LONG_OFFSET):\r\n            return \"HH:mm\";\r\n        case stringify(Formats.DATETIME_SHORT):\r\n            return \"M/d/yyyy, h:mm a\";\r\n        case stringify(Formats.DATETIME_MED):\r\n            return \"LLL d, yyyy, h:mm a\";\r\n        case stringify(Formats.DATETIME_FULL):\r\n            return \"LLLL d, yyyy, h:mm a\";\r\n        case stringify(Formats.DATETIME_HUGE):\r\n            return dateTimeHuge;\r\n        case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):\r\n            return \"M/d/yyyy, h:mm:ss a\";\r\n        case stringify(Formats.DATETIME_MED_WITH_SECONDS):\r\n            return \"LLL d, yyyy, h:mm:ss a\";\r\n        case stringify(Formats.DATETIME_MED_WITH_WEEKDAY):\r\n            return \"EEE, d LLL yyyy, h:mm a\";\r\n        case stringify(Formats.DATETIME_FULL_WITH_SECONDS):\r\n            return \"LLLL d, yyyy, h:mm:ss a\";\r\n        case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):\r\n            return \"EEEE, LLLL d, yyyy, h:mm:ss a\";\r\n        default:\r\n            return dateTimeHuge;\r\n    }\r\n}\r\n//# sourceMappingURL=english.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/impl/english.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "stringify",
    "memberof": "transpiled/impl/english.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/english.js~stringify",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "variable",
    "name": "monthsLong",
    "memberof": "transpiled/impl/english.js",
    "static": true,
    "longname": "transpiled/impl/english.js~monthsLong",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{monthsLong}",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "name": "monthsShort",
    "memberof": "transpiled/impl/english.js",
    "static": true,
    "longname": "transpiled/impl/english.js~monthsShort",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{monthsShort}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "monthsNarrow",
    "memberof": "transpiled/impl/english.js",
    "static": true,
    "longname": "transpiled/impl/english.js~monthsNarrow",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{monthsNarrow}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "months",
    "memberof": "transpiled/impl/english.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/english.js~months",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{months}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "variable",
    "name": "weekdaysLong",
    "memberof": "transpiled/impl/english.js",
    "static": true,
    "longname": "transpiled/impl/english.js~weekdaysLong",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{weekdaysLong}",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "variable",
    "name": "weekdaysShort",
    "memberof": "transpiled/impl/english.js",
    "static": true,
    "longname": "transpiled/impl/english.js~weekdaysShort",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{weekdaysShort}",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "variable",
    "name": "weekdaysNarrow",
    "memberof": "transpiled/impl/english.js",
    "static": true,
    "longname": "transpiled/impl/english.js~weekdaysNarrow",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{weekdaysNarrow}",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "weekdays",
    "memberof": "transpiled/impl/english.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/english.js~weekdays",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{weekdays}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "variable",
    "name": "meridiems",
    "memberof": "transpiled/impl/english.js",
    "static": true,
    "longname": "transpiled/impl/english.js~meridiems",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{meridiems}",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "variable",
    "name": "erasLong",
    "memberof": "transpiled/impl/english.js",
    "static": true,
    "longname": "transpiled/impl/english.js~erasLong",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{erasLong}",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "variable",
    "name": "erasShort",
    "memberof": "transpiled/impl/english.js",
    "static": true,
    "longname": "transpiled/impl/english.js~erasShort",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{erasShort}",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "variable",
    "name": "erasNarrow",
    "memberof": "transpiled/impl/english.js",
    "static": true,
    "longname": "transpiled/impl/english.js~erasNarrow",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{erasNarrow}",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "eras",
    "memberof": "transpiled/impl/english.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/english.js~eras",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{eras}",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "meridiemForDateTime",
    "memberof": "transpiled/impl/english.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/english.js~meridiemForDateTime",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{meridiemForDateTime}",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "weekdayForDateTime",
    "memberof": "transpiled/impl/english.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/english.js~weekdayForDateTime",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{weekdayForDateTime}",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "function",
    "name": "monthForDateTime",
    "memberof": "transpiled/impl/english.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/english.js~monthForDateTime",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{monthForDateTime}",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "eraForDateTime",
    "memberof": "transpiled/impl/english.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/english.js~eraForDateTime",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{eraForDateTime}",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "function",
    "name": "formatRelativeTime",
    "memberof": "transpiled/impl/english.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/english.js~formatRelativeTime",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{formatRelativeTime}",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "unit",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "numeric",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "always",
        "defaultValue": "always"
      },
      {
        "name": "narrow",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "function",
    "name": "formatString",
    "memberof": "transpiled/impl/english.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/english.js~formatString",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/english.js",
    "importStyle": "{formatString}",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [
      {
        "name": "knownFormat",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "file",
    "name": "transpiled/impl/formats.js",
    "content": "/**\r\n * @private\r\n */\r\nconst n = \"numeric\", s = \"short\", l = \"long\";\r\nexport const DATE_SHORT = {\r\n    year: n,\r\n    month: n,\r\n    day: n\r\n};\r\nexport const DATE_MED = {\r\n    year: n,\r\n    month: s,\r\n    day: n\r\n};\r\nexport const DATE_MED_WITH_WEEKDAY = {\r\n    year: n,\r\n    month: s,\r\n    day: n,\r\n    weekday: s\r\n};\r\nexport const DATE_FULL = {\r\n    year: n,\r\n    month: l,\r\n    day: n\r\n};\r\nexport const DATE_HUGE = {\r\n    year: n,\r\n    month: l,\r\n    day: n,\r\n    weekday: l\r\n};\r\nexport const TIME_SIMPLE = {\r\n    hour: n,\r\n    minute: n\r\n};\r\nexport const TIME_WITH_SECONDS = {\r\n    hour: n,\r\n    minute: n,\r\n    second: n\r\n};\r\nexport const TIME_WITH_SHORT_OFFSET = {\r\n    hour: n,\r\n    minute: n,\r\n    second: n,\r\n    timeZoneName: s\r\n};\r\nexport const TIME_WITH_LONG_OFFSET = {\r\n    hour: n,\r\n    minute: n,\r\n    second: n,\r\n    timeZoneName: l\r\n};\r\nexport const TIME_24_SIMPLE = {\r\n    hour: n,\r\n    minute: n,\r\n    hour12: false\r\n};\r\nexport const TIME_24_WITH_SECONDS = {\r\n    hour: n,\r\n    minute: n,\r\n    second: n,\r\n    hour12: false\r\n};\r\nexport const TIME_24_WITH_SHORT_OFFSET = {\r\n    hour: n,\r\n    minute: n,\r\n    second: n,\r\n    hour12: false,\r\n    timeZoneName: s\r\n};\r\nexport const TIME_24_WITH_LONG_OFFSET = {\r\n    hour: n,\r\n    minute: n,\r\n    second: n,\r\n    hour12: false,\r\n    timeZoneName: l\r\n};\r\nexport const DATETIME_SHORT = {\r\n    year: n,\r\n    month: n,\r\n    day: n,\r\n    hour: n,\r\n    minute: n\r\n};\r\nexport const DATETIME_SHORT_WITH_SECONDS = {\r\n    year: n,\r\n    month: n,\r\n    day: n,\r\n    hour: n,\r\n    minute: n,\r\n    second: n\r\n};\r\nexport const DATETIME_MED = {\r\n    year: n,\r\n    month: s,\r\n    day: n,\r\n    hour: n,\r\n    minute: n\r\n};\r\nexport const DATETIME_MED_WITH_SECONDS = {\r\n    year: n,\r\n    month: s,\r\n    day: n,\r\n    hour: n,\r\n    minute: n,\r\n    second: n\r\n};\r\nexport const DATETIME_MED_WITH_WEEKDAY = {\r\n    year: n,\r\n    month: s,\r\n    day: n,\r\n    weekday: s,\r\n    hour: n,\r\n    minute: n\r\n};\r\nexport const DATETIME_FULL = {\r\n    year: n,\r\n    month: l,\r\n    day: n,\r\n    hour: n,\r\n    minute: n,\r\n    timeZoneName: s\r\n};\r\nexport const DATETIME_FULL_WITH_SECONDS = {\r\n    year: n,\r\n    month: l,\r\n    day: n,\r\n    hour: n,\r\n    minute: n,\r\n    second: n,\r\n    timeZoneName: s\r\n};\r\nexport const DATETIME_HUGE = {\r\n    year: n,\r\n    month: l,\r\n    day: n,\r\n    weekday: l,\r\n    hour: n,\r\n    minute: n,\r\n    timeZoneName: l\r\n};\r\nexport const DATETIME_HUGE_WITH_SECONDS = {\r\n    year: n,\r\n    month: l,\r\n    day: n,\r\n    weekday: l,\r\n    hour: n,\r\n    minute: n,\r\n    second: n,\r\n    timeZoneName: l\r\n};\r\n//# sourceMappingURL=formats.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/impl/formats.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 276,
    "kind": "variable",
    "name": "n",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~n",
    "access": "private",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "name": "DATE_SHORT",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATE_SHORT",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATE_SHORT}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *}"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "variable",
    "name": "DATE_MED",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATE_MED",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATE_MED}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *}"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "name": "DATE_MED_WITH_WEEKDAY",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATE_MED_WITH_WEEKDAY",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATE_MED_WITH_WEEKDAY}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"weekday\": *}"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "variable",
    "name": "DATE_FULL",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATE_FULL",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATE_FULL}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *}"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "variable",
    "name": "DATE_HUGE",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATE_HUGE",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATE_HUGE}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"weekday\": *}"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "variable",
    "name": "TIME_SIMPLE",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~TIME_SIMPLE",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{TIME_SIMPLE}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "{\"hour\": *, \"minute\": *}"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "variable",
    "name": "TIME_WITH_SECONDS",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~TIME_WITH_SECONDS",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{TIME_WITH_SECONDS}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "{\"hour\": *, \"minute\": *, \"second\": *}"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "TIME_WITH_SHORT_OFFSET",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~TIME_WITH_SHORT_OFFSET",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{TIME_WITH_SHORT_OFFSET}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "{\"hour\": *, \"minute\": *, \"second\": *, \"timeZoneName\": *}"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "variable",
    "name": "TIME_WITH_LONG_OFFSET",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~TIME_WITH_LONG_OFFSET",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{TIME_WITH_LONG_OFFSET}",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "{\"hour\": *, \"minute\": *, \"second\": *, \"timeZoneName\": *}"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "variable",
    "name": "TIME_24_SIMPLE",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~TIME_24_SIMPLE",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{TIME_24_SIMPLE}",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "{\"hour\": *, \"minute\": *, \"hour12\": *}"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "variable",
    "name": "TIME_24_WITH_SECONDS",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~TIME_24_WITH_SECONDS",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{TIME_24_WITH_SECONDS}",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "{\"hour\": *, \"minute\": *, \"second\": *, \"hour12\": *}"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "variable",
    "name": "TIME_24_WITH_SHORT_OFFSET",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~TIME_24_WITH_SHORT_OFFSET",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{TIME_24_WITH_SHORT_OFFSET}",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "{\"hour\": *, \"minute\": *, \"second\": *, \"hour12\": *, \"timeZoneName\": *}"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "variable",
    "name": "TIME_24_WITH_LONG_OFFSET",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~TIME_24_WITH_LONG_OFFSET",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{TIME_24_WITH_LONG_OFFSET}",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "{\"hour\": *, \"minute\": *, \"second\": *, \"hour12\": *, \"timeZoneName\": *}"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "variable",
    "name": "DATETIME_SHORT",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATETIME_SHORT",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATETIME_SHORT}",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"hour\": *, \"minute\": *}"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "variable",
    "name": "DATETIME_SHORT_WITH_SECONDS",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATETIME_SHORT_WITH_SECONDS",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATETIME_SHORT_WITH_SECONDS}",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"hour\": *, \"minute\": *, \"second\": *}"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "variable",
    "name": "DATETIME_MED",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATETIME_MED",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATETIME_MED}",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"hour\": *, \"minute\": *}"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "variable",
    "name": "DATETIME_MED_WITH_SECONDS",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATETIME_MED_WITH_SECONDS",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATETIME_MED_WITH_SECONDS}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"hour\": *, \"minute\": *, \"second\": *}"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "variable",
    "name": "DATETIME_MED_WITH_WEEKDAY",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATETIME_MED_WITH_WEEKDAY",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATETIME_MED_WITH_WEEKDAY}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"weekday\": *, \"hour\": *, \"minute\": *}"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "variable",
    "name": "DATETIME_FULL",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATETIME_FULL",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATETIME_FULL}",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"hour\": *, \"minute\": *, \"timeZoneName\": *}"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "variable",
    "name": "DATETIME_FULL_WITH_SECONDS",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATETIME_FULL_WITH_SECONDS",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATETIME_FULL_WITH_SECONDS}",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"hour\": *, \"minute\": *, \"second\": *, \"timeZoneName\": *}"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "variable",
    "name": "DATETIME_HUGE",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATETIME_HUGE",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATETIME_HUGE}",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"weekday\": *, \"hour\": *, \"minute\": *, \"timeZoneName\": *}"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "variable",
    "name": "DATETIME_HUGE_WITH_SECONDS",
    "memberof": "transpiled/impl/formats.js",
    "static": true,
    "longname": "transpiled/impl/formats.js~DATETIME_HUGE_WITH_SECONDS",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formats.js",
    "importStyle": "{DATETIME_HUGE_WITH_SECONDS}",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"weekday\": *, \"hour\": *, \"minute\": *, \"second\": *, \"timeZoneName\": *}"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "file",
    "name": "transpiled/impl/formatter.js",
    "content": "import * as English from \"./english\";\r\nimport * as Formats from \"./formats\";\r\nimport { hasFormatToParts, padStart } from \"./util\";\r\nfunction stringifyTokens(splits, tokenToString) {\r\n    let s = \"\";\r\n    for (const token of splits) {\r\n        if (token.literal) {\r\n            s += token.val;\r\n        }\r\n        else {\r\n            s += tokenToString(token.val);\r\n        }\r\n    }\r\n    return s;\r\n}\r\n// tslint:disable-next-line:naming-convention\r\nconst TokenToFormatOpts = {\r\n    D: Formats.DATE_SHORT,\r\n    DD: Formats.DATE_MED,\r\n    DDD: Formats.DATE_FULL,\r\n    DDDD: Formats.DATE_HUGE,\r\n    t: Formats.TIME_SIMPLE,\r\n    tt: Formats.TIME_WITH_SECONDS,\r\n    ttt: Formats.TIME_WITH_SHORT_OFFSET,\r\n    tttt: Formats.TIME_WITH_LONG_OFFSET,\r\n    T: Formats.TIME_24_SIMPLE,\r\n    TT: Formats.TIME_24_WITH_SECONDS,\r\n    TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\r\n    TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\r\n    f: Formats.DATETIME_SHORT,\r\n    ff: Formats.DATETIME_MED,\r\n    fff: Formats.DATETIME_FULL,\r\n    ffff: Formats.DATETIME_HUGE,\r\n    F: Formats.DATETIME_SHORT_WITH_SECONDS,\r\n    FF: Formats.DATETIME_MED_WITH_SECONDS,\r\n    FFF: Formats.DATETIME_FULL_WITH_SECONDS,\r\n    FFFF: Formats.DATETIME_HUGE_WITH_SECONDS\r\n};\r\n/**\r\n * @private\r\n */\r\nexport class Formatter {\r\n    constructor(locale, formatOptions) {\r\n        this._options = formatOptions;\r\n        this._loc = locale;\r\n        this._systemLoc = undefined;\r\n    }\r\n    static create(locale, options = {}) {\r\n        return new Formatter(locale, options);\r\n    }\r\n    static parseFormat(format) {\r\n        let current, currentFull = \"\", bracketedLevel = 0;\r\n        const splits = [];\r\n        for (let i = 0; i < format.length; i++) {\r\n            const c = format.charAt(i);\r\n            if (c === \"[\") {\r\n                if (bracketedLevel === 0) {\r\n                    if (currentFull.length > 0) {\r\n                        splits.push({ literal: false, val: currentFull });\r\n                    }\r\n                    current = undefined;\r\n                    currentFull = \"\";\r\n                }\r\n                else {\r\n                    currentFull += c;\r\n                }\r\n                bracketedLevel = bracketedLevel + 1;\r\n            }\r\n            else if (c === \"]\") {\r\n                bracketedLevel = bracketedLevel - 1;\r\n                if (bracketedLevel === 0) {\r\n                    if (currentFull.length > 0) {\r\n                        splits.push({ literal: true, val: currentFull });\r\n                    }\r\n                    current = undefined;\r\n                    currentFull = \"\";\r\n                }\r\n                else {\r\n                    currentFull += c;\r\n                }\r\n            }\r\n            else if (bracketedLevel > 0) {\r\n                currentFull += c;\r\n            }\r\n            else if (c === current) {\r\n                currentFull += c;\r\n            }\r\n            else {\r\n                if (currentFull.length > 0) {\r\n                    splits.push({ literal: false, val: currentFull });\r\n                }\r\n                currentFull = c;\r\n                current = c;\r\n            }\r\n        }\r\n        if (currentFull.length > 0) {\r\n            splits.push({ literal: bracketedLevel > 0, val: currentFull });\r\n        }\r\n        return splits;\r\n    }\r\n    static macroTokenToFormatOpts(token) {\r\n        return TokenToFormatOpts[token];\r\n    }\r\n    formatWithSystemDefault(dt, options) {\r\n        if (this._systemLoc === undefined) {\r\n            this._systemLoc = this._loc.redefaultToSystem();\r\n        }\r\n        const df = this._systemLoc.dtFormatter(dt, Object.assign({}, this._options, options));\r\n        return df.format();\r\n    }\r\n    formatDateTime(dt) {\r\n        const df = this._loc.dtFormatter(dt, this._options);\r\n        return df.format();\r\n    }\r\n    formatDateTimeParts(dt) {\r\n        const df = this._loc.dtFormatter(dt, this._options);\r\n        return df.formatToParts();\r\n    }\r\n    resolvedOptions(dt) {\r\n        const df = this._loc.dtFormatter(dt, this._options);\r\n        return df.resolvedOptions();\r\n    }\r\n    num(n, p = 0) {\r\n        // we get some perf out of doing this here, annoyingly\r\n        if (this._options.forceSimple) {\r\n            return padStart(n, p);\r\n        }\r\n        const options = {\r\n            padTo: p,\r\n            floor: this._options.floor\r\n        };\r\n        return this._loc.numberFormatter(options).format(n);\r\n    }\r\n    formatDateTimeFromString(dt, format) {\r\n        const knownEnglish = this._loc.listingMode() === \"en\", useDateTimeFormatter = this._loc.outputCalendar && this._loc.outputCalendar !== \"gregory\" && hasFormatToParts(), string = (options, extract) => this._loc.extract(dt, options, extract), formatOffset = (options) => dt.isOffsetFixed && dt.offset === 0 && options.allowZ\r\n            ? \"Z\"\r\n            : dt.zone.formatOffset(dt.toMillis(), options.format), meridiem = () => knownEnglish\r\n            ? English.meridiemForDateTime(dt)\r\n            : string({ hour: \"numeric\", hour12: true }, \"dayPeriod\"), month = (length, standalone) => knownEnglish\r\n            ? English.monthForDateTime(dt, length)\r\n            : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"), weekday = (length, standalone) => knownEnglish\r\n            ? English.weekdayForDateTime(dt, length)\r\n            : string(standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" }, \"weekday\"), maybeMacro = (token) => {\r\n            const formatOpts = Formatter.macroTokenToFormatOpts(token);\r\n            if (formatOpts) {\r\n                return this.formatWithSystemDefault(dt, formatOpts);\r\n            }\r\n            else {\r\n                return token;\r\n            }\r\n        }, era = (length) => knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"), tokenToString = (token) => {\r\n            // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles\r\n            switch (token) {\r\n                // ms\r\n                case \"S\":\r\n                    return this.num(dt.millisecond);\r\n                case \"u\":\r\n                // falls through\r\n                case \"SSS\":\r\n                    return this.num(dt.millisecond, 3);\r\n                // seconds\r\n                case \"s\":\r\n                    return this.num(dt.second);\r\n                case \"ss\":\r\n                    return this.num(dt.second, 2);\r\n                // minutes\r\n                case \"m\":\r\n                    return this.num(dt.minute);\r\n                case \"mm\":\r\n                    return this.num(dt.minute, 2);\r\n                // hours\r\n                case \"h\":\r\n                    return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\r\n                case \"hh\":\r\n                    return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\r\n                case \"H\":\r\n                    return this.num(dt.hour);\r\n                case \"HH\":\r\n                    return this.num(dt.hour, 2);\r\n                // offset\r\n                case \"Z\":\r\n                    // like +6\r\n                    return formatOffset({ format: \"narrow\", allowZ: this._options.allowZ });\r\n                case \"ZZ\":\r\n                    // like +06:00\r\n                    return formatOffset({ format: \"short\", allowZ: this._options.allowZ });\r\n                case \"ZZZ\":\r\n                    // like +0600\r\n                    return formatOffset({ format: \"techie\", allowZ: this._options.allowZ });\r\n                case \"ZZZZ\":\r\n                    // like EST\r\n                    return (dt.zone.offsetName(dt.toMillis(), { format: \"short\", locale: this._loc.locale }) || \"\");\r\n                case \"ZZZZZ\":\r\n                    // like Eastern Standard Time\r\n                    return (dt.zone.offsetName(dt.toMillis(), { format: \"long\", locale: this._loc.locale }) || \"\");\r\n                // zone\r\n                case \"z\":\r\n                    // like America/New_York\r\n                    return dt.zoneName;\r\n                // meridiems\r\n                case \"a\":\r\n                    return meridiem();\r\n                // dates\r\n                case \"d\":\r\n                    return useDateTimeFormatter ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\r\n                case \"dd\":\r\n                    return useDateTimeFormatter ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\r\n                // weekdays - standalone\r\n                case \"c\":\r\n                    // like 1\r\n                    return this.num(dt.weekday);\r\n                case \"ccc\":\r\n                    // like 'Tues'\r\n                    return weekday(\"short\", true);\r\n                case \"cccc\":\r\n                    // like 'Tuesday'\r\n                    return weekday(\"long\", true);\r\n                case \"ccccc\":\r\n                    // like 'T'\r\n                    return weekday(\"narrow\", true);\r\n                // weekdays - format\r\n                case \"E\":\r\n                    // like 1\r\n                    return this.num(dt.weekday);\r\n                case \"EEE\":\r\n                    // like 'Tues'\r\n                    return weekday(\"short\", false);\r\n                case \"EEEE\":\r\n                    // like 'Tuesday'\r\n                    return weekday(\"long\", false);\r\n                case \"EEEEE\":\r\n                    // like 'T'\r\n                    return weekday(\"narrow\", false);\r\n                // months - standalone\r\n                case \"L\":\r\n                    // like 1\r\n                    return useDateTimeFormatter\r\n                        ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\r\n                        : this.num(dt.month);\r\n                case \"LL\":\r\n                    // like 01, doesn't seem to work\r\n                    return useDateTimeFormatter\r\n                        ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\r\n                        : this.num(dt.month, 2);\r\n                case \"LLL\":\r\n                    // like Jan\r\n                    return month(\"short\", true);\r\n                case \"LLLL\":\r\n                    // like January\r\n                    return month(\"long\", true);\r\n                case \"LLLLL\":\r\n                    // like J\r\n                    return month(\"narrow\", true);\r\n                // months - format\r\n                case \"M\":\r\n                    // like 1\r\n                    return useDateTimeFormatter\r\n                        ? string({ month: \"numeric\" }, \"month\")\r\n                        : this.num(dt.month);\r\n                case \"MM\":\r\n                    // like 01\r\n                    return useDateTimeFormatter\r\n                        ? string({ month: \"2-digit\" }, \"month\")\r\n                        : this.num(dt.month, 2);\r\n                case \"MMM\":\r\n                    // like Jan\r\n                    return month(\"short\", false);\r\n                case \"MMMM\":\r\n                    // like January\r\n                    return month(\"long\", false);\r\n                case \"MMMMM\":\r\n                    // like J\r\n                    return month(\"narrow\", false);\r\n                // years\r\n                case \"y\":\r\n                    // like 2014\r\n                    return useDateTimeFormatter ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\r\n                case \"yy\":\r\n                    // like 14\r\n                    return useDateTimeFormatter\r\n                        ? string({ year: \"2-digit\" }, \"year\")\r\n                        : this.num(parseInt(dt.year.toString(10).slice(-2), 10), 2);\r\n                case \"yyyy\":\r\n                    // like 0012\r\n                    return useDateTimeFormatter\r\n                        ? string({ year: \"numeric\" }, \"year\")\r\n                        : this.num(dt.year, 4);\r\n                case \"yyyyyy\":\r\n                    // like 000012\r\n                    return useDateTimeFormatter\r\n                        ? string({ year: \"numeric\" }, \"year\")\r\n                        : this.num(dt.year, 6);\r\n                // eras\r\n                case \"G\":\r\n                    // like AD\r\n                    return era(\"short\");\r\n                case \"GG\":\r\n                    // like Anno Domini\r\n                    return era(\"long\");\r\n                case \"GGGGG\":\r\n                    return era(\"narrow\");\r\n                case \"kk\":\r\n                    return this.num(parseInt(dt.weekYear.toString(10).slice(-2), 10), 2);\r\n                case \"kkkk\":\r\n                    return this.num(dt.weekYear, 4);\r\n                case \"W\":\r\n                    return this.num(dt.weekNumber);\r\n                case \"WW\":\r\n                    return this.num(dt.weekNumber, 2);\r\n                case \"o\":\r\n                    return this.num(dt.ordinal);\r\n                case \"ooo\":\r\n                    return this.num(dt.ordinal, 3);\r\n                case \"q\":\r\n                    // like 1\r\n                    return this.num(dt.quarter);\r\n                case \"qq\":\r\n                    // like 01\r\n                    return this.num(dt.quarter, 2);\r\n                case \"X\":\r\n                    return this.num(Math.floor(dt.toMillis() / 1000));\r\n                case \"x\":\r\n                    return this.num(dt.toMillis());\r\n                default:\r\n                    return maybeMacro(token);\r\n            }\r\n        };\r\n        return stringifyTokens(Formatter.parseFormat(format), tokenToString);\r\n    }\r\n    formatDurationFromString(dur, format) {\r\n        const tokenToField = (token) => {\r\n            switch (token[0]) {\r\n                case \"S\":\r\n                    return \"milliseconds\";\r\n                case \"s\":\r\n                    return \"seconds\";\r\n                case \"m\":\r\n                    return \"minutes\";\r\n                case \"h\":\r\n                    return \"hours\";\r\n                case \"d\":\r\n                    return \"days\";\r\n                case \"M\":\r\n                    return \"months\";\r\n                case \"y\":\r\n                    return \"years\";\r\n                default:\r\n                    return undefined;\r\n            }\r\n        }, tokenToString = (lildur) => (token) => {\r\n            const mapped = tokenToField(token);\r\n            if (mapped) {\r\n                return this.num(lildur.get(mapped), token.length);\r\n            }\r\n            else {\r\n                return token;\r\n            }\r\n        }, tokens = Formatter.parseFormat(format), realTokens = tokens.reduce((found, { literal, val }) => (literal ? found : found.concat(val)), []), collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(Boolean));\r\n        return stringifyTokens(tokens, tokenToString(collapsed));\r\n    }\r\n}\r\n//# sourceMappingURL=formatter.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/impl/formatter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "function",
    "name": "stringifyTokens",
    "memberof": "transpiled/impl/formatter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/formatter.js~stringifyTokens",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/formatter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "splits",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokenToString",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "variable",
    "name": "TokenToFormatOpts",
    "memberof": "transpiled/impl/formatter.js",
    "static": true,
    "longname": "transpiled/impl/formatter.js~TokenToFormatOpts",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/formatter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"D\": *, \"DD\": *, \"DDD\": *, \"DDDD\": *, \"t\": *, \"tt\": *, \"ttt\": *, \"tttt\": *, \"T\": *, \"TT\": *, \"TTT\": *, \"TTTT\": *, \"f\": *, \"ff\": *, \"fff\": *, \"ffff\": *, \"F\": *, \"FF\": *, \"FFF\": *, \"FFFF\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "class",
    "name": "Formatter",
    "memberof": "transpiled/impl/formatter.js",
    "static": true,
    "longname": "transpiled/impl/formatter.js~Formatter",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/formatter.js",
    "importStyle": "{Formatter}",
    "description": "",
    "lineNumber": 42,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/formatter.js~Formatter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "_options",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "static": false,
    "longname": "transpiled/impl/formatter.js~Formatter#_options",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "_loc",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "static": false,
    "longname": "transpiled/impl/formatter.js~Formatter#_loc",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "_systemLoc",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "static": false,
    "longname": "transpiled/impl/formatter.js~Formatter#_systemLoc",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "create",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/formatter.js~Formatter.create",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "locale",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "parseFormat",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/formatter.js~Formatter.parseFormat",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "format",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "macroTokenToFormatOpts",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/formatter.js~Formatter.macroTokenToFormatOpts",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "formatWithSystemDefault",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/formatter.js~Formatter#formatWithSystemDefault",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "formatDateTime",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/formatter.js~Formatter#formatDateTime",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "formatDateTimeParts",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/formatter.js~Formatter#formatDateTimeParts",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "resolvedOptions",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/formatter.js~Formatter#resolvedOptions",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "num",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/formatter.js~Formatter#num",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      },
      {
        "name": "p",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "formatDateTimeFromString",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/formatter.js~Formatter#formatDateTimeFromString",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "formatDurationFromString",
    "memberof": "transpiled/impl/formatter.js~Formatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/formatter.js~Formatter#formatDurationFromString",
    "access": "public",
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "params": [
      {
        "name": "dur",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "transpiled/impl/locale.js",
    "content": "import { hasFormatToParts, hasIntl, padStart, roundTo, hasRelative } from \"./util\";\r\nimport * as English from \"./english\";\r\nimport { Settings } from \"../settings\";\r\nimport { DateTime } from \"../datetime\";\r\nimport { Formatter } from \"./formatter\";\r\nimport Intl from \"../types/intl-2020\";\r\nlet intlDTCache = {};\r\nfunction getCachedDTF(locString, options = {}) {\r\n    const key = JSON.stringify([locString, options]);\r\n    let dtf = intlDTCache[key];\r\n    if (!dtf) {\r\n        dtf = new Intl.DateTimeFormat(locString, options);\r\n        intlDTCache[key] = dtf;\r\n    }\r\n    return dtf;\r\n}\r\nlet intlNumCache = {};\r\nfunction getCachedINF(locString, options) {\r\n    const key = JSON.stringify([locString, options]);\r\n    let inf = intlNumCache[key];\r\n    if (!inf) {\r\n        inf = new Intl.NumberFormat(locString, options);\r\n        intlNumCache[key] = inf;\r\n    }\r\n    return inf;\r\n}\r\nlet intlRelCache = {};\r\nfunction getCachedRTF(locale, options = {}) {\r\n    const key = JSON.stringify([locale, options]);\r\n    let inf = intlRelCache[key];\r\n    if (!inf) {\r\n        inf = new Intl.RelativeTimeFormat(locale, options);\r\n        intlRelCache[key] = inf;\r\n    }\r\n    return inf;\r\n}\r\nlet sysLocaleCache;\r\nfunction systemLocale() {\r\n    if (sysLocaleCache) {\r\n        return sysLocaleCache;\r\n    }\r\n    else if (hasIntl()) {\r\n        const computedSys = new Intl.DateTimeFormat().resolvedOptions().locale;\r\n        // node sometimes defaults to \"und\". Override that because that is dumb\r\n        sysLocaleCache = !computedSys || computedSys === \"und\" ? \"en-US\" : computedSys;\r\n        return sysLocaleCache;\r\n    }\r\n    else {\r\n        sysLocaleCache = \"en-US\";\r\n        return sysLocaleCache;\r\n    }\r\n}\r\nfunction parseLocaleString(localeStr) {\r\n    // I really want to avoid writing a BCP 47 parser\r\n    // see, e.g. https://github.com/wooorm/bcp-47\r\n    // Instead, we'll do this:\r\n    // a) if the string has no -u extensions, just leave it alone\r\n    // b) if it does, use Intl to resolve everything\r\n    // c) if Intl fails, try again without the -u\r\n    const uIndex = localeStr.indexOf(\"-u-\");\r\n    if (uIndex === -1) {\r\n        return [localeStr];\r\n    }\r\n    else {\r\n        let options;\r\n        const smaller = localeStr.substring(0, uIndex);\r\n        try {\r\n            options = getCachedDTF(localeStr).resolvedOptions();\r\n        }\r\n        catch (e) {\r\n            options = getCachedDTF(smaller).resolvedOptions();\r\n        }\r\n        const { numberingSystem, calendar } = options;\r\n        // return the smaller one so that we can append the calendar and numbering overrides to it\r\n        return [smaller, numberingSystem, calendar];\r\n    }\r\n}\r\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\r\n    if (hasIntl()) {\r\n        if (outputCalendar || numberingSystem) {\r\n            localeStr += \"-u\";\r\n            if (outputCalendar) {\r\n                localeStr += `-ca-${outputCalendar}`;\r\n            }\r\n            if (numberingSystem) {\r\n                localeStr += `-nu-${numberingSystem}`;\r\n            }\r\n            return localeStr;\r\n        }\r\n        else {\r\n            return localeStr;\r\n        }\r\n    }\r\n    else {\r\n        // arbitrary value, should never be used, all subsequent uses of this.intl are protected by an hasIntl check\r\n        return \"\";\r\n    }\r\n}\r\nfunction mapMonths(f) {\r\n    const ms = [];\r\n    for (let i = 1; i <= 12; i++) {\r\n        const dt = DateTime.utc(2016, i, 1);\r\n        ms.push(f(dt));\r\n    }\r\n    return ms;\r\n}\r\nfunction mapWeekdays(f) {\r\n    const ms = [];\r\n    for (let i = 1; i <= 7; i++) {\r\n        const dt = DateTime.utc(2016, 11, 13 + i);\r\n        ms.push(f(dt));\r\n    }\r\n    return ms;\r\n}\r\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\r\n    const mode = loc.listingMode(defaultOK);\r\n    if (mode === \"error\") {\r\n        return [];\r\n    }\r\n    else if (mode === \"en\") {\r\n        return englishFn(length);\r\n    }\r\n    else {\r\n        return intlFn(length);\r\n    }\r\n}\r\nclass PolyNumberFormatter {\r\n    constructor(intl, forceSimple, options) {\r\n        this._padTo = options.padTo || 0;\r\n        this._floor = options.floor || false;\r\n        if (!forceSimple && hasIntl()) {\r\n            const intlOpts = { useGrouping: false };\r\n            if (this._padTo > 0) {\r\n                intlOpts.minimumIntegerDigits = this._padTo;\r\n            }\r\n            this._inf = getCachedINF(intl, intlOpts);\r\n        }\r\n    }\r\n    format(i) {\r\n        if (this._inf) {\r\n            const fixed = this._floor ? Math.floor(i) : i;\r\n            return this._inf.format(fixed);\r\n        }\r\n        else {\r\n            // to match the browser's numberformatter defaults\r\n            const fixed = this._floor ? Math.floor(i) : roundTo(i, 3);\r\n            return padStart(fixed, this._padTo);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nclass PolyDateFormatter {\r\n    constructor(dt, intl, options) {\r\n        this._options = options;\r\n        const hasIntlDTF = hasIntl();\r\n        let z;\r\n        if (dt.zone.isUniversal && hasIntlDTF) {\r\n            // Chromium doesn't support fixed-offset zones like Etc/GMT+8 in its formatter,\r\n            // See https://bugs.chromium.org/p/chromium/issues/detail?id=364374.\r\n            // So we have to make do. Two cases:\r\n            // 1. The format options tell us to show the zone. We can't do that, so the best\r\n            // we can do is format the date in UTC.\r\n            // 2. The format options don't tell us to show the zone. Then we can adjust\r\n            // the time and tell the formatter to show it to us in UTC, so that the time is right\r\n            // and the bad zone doesn't show up.\r\n            // We can clean all this up when Chrome fixes this.\r\n            z = \"UTC\";\r\n            if (options.timeZoneName) {\r\n                this._dt = dt;\r\n            }\r\n            else {\r\n                this._dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.toMillis() + dt.offset * 60 * 1000);\r\n            }\r\n        }\r\n        else if (dt.zone.type === \"system\") {\r\n            this._dt = dt;\r\n        }\r\n        else {\r\n            this._dt = dt;\r\n            z = dt.zone.name;\r\n        }\r\n        if (hasIntlDTF) {\r\n            const intlOpts = Object.assign({}, this._options);\r\n            if (z) {\r\n                intlOpts.timeZone = z;\r\n            }\r\n            this._dtf = getCachedDTF(intl, intlOpts);\r\n        }\r\n    }\r\n    format() {\r\n        if (this._dtf) {\r\n            return this._dtf.format(this._dt.toJSDate());\r\n        }\r\n        else {\r\n            const tokenFormat = English.formatString(this._options), loc = Locale.create(\"en-US\");\r\n            return Formatter.create(loc).formatDateTimeFromString(this._dt, tokenFormat);\r\n        }\r\n    }\r\n    formatToParts() {\r\n        if (this._dtf && hasFormatToParts()) {\r\n            return this._dtf.formatToParts(this._dt.toJSDate());\r\n        }\r\n        else {\r\n            // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings\r\n            // and IMO it's too weird to have an uncanny valley like that\r\n            return [];\r\n        }\r\n    }\r\n    resolvedOptions() {\r\n        if (this._dtf) {\r\n            return this._dtf.resolvedOptions();\r\n        }\r\n        else {\r\n            return {\r\n                locale: \"en-US\",\r\n                numberingSystem: \"latn\",\r\n                calendar: \"gregory\",\r\n                timeZone: \"UTC\"\r\n            };\r\n        }\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nclass PolyRelFormatter {\r\n    constructor(locale, isEnglish, options) {\r\n        this._options = Object.assign({ style: \"long\" }, options);\r\n        if (!isEnglish && hasRelative()) {\r\n            this._rtf = getCachedRTF(locale, options);\r\n        }\r\n    }\r\n    format(count, unit) {\r\n        if (this._rtf) {\r\n            return this._rtf.format(count, unit);\r\n        }\r\n        else {\r\n            return English.formatRelativeTime(unit, count, this._options.numeric, this._options.style !== \"long\");\r\n        }\r\n    }\r\n    formatToParts(count, unit) {\r\n        if (this._rtf) {\r\n            return this._rtf.formatToParts(count, unit);\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport class Locale {\r\n    constructor(locale, numberingSystem, outputCalendar, specifiedLocale) {\r\n        const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\r\n        this.locale = parsedLocale;\r\n        this.numberingSystem = numberingSystem || parsedNumberingSystem;\r\n        this.outputCalendar = outputCalendar || parsedOutputCalendar;\r\n        this._intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\r\n        this._weekdaysCache = { format: {}, standalone: {} };\r\n        this._monthsCache = { format: {}, standalone: {} };\r\n        this._meridiemCache = undefined;\r\n        this._eraCache = {};\r\n        this._specifiedLocale = specifiedLocale;\r\n        this._fastNumbersCached = undefined;\r\n    }\r\n    get fastNumbers() {\r\n        if (this._fastNumbersCached === undefined) {\r\n            this._fastNumbersCached = this._supportsFastNumbers();\r\n        }\r\n        return this._fastNumbersCached;\r\n    }\r\n    static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\r\n        const specifiedLocale = locale || Settings.defaultLocale, \r\n        // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\r\n        localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale()), numberingSystemR = numberingSystem || Settings.defaultNumberingSystem, outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\r\n        return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\r\n    }\r\n    static resetCache() {\r\n        sysLocaleCache = undefined;\r\n        intlDTCache = {};\r\n        intlNumCache = {};\r\n        intlRelCache = {};\r\n    }\r\n    static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\r\n        return Locale.create(locale, numberingSystem, outputCalendar);\r\n    }\r\n    listingMode(defaultOK = true) {\r\n        const intl = hasIntl(), hasFTP = intl && hasFormatToParts(), isActuallyEn = this.isEnglish(), hasNoWeirdness = (this.numberingSystem === undefined || this.numberingSystem === \"latn\") &&\r\n            (this.outputCalendar === undefined || this.outputCalendar === \"gregory\");\r\n        if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {\r\n            return \"error\";\r\n        }\r\n        else if (!hasFTP || (isActuallyEn && hasNoWeirdness)) {\r\n            return \"en\";\r\n        }\r\n        else {\r\n            return \"intl\";\r\n        }\r\n    }\r\n    clone(alts, defaultToEN = false) {\r\n        if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\r\n            return this;\r\n        }\r\n        else {\r\n            return Locale.create(alts.locale || this._specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, defaultToEN);\r\n        }\r\n    }\r\n    redefaultToEN(alts = {}) {\r\n        return this.clone(alts, true /* defaultToEN */);\r\n    }\r\n    redefaultToSystem(alts = {}) {\r\n        return this.clone(alts);\r\n    }\r\n    months(length, format = false, defaultOK = true) {\r\n        return listStuff(this, length, defaultOK, English.months, len => {\r\n            const intl = format ? { month: len, day: \"numeric\" } : { month: len }, formatStr = format ? \"format\" : \"standalone\";\r\n            if (!this._monthsCache[formatStr][len]) {\r\n                this._monthsCache[formatStr][len] = mapMonths(dt => this.extract(dt, intl, \"month\"));\r\n            }\r\n            return this._monthsCache[formatStr][len];\r\n        });\r\n    }\r\n    weekdays(length, format = false, defaultOK = true) {\r\n        return listStuff(this, length, defaultOK, English.weekdays, len => {\r\n            const intl = format\r\n                ? { weekday: len, year: \"numeric\", month: \"long\", day: \"numeric\" }\r\n                : { weekday: len }, formatStr = format ? \"format\" : \"standalone\";\r\n            if (!this._weekdaysCache[formatStr][len]) {\r\n                this._weekdaysCache[formatStr][len] = mapWeekdays(dt => this.extract(dt, intl, \"weekday\"));\r\n            }\r\n            return this._weekdaysCache[formatStr][len];\r\n        });\r\n    }\r\n    meridiems(defaultOK = true) {\r\n        return listStuff(this, \"long\", // arbitrary unused value\r\n        defaultOK, () => English.meridiems, () => {\r\n            // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\r\n            // for AM and PM. This is probably wrong, but it makes parsing way easier.\r\n            if (this._meridiemCache === undefined) {\r\n                const intl = { hour: \"numeric\", hour12: true };\r\n                this._meridiemCache = [\r\n                    DateTime.utc(2016, 11, 13, 9),\r\n                    DateTime.utc(2016, 11, 13, 19)\r\n                ].map(dt => this.extract(dt, intl, \"dayPeriod\"));\r\n            }\r\n            return this._meridiemCache;\r\n        });\r\n    }\r\n    eras(length, defaultOK = true) {\r\n        return listStuff(this, length, defaultOK, English.eras, len => {\r\n            const intl = { era: len };\r\n            // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\r\n            // to definitely enumerate them.\r\n            if (!this._eraCache[len]) {\r\n                this._eraCache[len] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt => this.extract(dt, intl, \"era\"));\r\n            }\r\n            return this._eraCache[len];\r\n        });\r\n    }\r\n    extract(dt, intlOptions, field) {\r\n        const df = this.dtFormatter(dt, intlOptions), results = df.formatToParts(), \r\n        // Lower case comparison, type is 'dayperiod' instead of 'dayPeriod' in documentation\r\n        matching = results.find((m) => m.type.toLowerCase() === field.toLowerCase());\r\n        if (!matching) {\r\n            throw new Error(`Invalid extract field ${field}`);\r\n        }\r\n        return matching.value;\r\n    }\r\n    numberFormatter(options = {}) {\r\n        return new PolyNumberFormatter(this._intl, this.fastNumbers, options);\r\n    }\r\n    dtFormatter(dt, intlOptions = {}) {\r\n        return new PolyDateFormatter(dt, this._intl, intlOptions);\r\n    }\r\n    relFormatter(options = {}) {\r\n        return new PolyRelFormatter(this._intl, this.isEnglish(), options);\r\n    }\r\n    isEnglish() {\r\n        return (this.locale === \"en\" ||\r\n            this.locale.toLowerCase() === \"en-us\" ||\r\n            (hasIntl() && new Intl.DateTimeFormat(this._intl).resolvedOptions().locale.startsWith(\"en-us\")));\r\n    }\r\n    equals(other) {\r\n        return (this.locale === other.locale &&\r\n            this.numberingSystem === other.numberingSystem &&\r\n            this.outputCalendar === other.outputCalendar);\r\n    }\r\n    _supportsFastNumbers() {\r\n        if (this.numberingSystem && this.numberingSystem !== \"latn\") {\r\n            return false;\r\n        }\r\n        else {\r\n            return (this.numberingSystem === \"latn\" ||\r\n                !this.locale ||\r\n                this.locale.startsWith(\"en\") ||\r\n                (hasIntl() && Intl.DateTimeFormat(this._intl).resolvedOptions().numberingSystem === \"latn\"));\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=locale.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/impl/locale.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "variable",
    "name": "intlDTCache",
    "memberof": "transpiled/impl/locale.js",
    "static": true,
    "longname": "transpiled/impl/locale.js~intlDTCache",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 320,
    "kind": "function",
    "name": "getCachedDTF",
    "memberof": "transpiled/impl/locale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~getCachedDTF",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "locString",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 321,
    "kind": "variable",
    "name": "intlNumCache",
    "memberof": "transpiled/impl/locale.js",
    "static": true,
    "longname": "transpiled/impl/locale.js~intlNumCache",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 322,
    "kind": "function",
    "name": "getCachedINF",
    "memberof": "transpiled/impl/locale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~getCachedINF",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "locString",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 323,
    "kind": "variable",
    "name": "intlRelCache",
    "memberof": "transpiled/impl/locale.js",
    "static": true,
    "longname": "transpiled/impl/locale.js~intlRelCache",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 324,
    "kind": "function",
    "name": "getCachedRTF",
    "memberof": "transpiled/impl/locale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~getCachedRTF",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "locale",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 325,
    "kind": "function",
    "name": "systemLocale",
    "memberof": "transpiled/impl/locale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~systemLocale",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 326,
    "kind": "function",
    "name": "parseLocaleString",
    "memberof": "transpiled/impl/locale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~parseLocaleString",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "localeStr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 327,
    "kind": "function",
    "name": "intlConfigString",
    "memberof": "transpiled/impl/locale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~intlConfigString",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "localeStr",
        "types": [
          "*"
        ]
      },
      {
        "name": "numberingSystem",
        "types": [
          "*"
        ]
      },
      {
        "name": "outputCalendar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "mapMonths",
    "memberof": "transpiled/impl/locale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~mapMonths",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 329,
    "kind": "function",
    "name": "mapWeekdays",
    "memberof": "transpiled/impl/locale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~mapWeekdays",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 330,
    "kind": "function",
    "name": "listStuff",
    "memberof": "transpiled/impl/locale.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~listStuff",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "loc",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultOK",
        "types": [
          "*"
        ]
      },
      {
        "name": "englishFn",
        "types": [
          "*"
        ]
      },
      {
        "name": "intlFn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 331,
    "kind": "class",
    "name": "PolyNumberFormatter",
    "memberof": "transpiled/impl/locale.js",
    "static": true,
    "longname": "transpiled/impl/locale.js~PolyNumberFormatter",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 332,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/impl/locale.js~PolyNumberFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyNumberFormatter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "_padTo",
    "memberof": "transpiled/impl/locale.js~PolyNumberFormatter",
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyNumberFormatter#_padTo",
    "access": "private",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "_floor",
    "memberof": "transpiled/impl/locale.js~PolyNumberFormatter",
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyNumberFormatter#_floor",
    "access": "private",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "_inf",
    "memberof": "transpiled/impl/locale.js~PolyNumberFormatter",
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyNumberFormatter#_inf",
    "access": "private",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "format",
    "memberof": "transpiled/impl/locale.js~PolyNumberFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyNumberFormatter#format",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "class",
    "name": "PolyDateFormatter",
    "memberof": "transpiled/impl/locale.js",
    "static": true,
    "longname": "transpiled/impl/locale.js~PolyDateFormatter",
    "access": "private",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 154,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 338,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/impl/locale.js~PolyDateFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyDateFormatter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "_options",
    "memberof": "transpiled/impl/locale.js~PolyDateFormatter",
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyDateFormatter#_options",
    "access": "private",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "_dt",
    "memberof": "transpiled/impl/locale.js~PolyDateFormatter",
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyDateFormatter#_dt",
    "access": "private",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "member",
    "name": "_dtf",
    "memberof": "transpiled/impl/locale.js~PolyDateFormatter",
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyDateFormatter#_dtf",
    "access": "private",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "format",
    "memberof": "transpiled/impl/locale.js~PolyDateFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyDateFormatter#format",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "formatToParts",
    "memberof": "transpiled/impl/locale.js~PolyDateFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyDateFormatter#formatToParts",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "resolvedOptions",
    "memberof": "transpiled/impl/locale.js~PolyDateFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyDateFormatter#resolvedOptions",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"locale\": string, \"numberingSystem\": string, \"calendar\": string, \"timeZone\": string}"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "class",
    "name": "PolyRelFormatter",
    "memberof": "transpiled/impl/locale.js",
    "static": true,
    "longname": "transpiled/impl/locale.js~PolyRelFormatter",
    "access": "private",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 228,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 349,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/impl/locale.js~PolyRelFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyRelFormatter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true
  },
  {
    "__docId__": 350,
    "kind": "member",
    "name": "_options",
    "memberof": "transpiled/impl/locale.js~PolyRelFormatter",
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyRelFormatter#_options",
    "access": "private",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "_rtf",
    "memberof": "transpiled/impl/locale.js~PolyRelFormatter",
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyRelFormatter#_rtf",
    "access": "private",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "format",
    "memberof": "transpiled/impl/locale.js~PolyRelFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyRelFormatter#format",
    "access": "public",
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "unit",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "formatToParts",
    "memberof": "transpiled/impl/locale.js~PolyRelFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~PolyRelFormatter#formatToParts",
    "access": "public",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "unit",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "class",
    "name": "Locale",
    "memberof": "transpiled/impl/locale.js",
    "static": true,
    "longname": "transpiled/impl/locale.js~Locale",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/locale.js",
    "importStyle": "{Locale}",
    "description": "",
    "lineNumber": 255,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 355,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 256,
    "undocument": true
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "locale",
    "memberof": "transpiled/impl/locale.js~Locale",
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#locale",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "numberingSystem",
    "memberof": "transpiled/impl/locale.js~Locale",
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#numberingSystem",
    "access": "public",
    "description": null,
    "lineNumber": 259,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "outputCalendar",
    "memberof": "transpiled/impl/locale.js~Locale",
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#outputCalendar",
    "access": "public",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "_intl",
    "memberof": "transpiled/impl/locale.js~Locale",
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#_intl",
    "access": "private",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "_weekdaysCache",
    "memberof": "transpiled/impl/locale.js~Locale",
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#_weekdaysCache",
    "access": "private",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{\"format\": *, \"standalone\": *}"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "_monthsCache",
    "memberof": "transpiled/impl/locale.js~Locale",
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#_monthsCache",
    "access": "private",
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{\"format\": *, \"standalone\": *}"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "_meridiemCache",
    "memberof": "transpiled/impl/locale.js~Locale",
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#_meridiemCache",
    "access": "private",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "member",
    "name": "_eraCache",
    "memberof": "transpiled/impl/locale.js~Locale",
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#_eraCache",
    "access": "private",
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "_specifiedLocale",
    "memberof": "transpiled/impl/locale.js~Locale",
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#_specifiedLocale",
    "access": "private",
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "member",
    "name": "_fastNumbersCached",
    "memberof": "transpiled/impl/locale.js~Locale",
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#_fastNumbersCached",
    "access": "private",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "get",
    "name": "fastNumbers",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#fastNumbers",
    "access": "public",
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "create",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~Locale.create",
    "access": "public",
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [
      {
        "name": "locale",
        "types": [
          "*"
        ]
      },
      {
        "name": "numberingSystem",
        "types": [
          "*"
        ]
      },
      {
        "name": "outputCalendar",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultToEN",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "resetCache",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~Locale.resetCache",
    "access": "public",
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "fromObject",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/locale.js~Locale.fromObject",
    "access": "public",
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"locale\": *, \"numberingSystem\": *, \"outputCalendar\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "listingMode",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#listingMode",
    "access": "public",
    "description": null,
    "lineNumber": 290,
    "undocument": true,
    "params": [
      {
        "name": "defaultOK",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "clone",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#clone",
    "access": "public",
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "params": [
      {
        "name": "alts",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultToEN",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "redefaultToEN",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#redefaultToEN",
    "access": "public",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "params": [
      {
        "name": "alts",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "redefaultToSystem",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#redefaultToSystem",
    "access": "public",
    "description": null,
    "lineNumber": 314,
    "undocument": true,
    "params": [
      {
        "name": "alts",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "months",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#months",
    "access": "public",
    "description": null,
    "lineNumber": 317,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      },
      {
        "name": "defaultOK",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "weekdays",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#weekdays",
    "access": "public",
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      },
      {
        "name": "defaultOK",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "meridiems",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#meridiems",
    "access": "public",
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "params": [
      {
        "name": "defaultOK",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "eras",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#eras",
    "access": "public",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultOK",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "extract",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#extract",
    "access": "public",
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      },
      {
        "name": "intlOptions",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "numberFormatter",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#numberFormatter",
    "access": "public",
    "description": null,
    "lineNumber": 372,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "dtFormatter",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#dtFormatter",
    "access": "public",
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      },
      {
        "name": "intlOptions",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "relFormatter",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#relFormatter",
    "access": "public",
    "description": null,
    "lineNumber": 378,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "isEnglish",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#isEnglish",
    "access": "public",
    "description": null,
    "lineNumber": 381,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "equals",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#equals",
    "access": "public",
    "description": null,
    "lineNumber": 386,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "_supportsFastNumbers",
    "memberof": "transpiled/impl/locale.js~Locale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/impl/locale.js~Locale#_supportsFastNumbers",
    "access": "private",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "file",
    "name": "transpiled/impl/regexParser.js",
    "content": "import { untruncateYear, signedOffset, parseInteger, parseMillis, IANA_REGEX, isUndefined } from \"./util\";\r\nimport * as English from \"./english\";\r\nimport { FixedOffsetZone } from \"../zones/fixedOffsetZone\";\r\nimport { IANAZone } from \"../zones/IANAZone\";\r\nfunction combineRegexes(...regexes) {\r\n    const full = regexes.reduce((f, r) => f + r.source, \"\");\r\n    return RegExp(`^${full}$`);\r\n}\r\nfunction combineExtractors(...extractors) {\r\n    return (match) => extractors\r\n        .reduce(([mergedVals, mergedZone, cursor], ex) => {\r\n        const [val, zone, next] = ex(match, cursor);\r\n        return [Object.assign(mergedVals, val), mergedZone || zone, next];\r\n    }, [{}, null, 1])\r\n        .slice(0, 2);\r\n}\r\nfunction parse(s, ...patterns) {\r\n    if (s === undefined || s === null) {\r\n        return [null, null];\r\n    }\r\n    for (const [regex, extractor] of patterns) {\r\n        const m = regex.exec(s);\r\n        if (m !== null) {\r\n            return extractor(m);\r\n        }\r\n    }\r\n    return [null, null];\r\n}\r\nfunction simpleParse(...keys) {\r\n    return (match, cursor) => {\r\n        const ret = {};\r\n        let i;\r\n        for (i = 0; i < keys.length; i++) {\r\n            ret[keys[i]] = parseInteger(match[cursor + i]);\r\n        }\r\n        return [ret, null, cursor + i];\r\n    };\r\n}\r\n// ISO and SQL parsing\r\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/, isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/, isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`), isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`), isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/, isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/, isoOrdinalRegex = /(\\d{4})-?(\\d{3})/, extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekday\"), extractISOOrdinalData = simpleParse(\"year\", \"ordinal\"), sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/, // dumbed-down version of the ISO one\r\nsqlTimeRegex = RegExp(`${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${IANA_REGEX.source}))?`), sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\r\nfunction int(match, pos, fallback) {\r\n    const m = match[pos];\r\n    return isUndefined(m) ? fallback : parseInteger(m);\r\n}\r\nfunction extractISOYmd(match, cursor) {\r\n    const item = {\r\n        year: int(match, cursor, 0),\r\n        month: int(match, cursor + 1, 1),\r\n        day: int(match, cursor + 2, 1)\r\n    };\r\n    return [item, null, cursor + 3];\r\n}\r\nfunction extractISOTime(match, cursor) {\r\n    const item = {\r\n        hour: int(match, cursor, 0),\r\n        minute: int(match, cursor + 1, 0),\r\n        second: int(match, cursor + 2, 0),\r\n        millisecond: parseMillis(match[cursor + 3])\r\n    };\r\n    return [item, null, cursor + 4];\r\n}\r\nfunction extractISOOffset(match, cursor) {\r\n    const local = !match[cursor] && !match[cursor + 1], fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]), zone = local ? null : FixedOffsetZone.instance(fullOffset);\r\n    return [{}, zone, cursor + 3];\r\n}\r\nfunction extractIANAZone(match, cursor) {\r\n    const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\r\n    return [{}, zone, cursor + 1];\r\n}\r\n// ISO duration parsing\r\nconst isoDuration = /^-?P(?:(?:(-?\\d{1,9})Y)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,9})W)?(?:(-?\\d{1,9})D)?(?:T(?:(-?\\d{1,9})H)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,9}))?S)?)?)$/;\r\nfunction extractISODuration(match) {\r\n    const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match;\r\n    const hasNegativePrefix = s.startsWith(\"-\");\r\n    const maybeNegate = (num) => num !== undefined && hasNegativePrefix ? -num : num;\r\n    return {\r\n        years: maybeNegate(parseInteger(yearStr)),\r\n        months: maybeNegate(parseInteger(monthStr)),\r\n        weeks: maybeNegate(parseInteger(weekStr)),\r\n        days: maybeNegate(parseInteger(dayStr)),\r\n        hours: maybeNegate(parseInteger(hourStr)),\r\n        minutes: maybeNegate(parseInteger(minuteStr)),\r\n        seconds: maybeNegate(parseInteger(secondStr)),\r\n        milliseconds: maybeNegate(parseMillis(millisecondsStr))\r\n    };\r\n}\r\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\r\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\r\n// I'm just going to ignore that\r\nconst obsOffsets = {\r\n    GMT: 0,\r\n    EDT: -4 * 60,\r\n    EST: -5 * 60,\r\n    CDT: -5 * 60,\r\n    CST: -6 * 60,\r\n    MDT: -6 * 60,\r\n    MST: -7 * 60,\r\n    PDT: -7 * 60,\r\n    PST: -8 * 60\r\n};\r\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\r\n    let weekday;\r\n    if (weekdayStr) {\r\n        weekday =\r\n            weekdayStr.length > 3\r\n                ? English.weekdaysLong.indexOf(weekdayStr) + 1\r\n                : English.weekdaysShort.indexOf(weekdayStr) + 1;\r\n    }\r\n    const year = yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr);\r\n    return {\r\n        year,\r\n        month: English.monthsShort.indexOf(monthStr) + 1,\r\n        day: parseInteger(dayStr),\r\n        hour: parseInteger(hourStr),\r\n        minute: parseInteger(minuteStr),\r\n        second: parseInteger(secondStr),\r\n        weekday\r\n    };\r\n}\r\n// RFC 2822/5322\r\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\r\nfunction extractRFC2822(match) {\r\n    const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr, obsOffset, milOffset, offHourStr, offMinuteStr] = match, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\r\n    let offset;\r\n    if (obsOffset) {\r\n        offset = obsOffsets[obsOffset];\r\n    }\r\n    else if (milOffset) {\r\n        offset = 0;\r\n    }\r\n    else {\r\n        offset = signedOffset(offHourStr, offMinuteStr);\r\n    }\r\n    return [result, new FixedOffsetZone(offset)];\r\n}\r\nfunction preprocessRFC2822(s) {\r\n    // Remove comments and folding whitespace and replace multiple-spaces with a single space\r\n    return s\r\n        .replace(/\\([^)]*\\)|[\\n\\t]/g, \" \")\r\n        .replace(/(\\s\\s+)/g, \" \")\r\n        .trim();\r\n}\r\n// http date\r\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/, rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/, ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\r\nfunction extractRFC1123Or850(match) {\r\n    const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\r\n    return [result, FixedOffsetZone.utcInstance];\r\n}\r\nfunction extractASCII(match) {\r\n    const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\r\n    return [result, FixedOffsetZone.utcInstance];\r\n}\r\nconst isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\r\nconst isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\r\nconst isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\r\nconst isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\r\nconst extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset);\r\nconst extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset);\r\nconst extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);\r\nconst extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);\r\n/**\r\n * @private\r\n */\r\nexport function parseISODate(s) {\r\n    return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);\r\n}\r\nexport function parseRFC2822Date(s) {\r\n    return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\r\n}\r\nexport function parseHTTPDate(s) {\r\n    return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);\r\n}\r\nexport function parseISODuration(s) {\r\n    const m = isoDuration.exec(s);\r\n    if (m !== null) {\r\n        return extractISODuration(m);\r\n    }\r\n    return undefined;\r\n}\r\nconst sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\r\nconst sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\r\nconst extractISOYmdTimeOffsetAndIANAZone = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);\r\nconst extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);\r\nexport function parseSQL(s) {\r\n    return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);\r\n}\r\n//# sourceMappingURL=regexParser.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/impl/regexParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 388,
    "kind": "function",
    "name": "combineRegexes",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~combineRegexes",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "regexes",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 389,
    "kind": "function",
    "name": "combineExtractors",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~combineExtractors",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "extractors",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 390,
    "kind": "function",
    "name": "parse",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~parse",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "patterns",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 391,
    "kind": "function",
    "name": "simpleParse",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~simpleParse",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "keys",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 392,
    "kind": "variable",
    "name": "offsetRegex",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~offsetRegex",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 393,
    "kind": "function",
    "name": "int",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~int",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "match",
        "types": [
          "*"
        ]
      },
      {
        "name": "pos",
        "types": [
          "*"
        ]
      },
      {
        "name": "fallback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 394,
    "kind": "function",
    "name": "extractISOYmd",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractISOYmd",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "match",
        "types": [
          "*"
        ]
      },
      {
        "name": "cursor",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 395,
    "kind": "function",
    "name": "extractISOTime",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractISOTime",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "match",
        "types": [
          "*"
        ]
      },
      {
        "name": "cursor",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 396,
    "kind": "function",
    "name": "extractISOOffset",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractISOOffset",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "match",
        "types": [
          "*"
        ]
      },
      {
        "name": "cursor",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 397,
    "kind": "function",
    "name": "extractIANAZone",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractIANAZone",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "match",
        "types": [
          "*"
        ]
      },
      {
        "name": "cursor",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 398,
    "kind": "variable",
    "name": "isoDuration",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~isoDuration",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 399,
    "kind": "function",
    "name": "extractISODuration",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractISODuration",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "match",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"years\": *, \"months\": *, \"weeks\": *, \"days\": *, \"hours\": *, \"minutes\": *, \"seconds\": *, \"milliseconds\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 400,
    "kind": "variable",
    "name": "obsOffsets",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~obsOffsets",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "{\"GMT\": *, \"EDT\": *, \"EST\": *, \"CDT\": *, \"CST\": *, \"MDT\": *, \"MST\": *, \"PDT\": *, \"PST\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 401,
    "kind": "function",
    "name": "fromStrings",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~fromStrings",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "weekdayStr",
        "types": [
          "*"
        ]
      },
      {
        "name": "yearStr",
        "types": [
          "*"
        ]
      },
      {
        "name": "monthStr",
        "types": [
          "*"
        ]
      },
      {
        "name": "dayStr",
        "types": [
          "*"
        ]
      },
      {
        "name": "hourStr",
        "types": [
          "*"
        ]
      },
      {
        "name": "minuteStr",
        "types": [
          "*"
        ]
      },
      {
        "name": "secondStr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"hour\": *, \"minute\": *, \"second\": *, \"weekday\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 402,
    "kind": "variable",
    "name": "rfc2822",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~rfc2822",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 403,
    "kind": "function",
    "name": "extractRFC2822",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractRFC2822",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "match",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 404,
    "kind": "function",
    "name": "preprocessRFC2822",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~preprocessRFC2822",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 405,
    "kind": "variable",
    "name": "rfc1123",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~rfc1123",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 406,
    "kind": "function",
    "name": "extractRFC1123Or850",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractRFC1123Or850",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "match",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 407,
    "kind": "function",
    "name": "extractASCII",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractASCII",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [
      {
        "name": "match",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 408,
    "kind": "variable",
    "name": "isoYmdWithTimeExtensionRegex",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~isoYmdWithTimeExtensionRegex",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 409,
    "kind": "variable",
    "name": "isoWeekWithTimeExtensionRegex",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~isoWeekWithTimeExtensionRegex",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 410,
    "kind": "variable",
    "name": "isoOrdinalWithTimeExtensionRegex",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~isoOrdinalWithTimeExtensionRegex",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 411,
    "kind": "variable",
    "name": "isoTimeCombinedRegex",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~isoTimeCombinedRegex",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 412,
    "kind": "variable",
    "name": "extractISOYmdTimeAndOffset",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractISOYmdTimeAndOffset",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 413,
    "kind": "variable",
    "name": "extractISOWeekTimeAndOffset",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractISOWeekTimeAndOffset",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 414,
    "kind": "variable",
    "name": "extractISOOrdinalDataAndTime",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractISOOrdinalDataAndTime",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 415,
    "kind": "variable",
    "name": "extractISOTimeAndOffset",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractISOTimeAndOffset",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 416,
    "kind": "function",
    "name": "parseISODate",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~parseISODate",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": "{parseISODate}",
    "description": "",
    "lineNumber": 165,
    "ignore": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "function",
    "name": "parseRFC2822Date",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~parseRFC2822Date",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": "{parseRFC2822Date}",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "function",
    "name": "parseHTTPDate",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~parseHTTPDate",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": "{parseHTTPDate}",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "function",
    "name": "parseISODuration",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~parseISODuration",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": "{parseISODuration}",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "variable",
    "name": "sqlYmdWithTimeExtensionRegex",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~sqlYmdWithTimeExtensionRegex",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 421,
    "kind": "variable",
    "name": "sqlTimeCombinedRegex",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~sqlTimeCombinedRegex",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 422,
    "kind": "variable",
    "name": "extractISOYmdTimeOffsetAndIANAZone",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractISOYmdTimeOffsetAndIANAZone",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 423,
    "kind": "variable",
    "name": "extractISOTimeOffsetAndIANAZone",
    "memberof": "transpiled/impl/regexParser.js",
    "static": true,
    "longname": "transpiled/impl/regexParser.js~extractISOTimeOffsetAndIANAZone",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 424,
    "kind": "function",
    "name": "parseSQL",
    "memberof": "transpiled/impl/regexParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/regexParser.js~parseSQL",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/regexParser.js",
    "importStyle": "{parseSQL}",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "file",
    "name": "transpiled/impl/tokenParser.js",
    "content": "import { parseMillis, isUndefined, untruncateYear, signedOffset } from \"./util\";\r\nimport { Formatter } from \"./formatter\";\r\nimport { FixedOffsetZone } from \"../zones/fixedOffsetZone\";\r\nimport { IANAZone } from \"../zones/IANAZone\";\r\nimport { digitRegex, parseDigits } from \"./digits\";\r\nimport { DateTime } from \"../datetime\";\r\nimport { ConflictingSpecificationError } from \"../errors\";\r\nconst MISSING_FTP = \"missing Intl.DateTimeFormat.formatToParts support\";\r\nfunction intUnit(regex, post = i => i) {\r\n    return { regex, deser: ([s]) => post(parseDigits(s)) };\r\n}\r\nconst NBSP = String.fromCharCode(160);\r\nconst spaceOrNBSP = `( |${NBSP})`;\r\nconst spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, \"g\");\r\nfunction fixListRegex(s) {\r\n    // make dots optional and also make them literal\r\n    // make space and non breakable space characters interchangeable\r\n    return s.replace(/\\./g, \"\\\\.?\").replace(spaceOrNBSPRegExp, spaceOrNBSP);\r\n}\r\nfunction stripInsensitivities(s) {\r\n    return s\r\n        .replace(/\\./g, \"\") // ignore dots that were made optional\r\n        .replace(spaceOrNBSPRegExp, \" \") // interchange space and nbsp\r\n        .toLowerCase();\r\n}\r\nfunction oneOf(strings, startIndex) {\r\n    return {\r\n        regex: RegExp(strings.map(fixListRegex).join(\"|\")),\r\n        deser: ([s]) => strings.findIndex(i => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex\r\n    };\r\n}\r\nfunction offset(regex, groups) {\r\n    return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };\r\n}\r\nfunction simple(regex) {\r\n    return { regex, deser: ([s]) => s };\r\n}\r\nfunction escapeToken(value) {\r\n    // eslint-disable-next-line no-useless-escape\r\n    return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\r\n}\r\nfunction unitForToken(token, loc) {\r\n    const one = digitRegex(loc), two = digitRegex(loc, \"{2}\"), three = digitRegex(loc, \"{3}\"), four = digitRegex(loc, \"{4}\"), six = digitRegex(loc, \"{6}\"), oneOrTwo = digitRegex(loc, \"{1,2}\"), oneToThree = digitRegex(loc, \"{1,3}\"), oneToSix = digitRegex(loc, \"{1,6}\"), oneToNine = digitRegex(loc, \"{1,9}\"), twoToFour = digitRegex(loc, \"{2,4}\"), fourToSix = digitRegex(loc, \"{4,6}\"), literal = (t) => ({\r\n        regex: RegExp(escapeToken(t.val)),\r\n        deser: ([s]) => s,\r\n        literal: true\r\n    }), unitate = (t) => {\r\n        if (token.literal) {\r\n            return literal(t);\r\n        }\r\n        switch (t.val) {\r\n            // era\r\n            case \"G\":\r\n                return oneOf(loc.eras(\"short\", false), 0);\r\n            case \"GG\":\r\n                return oneOf(loc.eras(\"long\", false), 0);\r\n            // years\r\n            case \"y\":\r\n                return intUnit(oneToSix);\r\n            case \"yy\":\r\n                return intUnit(twoToFour, untruncateYear);\r\n            case \"yyyy\":\r\n                return intUnit(four);\r\n            case \"yyyyy\":\r\n                return intUnit(fourToSix);\r\n            case \"yyyyyy\":\r\n                return intUnit(six);\r\n            // months\r\n            case \"M\":\r\n                return intUnit(oneOrTwo);\r\n            case \"MM\":\r\n                return intUnit(two);\r\n            case \"MMM\":\r\n                return oneOf(loc.months(\"short\", true, false), 1);\r\n            case \"MMMM\":\r\n                return oneOf(loc.months(\"long\", true, false), 1);\r\n            case \"L\":\r\n                return intUnit(oneOrTwo);\r\n            case \"LL\":\r\n                return intUnit(two);\r\n            case \"LLL\":\r\n                return oneOf(loc.months(\"short\", false, false), 1);\r\n            case \"LLLL\":\r\n                return oneOf(loc.months(\"long\", false, false), 1);\r\n            // dates\r\n            case \"d\":\r\n                return intUnit(oneOrTwo);\r\n            case \"dd\":\r\n                return intUnit(two);\r\n            // ordinals\r\n            case \"o\":\r\n                return intUnit(oneToThree);\r\n            case \"ooo\":\r\n                return intUnit(three);\r\n            // time\r\n            case \"HH\":\r\n                return intUnit(two);\r\n            case \"H\":\r\n                return intUnit(oneOrTwo);\r\n            case \"hh\":\r\n                return intUnit(two);\r\n            case \"h\":\r\n                return intUnit(oneOrTwo);\r\n            case \"mm\":\r\n                return intUnit(two);\r\n            case \"m\":\r\n                return intUnit(oneOrTwo);\r\n            case \"q\":\r\n                return intUnit(oneOrTwo);\r\n            case \"qq\":\r\n                return intUnit(two);\r\n            case \"s\":\r\n                return intUnit(oneOrTwo);\r\n            case \"ss\":\r\n                return intUnit(two);\r\n            case \"S\":\r\n                return intUnit(oneToThree);\r\n            case \"SSS\":\r\n                return intUnit(three);\r\n            case \"u\":\r\n                return simple(oneToNine);\r\n            // meridiem\r\n            case \"a\":\r\n                return oneOf(loc.meridiems(), 0);\r\n            // weekYear (k)\r\n            case \"kkkk\":\r\n                return intUnit(four);\r\n            case \"kk\":\r\n                return intUnit(twoToFour, untruncateYear);\r\n            // weekNumber (W)\r\n            case \"W\":\r\n                return intUnit(oneOrTwo);\r\n            case \"WW\":\r\n                return intUnit(two);\r\n            // weekdays\r\n            case \"E\":\r\n            case \"c\":\r\n                return intUnit(one);\r\n            case \"EEE\":\r\n                return oneOf(loc.weekdays(\"short\", false, false), 1);\r\n            case \"EEEE\":\r\n                return oneOf(loc.weekdays(\"long\", false, false), 1);\r\n            case \"ccc\":\r\n                return oneOf(loc.weekdays(\"short\", true, false), 1);\r\n            case \"cccc\":\r\n                return oneOf(loc.weekdays(\"long\", true, false), 1);\r\n            // offset/zone\r\n            case \"Z\":\r\n            case \"ZZ\":\r\n                return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);\r\n            case \"ZZZ\":\r\n                return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);\r\n            // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\r\n            // because we don't have any way to figure out what they are\r\n            case \"z\":\r\n                return simple(/[a-z_+-/]{1,256}?/i);\r\n            default:\r\n                return literal(t);\r\n        }\r\n    };\r\n    const unit = unitate(token);\r\n    if (unit === null) {\r\n        return {\r\n            invalidReason: MISSING_FTP\r\n        };\r\n    }\r\n    return Object.assign(Object.assign({}, unit), { token });\r\n}\r\nconst partTypeStyleToTokenVal = {\r\n    literal: undefined,\r\n    dayPeriod: undefined,\r\n    era: undefined,\r\n    timeZoneName: undefined,\r\n    year: {\r\n        \"2-digit\": \"yy\",\r\n        numeric: \"yyyyy\"\r\n    },\r\n    month: {\r\n        numeric: \"M\",\r\n        \"2-digit\": \"MM\",\r\n        short: \"MMM\",\r\n        long: \"MMMM\"\r\n    },\r\n    day: {\r\n        numeric: \"d\",\r\n        \"2-digit\": \"dd\"\r\n    },\r\n    weekday: {\r\n        short: \"EEE\",\r\n        long: \"EEEE\"\r\n    },\r\n    hour: {\r\n        numeric: \"h\",\r\n        \"2-digit\": \"hh\"\r\n    },\r\n    minute: {\r\n        numeric: \"m\",\r\n        \"2-digit\": \"mm\"\r\n    },\r\n    second: {\r\n        numeric: \"s\",\r\n        \"2-digit\": \"ss\"\r\n    }\r\n};\r\nfunction tokenForPart(part, formatOptions) {\r\n    const { type, value } = part;\r\n    if (type === \"literal\") {\r\n        return {\r\n            literal: true,\r\n            val: value\r\n        };\r\n    }\r\n    if (type === \"dayPeriod\") {\r\n        return {\r\n            literal: false,\r\n            val: \"a\"\r\n        };\r\n    }\r\n    const tokenVals = partTypeStyleToTokenVal[type];\r\n    if (tokenVals !== undefined) {\r\n        const style = formatOptions[type];\r\n        if (style) {\r\n            const val = tokenVals[style];\r\n            if (val !== undefined) {\r\n                return {\r\n                    literal: false,\r\n                    val\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction buildRegex(units) {\r\n    const re = units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, \"\");\r\n    return `^${re}$`;\r\n}\r\nfunction match(input, regex, handlers) {\r\n    const matches = regex.exec(input);\r\n    const all = {};\r\n    if (matches !== null) {\r\n        let matchIndex = 1;\r\n        handlers.forEach(h => {\r\n            const groups = h.groups ? h.groups + 1 : 1;\r\n            if (!h.literal) {\r\n                all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\r\n            }\r\n            matchIndex += groups;\r\n        });\r\n    }\r\n    return [matches, all];\r\n}\r\nfunction dateTimeFromMatches(matches) {\r\n    const toField = (token) => {\r\n        switch (token) {\r\n            case \"S\":\r\n                return \"millisecond\";\r\n            case \"s\":\r\n                return \"second\";\r\n            case \"m\":\r\n                return \"minute\";\r\n            case \"h\":\r\n            case \"H\":\r\n                return \"hour\";\r\n            case \"d\":\r\n                return \"day\";\r\n            case \"o\":\r\n                return \"ordinal\";\r\n            case \"L\":\r\n            case \"M\":\r\n                return \"month\";\r\n            case \"y\":\r\n                return \"year\";\r\n            case \"E\":\r\n            case \"c\":\r\n                return \"weekday\";\r\n            case \"W\":\r\n                return \"weekNumber\";\r\n            case \"k\":\r\n                return \"weekYear\";\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n    let zone;\r\n    if (!isUndefined(matches.Z)) {\r\n        zone = new FixedOffsetZone(matches.Z);\r\n    }\r\n    else if (!isUndefined(matches.z)) {\r\n        zone = IANAZone.create(matches.z);\r\n    }\r\n    else {\r\n        zone = null;\r\n    }\r\n    if (!isUndefined(matches.q)) {\r\n        matches.M = (matches.q - 1) * 3 + 1;\r\n    }\r\n    if (!isUndefined(matches.h)) {\r\n        if (matches.h < 12 && matches.a === 1) {\r\n            matches.h = matches.h + 12;\r\n        }\r\n        else if (matches.h === 12 && matches.a === 0) {\r\n            matches.h = 0;\r\n        }\r\n    }\r\n    if (matches.G === 0 && matches.y) {\r\n        matches.y = -matches.y;\r\n    }\r\n    if (!isUndefined(matches.u)) {\r\n        matches.S = parseMillis(matches.u) || 0;\r\n    }\r\n    const vals = Object.keys(matches).reduce((r, k) => {\r\n        const f = toField(k);\r\n        if (f) {\r\n            r[f] = matches[k];\r\n        }\r\n        return r;\r\n    }, {});\r\n    return [vals, zone];\r\n}\r\nlet dummyDateTimeCache;\r\nfunction getDummyDateTime() {\r\n    if (dummyDateTimeCache === undefined) {\r\n        dummyDateTimeCache = DateTime.fromMillis(1555555555555);\r\n    }\r\n    return dummyDateTimeCache;\r\n}\r\nfunction maybeExpandMacroToken(token, locale) {\r\n    if (token.literal) {\r\n        return token;\r\n    }\r\n    const formatOpts = Formatter.macroTokenToFormatOpts(token.val);\r\n    if (!formatOpts) {\r\n        return token;\r\n    }\r\n    const formatter = Formatter.create(locale, formatOpts);\r\n    const parts = formatter.formatDateTimeParts(getDummyDateTime());\r\n    const tokens = parts.map(p => tokenForPart(p, formatOpts));\r\n    if (tokens.indexOf(undefined) >= 0) {\r\n        return token;\r\n    }\r\n    return tokens;\r\n}\r\nfunction expandMacroTokens(tokens, locale) {\r\n    return Array.prototype.concat(...tokens.map(t => maybeExpandMacroToken(t, locale)));\r\n}\r\nfunction isInvalidUnitParser(parser) {\r\n    return !!parser && !!parser.invalidReason;\r\n}\r\n/**\r\n * @private\r\n */\r\nexport function explainFromTokens(locale, input, format) {\r\n    const tokens = expandMacroTokens(Formatter.parseFormat(format), locale), units = tokens.map(t => unitForToken(t, locale)), disqualifyingUnit = units.find(isInvalidUnitParser);\r\n    if (disqualifyingUnit) {\r\n        return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };\r\n    }\r\n    else {\r\n        const regexString = buildRegex(units), regex = RegExp(regexString, \"i\"), [rawMatches, matches] = match(input, regex, units), [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];\r\n        if (\"a\" in matches && \"H\" in matches) {\r\n            throw new ConflictingSpecificationError(\"Can't include meridiem when specifying 24-hour format\");\r\n        }\r\n        return { input, tokens, regex, rawMatches, matches, result, zone };\r\n    }\r\n}\r\nexport function parseFromTokens(locale, input, format) {\r\n    const { result, zone, invalidReason } = explainFromTokens(locale, input, format);\r\n    return [result, zone, invalidReason];\r\n}\r\n//# sourceMappingURL=tokenParser.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/impl/tokenParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 426,
    "kind": "variable",
    "name": "MISSING_FTP",
    "memberof": "transpiled/impl/tokenParser.js",
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~MISSING_FTP",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 427,
    "kind": "function",
    "name": "intUnit",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~intUnit",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "regex",
        "types": [
          "*"
        ]
      },
      {
        "name": "post",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"regex\": *, \"deser\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 428,
    "kind": "variable",
    "name": "NBSP",
    "memberof": "transpiled/impl/tokenParser.js",
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~NBSP",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 429,
    "kind": "variable",
    "name": "spaceOrNBSP",
    "memberof": "transpiled/impl/tokenParser.js",
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~spaceOrNBSP",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 430,
    "kind": "variable",
    "name": "spaceOrNBSPRegExp",
    "memberof": "transpiled/impl/tokenParser.js",
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~spaceOrNBSPRegExp",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 431,
    "kind": "function",
    "name": "fixListRegex",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~fixListRegex",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 432,
    "kind": "function",
    "name": "stripInsensitivities",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~stripInsensitivities",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 433,
    "kind": "function",
    "name": "oneOf",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~oneOf",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "strings",
        "types": [
          "*"
        ]
      },
      {
        "name": "startIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"regex\": *, \"deser\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 434,
    "kind": "function",
    "name": "offset",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~offset",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "regex",
        "types": [
          "*"
        ]
      },
      {
        "name": "groups",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"regex\": *, \"deser\": *, \"groups\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 435,
    "kind": "function",
    "name": "simple",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~simple",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "regex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"regex\": *, \"deser\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 436,
    "kind": "function",
    "name": "escapeToken",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~escapeToken",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 437,
    "kind": "function",
    "name": "unitForToken",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~unitForToken",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      },
      {
        "name": "loc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 438,
    "kind": "variable",
    "name": "partTypeStyleToTokenVal",
    "memberof": "transpiled/impl/tokenParser.js",
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~partTypeStyleToTokenVal",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "type": {
      "types": [
        "{\"literal\": *, \"dayPeriod\": *, \"era\": *, \"timeZoneName\": *, \"year\": *, \"month\": *, \"day\": *, \"weekday\": *, \"hour\": *, \"minute\": *, \"second\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 439,
    "kind": "function",
    "name": "tokenForPart",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~tokenForPart",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "params": [
      {
        "name": "part",
        "types": [
          "*"
        ]
      },
      {
        "name": "formatOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 440,
    "kind": "function",
    "name": "buildRegex",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~buildRegex",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "params": [
      {
        "name": "units",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 441,
    "kind": "function",
    "name": "match",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~match",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      },
      {
        "name": "regex",
        "types": [
          "*"
        ]
      },
      {
        "name": "handlers",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 442,
    "kind": "function",
    "name": "dateTimeFromMatches",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~dateTimeFromMatches",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 253,
    "undocument": true,
    "params": [
      {
        "name": "matches",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 443,
    "kind": "function",
    "name": "getDummyDateTime",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~getDummyDateTime",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 322,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 444,
    "kind": "function",
    "name": "maybeExpandMacroToken",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~maybeExpandMacroToken",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      },
      {
        "name": "locale",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 445,
    "kind": "function",
    "name": "expandMacroTokens",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~expandMacroTokens",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 344,
    "undocument": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      },
      {
        "name": "locale",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 446,
    "kind": "function",
    "name": "isInvalidUnitParser",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~isInvalidUnitParser",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 347,
    "undocument": true,
    "params": [
      {
        "name": "parser",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 447,
    "kind": "function",
    "name": "explainFromTokens",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~explainFromTokens",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": "{explainFromTokens}",
    "description": "",
    "lineNumber": 353,
    "ignore": true,
    "params": [
      {
        "name": "locale",
        "types": [
          "*"
        ]
      },
      {
        "name": "input",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"input\": *, \"tokens\": *, \"regex\": *, \"rawMatches\": *, \"matches\": *, \"result\": *, \"zone\": *}"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "function",
    "name": "parseFromTokens",
    "memberof": "transpiled/impl/tokenParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/tokenParser.js~parseFromTokens",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/tokenParser.js",
    "importStyle": "{parseFromTokens}",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "params": [
      {
        "name": "locale",
        "types": [
          "*"
        ]
      },
      {
        "name": "input",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "file",
    "name": "transpiled/impl/util.js",
    "content": "/*\r\n This is just a junk drawer, containing anything used across multiple classes.\r\n Because Luxon is small(ish), this should stay small and we won't worry about splitting\r\n it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\r\n */\r\nimport { InvalidArgumentError } from \"../errors\";\r\n/**\r\n * @private\r\n */\r\n// TYPES\r\nexport function isUndefined(o) {\r\n    return typeof o === \"undefined\";\r\n}\r\nexport function isNumber(o) {\r\n    return typeof o === \"number\";\r\n}\r\nexport function isInteger(o) {\r\n    return typeof o === \"number\" && o % 1 === 0;\r\n}\r\nexport function isString(o) {\r\n    return typeof o === \"string\";\r\n}\r\nexport function isDate(o) {\r\n    return Object.prototype.toString.call(o) === \"[object Date]\";\r\n}\r\n// CAPABILITIES\r\nexport function hasIntl() {\r\n    try {\r\n        return typeof Intl !== \"undefined\" && !!Intl.DateTimeFormat;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\nexport function hasFormatToParts() {\r\n    return !isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\r\n}\r\nexport function hasRelative() {\r\n    try {\r\n        return typeof Intl !== \"undefined\" && !!Intl.RelativeTimeFormat;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n// OBJECTS AND ARRAYS\r\nexport function maybeArray(thing) {\r\n    return Array.isArray(thing) ? thing : [thing];\r\n}\r\nexport function bestBy(arr, by, compare) {\r\n    const bestResult = arr.reduce((best, next) => {\r\n        const pair = [by(next), next];\r\n        if (best === undefined) {\r\n            return pair;\r\n        }\r\n        else if (compare(best[0], pair[0]) === best[0]) {\r\n            return best;\r\n        }\r\n        else {\r\n            return pair;\r\n        }\r\n    }, undefined);\r\n    if (bestResult === undefined) {\r\n        throw new InvalidArgumentError(\"bestBy expects a non empty array\");\r\n    }\r\n    return bestResult[1];\r\n}\r\nexport function pick(obj, keys) {\r\n    return keys.reduce((a, k) => {\r\n        a[k] = obj[k];\r\n        return a;\r\n    }, {});\r\n}\r\n// NUMBERS AND STRINGS\r\nexport function integerBetween(thing, bottom, top) {\r\n    return isInteger(thing) && thing >= bottom && thing <= top;\r\n}\r\n// x % n but takes the sign of n instead of x\r\nexport function floorMod(x, n) {\r\n    return x - n * Math.floor(x / n);\r\n}\r\nexport function padStart(input, n = 2) {\r\n    if (input.toString().length < n) {\r\n        return (\"0\".repeat(n) + input).slice(-n);\r\n    }\r\n    else {\r\n        return input.toString();\r\n    }\r\n}\r\nexport function parseInteger(text) {\r\n    if (isUndefined(text) || text === null || text === \"\") {\r\n        return undefined;\r\n    }\r\n    else {\r\n        return parseInt(text, 10);\r\n    }\r\n}\r\nexport function parseMillis(fraction) {\r\n    // Return undefined (instead of 0) in these cases, where fraction is not set\r\n    if (isUndefined(fraction) || fraction === null || fraction === \"\") {\r\n        return undefined;\r\n    }\r\n    else {\r\n        const f = parseFloat(\"0.\" + fraction) * 1000;\r\n        return Math.floor(f);\r\n    }\r\n}\r\nexport function roundTo(value, digits, towardZero = false) {\r\n    const factor = Math.pow(10, digits), rounder = towardZero ? Math.trunc : Math.round;\r\n    return rounder(value * factor) / factor;\r\n}\r\n// DATE BASICS\r\nexport function isLeapYear(year) {\r\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\r\n}\r\nexport function daysInYear(year) {\r\n    return isLeapYear(year) ? 366 : 365;\r\n}\r\nexport function daysInMonth(year, month) {\r\n    const modMonth = floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;\r\n    return [31, isLeapYear(modYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\r\n}\r\n// convert a calendar object to a local timestamp (epoch, but with the offset baked in)\r\nexport function objToLocalTS(obj) {\r\n    const ts = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond);\r\n    // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\r\n    if (integerBetween(obj.year, 0, 99)) {\r\n        const date = new Date(ts);\r\n        date.setUTCFullYear(date.getUTCFullYear() - 1900);\r\n        return date.getTime();\r\n    }\r\n    return ts;\r\n}\r\nexport function weeksInWeekYear(weekYear) {\r\n    const p1 = (weekYear +\r\n        Math.floor(weekYear / 4) -\r\n        Math.floor(weekYear / 100) +\r\n        Math.floor(weekYear / 400)) %\r\n        7, last = weekYear - 1, p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\r\n    return p1 === 4 || p2 === 3 ? 53 : 52;\r\n}\r\nexport function untruncateYear(year) {\r\n    if (year > 99) {\r\n        return year;\r\n    }\r\n    else {\r\n        return year > 60 ? 1900 + year : 2000 + year;\r\n    }\r\n}\r\n// PARSING\r\nexport function parseZoneInfo(ts, offsetFormat, locale, timeZone) {\r\n    const date = new Date(ts), intlOptions = {\r\n        hour12: false,\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n        timeZone\r\n    };\r\n    const modified = Object.assign({ timeZoneName: offsetFormat }, intlOptions), intl = hasIntl();\r\n    if (intl && hasFormatToParts()) {\r\n        const parsed = new Intl.DateTimeFormat(locale, modified)\r\n            .formatToParts(date)\r\n            .find(m => m.type.toLowerCase() === \"timezonename\");\r\n        return parsed ? parsed.value : null;\r\n    }\r\n    else if (intl) {\r\n        // this probably doesn't work for all locales\r\n        const without = new Intl.DateTimeFormat(locale, intlOptions).format(date), included = new Intl.DateTimeFormat(locale, modified).format(date), diffed = included.substring(without.length);\r\n        return diffed.replace(/^[, \\u200e]+/, \"\");\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n// signedOffset('-5', '30') -> -330\r\nexport function signedOffset(offHourStr, offMinuteStr) {\r\n    let offHour = parseInt(offHourStr, 10);\r\n    // don't || this because we want to preserve -0\r\n    if (Number.isNaN(offHour)) {\r\n        offHour = 0;\r\n    }\r\n    const offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;\r\n    return offHour * 60 + offMinSigned;\r\n}\r\n// COERCION\r\nexport function asNumber(value) {\r\n    const numericValue = Number(value);\r\n    if (typeof value === \"boolean\" || value === \"\" || Number.isNaN(numericValue)) {\r\n        throw new InvalidArgumentError(`Invalid unit value ${value}`);\r\n    }\r\n    return numericValue;\r\n}\r\nexport function normalizeObject(obj, normalizer) {\r\n    return Object.keys(obj).reduce((normalized, key) => {\r\n        const value = obj[key];\r\n        if (value !== undefined && value !== null) {\r\n            normalized[normalizer(key)] = asNumber(value);\r\n        }\r\n        return normalized;\r\n    }, {});\r\n}\r\nexport function formatOffset(offset, format) {\r\n    const hours = Math.trunc(Math.abs(offset / 60)), minutes = Math.trunc(Math.abs(offset % 60)), sign = offset >= 0 ? \"+\" : \"-\";\r\n    switch (format) {\r\n        case \"short\":\r\n            return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;\r\n        case \"narrow\":\r\n            return `${sign}${hours}${minutes > 0 ? `:${minutes}` : \"\"}`;\r\n        case \"techie\":\r\n            return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;\r\n        default:\r\n            throw new RangeError(`Value format ${format} is out of range for property format`);\r\n    }\r\n}\r\nexport function timeObject(obj) {\r\n    return pick(obj, [\"hour\", \"minute\", \"second\", \"millisecond\"]);\r\n}\r\nexport const IANA_REGEX = /[A-Za-z_+-]{1,256}(:?\\/[A-Za-z_+-]{1,256}(\\/[A-Za-z_+-]{1,256})?)?/;\r\n//# sourceMappingURL=util.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/impl/util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 450,
    "kind": "function",
    "name": "isUndefined",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~isUndefined",
    "access": "private",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{isUndefined}",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "function",
    "name": "isNumber",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~isNumber",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{isNumber}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "function",
    "name": "isInteger",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~isInteger",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{isInteger}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "function",
    "name": "isString",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~isString",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{isString}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "function",
    "name": "isDate",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~isDate",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{isDate}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "function",
    "name": "hasIntl",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~hasIntl",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{hasIntl}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "function",
    "name": "hasFormatToParts",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~hasFormatToParts",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{hasFormatToParts}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "function",
    "name": "hasRelative",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~hasRelative",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{hasRelative}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "function",
    "name": "maybeArray",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~maybeArray",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{maybeArray}",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "thing",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "function",
    "name": "bestBy",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~bestBy",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{bestBy}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      },
      {
        "name": "by",
        "types": [
          "*"
        ]
      },
      {
        "name": "compare",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 460,
    "kind": "function",
    "name": "pick",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~pick",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{pick}",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "keys",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "function",
    "name": "integerBetween",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~integerBetween",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{integerBetween}",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "thing",
        "types": [
          "*"
        ]
      },
      {
        "name": "bottom",
        "types": [
          "*"
        ]
      },
      {
        "name": "top",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "function",
    "name": "floorMod",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~floorMod",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{floorMod}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "function",
    "name": "padStart",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~padStart",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{padStart}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 2,
        "defaultValue": "2"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "function",
    "name": "parseInteger",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~parseInteger",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{parseInteger}",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "function",
    "name": "parseMillis",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~parseMillis",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{parseMillis}",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "fraction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "function",
    "name": "roundTo",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~roundTo",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{roundTo}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "digits",
        "types": [
          "*"
        ]
      },
      {
        "name": "towardZero",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "function",
    "name": "isLeapYear",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~isLeapYear",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{isLeapYear}",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "year",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "function",
    "name": "daysInYear",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~daysInYear",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{daysInYear}",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "year",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "function",
    "name": "daysInMonth",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~daysInMonth",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{daysInMonth}",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "year",
        "types": [
          "*"
        ]
      },
      {
        "name": "month",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "function",
    "name": "objToLocalTS",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~objToLocalTS",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{objToLocalTS}",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "function",
    "name": "weeksInWeekYear",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~weeksInWeekYear",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{weeksInWeekYear}",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "weekYear",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "function",
    "name": "untruncateYear",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~untruncateYear",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{untruncateYear}",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "year",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "function",
    "name": "parseZoneInfo",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~parseZoneInfo",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{parseZoneInfo}",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      },
      {
        "name": "offsetFormat",
        "types": [
          "*"
        ]
      },
      {
        "name": "locale",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeZone",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "function",
    "name": "signedOffset",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~signedOffset",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{signedOffset}",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [
      {
        "name": "offHourStr",
        "types": [
          "*"
        ]
      },
      {
        "name": "offMinuteStr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "function",
    "name": "asNumber",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~asNumber",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{asNumber}",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "function",
    "name": "normalizeObject",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~normalizeObject",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{normalizeObject}",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "normalizer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "function",
    "name": "formatOffset",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~formatOffset",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{formatOffset}",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [
      {
        "name": "offset",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 478,
    "kind": "function",
    "name": "timeObject",
    "memberof": "transpiled/impl/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/util.js~timeObject",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{timeObject}",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "variable",
    "name": "IANA_REGEX",
    "memberof": "transpiled/impl/util.js",
    "static": true,
    "longname": "transpiled/impl/util.js~IANA_REGEX",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/util.js",
    "importStyle": "{IANA_REGEX}",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "file",
    "name": "transpiled/impl/zoneUtil.js",
    "content": "/**\r\n * @private\r\n */\r\nimport { Zone } from \"../zone\";\r\nimport { IANAZone } from \"../zones/IANAZone\";\r\nimport { FixedOffsetZone } from \"../zones/fixedOffsetZone\";\r\nimport { SystemZone } from \"../zones/systemZone\";\r\nimport { InvalidZoneError } from \"../errors\";\r\nimport { isUndefined, isString, isNumber } from \"./util\";\r\nexport const normalizeZone = (input, defaultZone) => {\r\n    if (isUndefined(input) || input === null) {\r\n        return defaultZone;\r\n    }\r\n    if (input instanceof Zone) {\r\n        return input;\r\n    }\r\n    if (isString(input)) {\r\n        const lowered = input.toLowerCase();\r\n        if (lowered === \"default\") {\r\n            return defaultZone;\r\n        }\r\n        if (lowered === \"system\") {\r\n            return SystemZone.instance;\r\n        }\r\n        if (lowered === \"utc\") {\r\n            return FixedOffsetZone.utcInstance;\r\n        }\r\n        const offset = IANAZone.parseGMTOffset(input);\r\n        if (offset != null) {\r\n            // handle Etc/GMT-4, which V8 chokes on\r\n            return FixedOffsetZone.instance(offset);\r\n        }\r\n        if (IANAZone.isValidSpecifier(lowered)) {\r\n            return IANAZone.create(input);\r\n        }\r\n        const fixed = FixedOffsetZone.parseSpecifier(lowered);\r\n        if (fixed !== null) {\r\n            return fixed;\r\n        }\r\n        throw new InvalidZoneError(input);\r\n    }\r\n    if (isNumber(input)) {\r\n        return FixedOffsetZone.instance(input);\r\n    }\r\n    throw new InvalidZoneError(input);\r\n};\r\n//# sourceMappingURL=zoneUtil.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/impl/zoneUtil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 481,
    "kind": "function",
    "name": "normalizeZone",
    "memberof": "transpiled/impl/zoneUtil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/impl/zoneUtil.js~normalizeZone",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/impl/zoneUtil.js",
    "importStyle": "{normalizeZone}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultZone",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "file",
    "name": "transpiled/info.js",
    "content": "import { DateTime } from \"./datetime\";\r\nimport { Settings } from \"./settings\";\r\nimport { Locale } from \"./impl/locale\";\r\nimport { IANAZone } from \"./zones/IANAZone\";\r\nimport { normalizeZone } from \"./impl/zoneUtil\";\r\nimport { hasFormatToParts, hasIntl, hasRelative } from \"./impl/util\";\r\n/**\r\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\r\n */\r\nexport class Info {\r\n    /**\r\n     * Return whether the specified zone contains a DST.\r\n     * @param {string|Zone|number} [zone='default'] - Zone to check. Defaults to the system's time zone, unless overriden in Settings.defaultZone\r\n     * @return {boolean}\r\n     */\r\n    static hasDST(zone) {\r\n        const zoneObj = normalizeZone(zone, Settings.defaultZone);\r\n        if (!zoneObj.isValid) {\r\n            return false;\r\n        }\r\n        const proto = DateTime.now()\r\n            .setZone(zoneObj)\r\n            .set({ month: 12 });\r\n        return !zoneObj.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;\r\n    }\r\n    /**\r\n     * Return whether the specified zone is a valid IANA specifier.\r\n     * @param {string} zone - Zone to check\r\n     * @return {boolean}\r\n     */\r\n    static isValidIANAZone(zone) {\r\n        return IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);\r\n    }\r\n    /**\r\n     * Converts the input into a {@link Zone} instance.\r\n     *\r\n     * * If `input` is already a Zone instance, it is returned unchanged.\r\n     * * If `input` is a string containing a valid IANA time zone name, a Zone instance\r\n     *   with that name is returned.\r\n     * * If `input` is the string \"system\", the system's time zone is returned.\r\n     * * If `input` is the string \"default\", the default time zone, as defined in\r\n     *   Settings.defaultZone is returned.\r\n     * * If `input` is a string that doesn't refer to a known time zone, a Zone\r\n     *   instance with {@link Zone.isValid} == false is returned.\r\n     * * If `input is a number, a Zone instance with the specified fixed offset\r\n     *   in minutes is returned.\r\n     * * If `input` is `null` or `undefined`, the default zone is returned.\r\n     * @param {string|Zone|number} [input] - the value to be converted\r\n     * @return {Zone}\r\n     */\r\n    static normalizeZone(input) {\r\n        return normalizeZone(input, Settings.defaultZone);\r\n    }\r\n    /**\r\n     * Return an array of standalone month names.\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\r\n     * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\r\n     * @param {Object} options - options\r\n     * @param {string} [options.locale] - the locale code\r\n     * @param {string} [options.numberingSystem] - the numbering system\r\n     * @param {string} [options.outputCalendar='gregory'] - the calendar\r\n     * @example Info.months()[0] //=> 'January'\r\n     * @example Info.months('short')[0] //=> 'Jan'\r\n     * @example Info.months('numeric')[0] //=> '1'\r\n     * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\r\n     * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\r\n     * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\r\n     * @return {[string]}\r\n     */\r\n    static months(length = \"long\", { locale, numberingSystem, outputCalendar = \"gregory\" } = {}) {\r\n        return Locale.create(locale, numberingSystem, outputCalendar).months(length);\r\n    }\r\n    /**\r\n     * Return an array of format month names.\r\n     * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\r\n     * changes the string.\r\n     * See {@link Info#months}\r\n     * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\r\n     * @param {Object} options - options\r\n     * @param {string} [options.locale] - the locale code\r\n     * @param {string} [options.numberingSystem] - the numbering system\r\n     * @param {string} [options.outputCalendar='gregory'] - the calendar\r\n     * @return {[string]}\r\n     */\r\n    static monthsFormat(length = \"long\", { locale, numberingSystem, outputCalendar = \"gregory\" } = {}) {\r\n        return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);\r\n    }\r\n    /**\r\n     * Return an array of standalone week names.\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\r\n     * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\r\n     * @param {Object} options - options\r\n     * @param {string} [options.locale] - the locale code\r\n     * @param {string} [options.numberingSystem] - the numbering system\r\n     * @example Info.weekdays()[0] //=> 'Monday'\r\n     * @example Info.weekdays('short')[0] //=> 'Mon'\r\n     * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\r\n     * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\r\n     * @return {[string]}\r\n     */\r\n    static weekdays(length = \"long\", { locale, numberingSystem } = {}) {\r\n        return Locale.create(locale, numberingSystem).weekdays(length);\r\n    }\r\n    /**\r\n     * Return an array of format week names.\r\n     * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\r\n     * changes the string.\r\n     * See {@link Info#weekdays}\r\n     * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\r\n     * @param {Object} options - options\r\n     * @param {string} [options.locale] - the locale code\r\n     * @param {string} [options.numberingSystem] - the numbering system\r\n     * @return {[string]}\r\n     */\r\n    static weekdaysFormat(length = \"long\", { locale, numberingSystem } = {}) {\r\n        return Locale.create(locale, numberingSystem).weekdays(length, true);\r\n    }\r\n    /**\r\n     * Return an array of meridiems.\r\n     * @param {Object} options - options\r\n     * @param {string} [options.locale] - the locale code\r\n     * @example Info.meridiems() //=> [ 'AM', 'PM' ]\r\n     * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]\r\n     * @return {[string]}\r\n     */\r\n    static meridiems({ locale } = {}) {\r\n        return Locale.create(locale).meridiems();\r\n    }\r\n    /**\r\n     * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\r\n     * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\r\n     * @param {Object} options - options\r\n     * @param {string} [options.locale] - the locale code\r\n     * @example Info.eras() //=> [ 'BC', 'AD' ]\r\n     * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\r\n     * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\r\n     * @return {[string]}\r\n     */\r\n    static eras(length = \"short\", { locale } = {}) {\r\n        return Locale.create(locale, undefined, \"gregory\").eras(length);\r\n    }\r\n    /**\r\n     * Return the set of available features in this environment.\r\n     * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\r\n     * Keys:\r\n     * * `zones`: whether this environment supports IANA timezones\r\n     * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\r\n     * * `intl`: whether this environment supports general internationalization\r\n     * * `relative`: whether this environment supports relative time formatting\r\n     * @example Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }\r\n     * @return {Object}\r\n     */\r\n    static features() {\r\n        let intl = false, intlTokens = false, zones = false, relative = false;\r\n        if (hasIntl()) {\r\n            intl = true;\r\n            intlTokens = hasFormatToParts();\r\n            relative = hasRelative();\r\n            try {\r\n                zones =\r\n                    new Intl.DateTimeFormat(\"en\", { timeZone: \"America/New_York\" }).resolvedOptions()\r\n                        .timeZone === \"America/New_York\";\r\n            }\r\n            catch (e) {\r\n                zones = false;\r\n            }\r\n        }\r\n        return { intl, intlTokens, zones, relative };\r\n    }\r\n}\r\n//# sourceMappingURL=info.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/info.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 483,
    "kind": "class",
    "name": "Info",
    "memberof": "transpiled/info.js",
    "static": true,
    "longname": "transpiled/info.js~Info",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/info.js",
    "importStyle": "{Info}",
    "description": "The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "hasDST",
    "memberof": "transpiled/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/info.js~Info.hasDST",
    "access": "public",
    "description": "Return whether the specified zone contains a DST.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Zone",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "zone",
        "description": "Zone to check. Defaults to the system's time zone, unless overriden in Settings.defaultZone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 485,
    "kind": "method",
    "name": "isValidIANAZone",
    "memberof": "transpiled/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/info.js~Info.isValidIANAZone",
    "access": "public",
    "description": "Return whether the specified zone is a valid IANA specifier.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "zone",
        "description": "Zone to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "normalizeZone",
    "memberof": "transpiled/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/info.js~Info.normalizeZone",
    "access": "public",
    "description": "Converts the input into a {@link Zone} instance.\n\n* If `input` is already a Zone instance, it is returned unchanged.\n* If `input` is a string containing a valid IANA time zone name, a Zone instance\n  with that name is returned.\n* If `input` is the string \"system\", the system's time zone is returned.\n* If `input` is the string \"default\", the default time zone, as defined in\n  Settings.defaultZone is returned.\n* If `input` is a string that doesn't refer to a known time zone, a Zone\n  instance with {@link Zone.isValid} == false is returned.\n* If `input is a number, a Zone instance with the specified fixed offset\n  in minutes is returned.\n* If `input` is `null` or `undefined`, the default zone is returned.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Zone",
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "input",
        "description": "the value to be converted"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Zone"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "months",
    "memberof": "transpiled/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/info.js~Info.months",
    "access": "public",
    "description": "Return an array of standalone month names.",
    "examples": [
      "Info.months()[0] //=> 'January'",
      "Info.months('short')[0] //=> 'Jan'",
      "Info.months('numeric')[0] //=> '1'",
      "Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'",
      "Info.months('numeric', { locale: 'ar' })[0] //=> '١'",
      "Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"
    ],
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'long'",
        "defaultRaw": "'long'",
        "name": "length",
        "description": "the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "the locale code"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'gregory'",
        "defaultRaw": "'gregory'",
        "name": "options.outputCalendar",
        "description": "the calendar"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[string]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "monthsFormat",
    "memberof": "transpiled/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/info.js~Info.monthsFormat",
    "access": "public",
    "description": "Return an array of format month names.\nFormat months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\nchanges the string.\nSee {@link Info#months}",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'long'",
        "defaultRaw": "'long'",
        "name": "length",
        "description": "the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "the locale code"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'gregory'",
        "defaultRaw": "'gregory'",
        "name": "options.outputCalendar",
        "description": "the calendar"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[string]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "weekdays",
    "memberof": "transpiled/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/info.js~Info.weekdays",
    "access": "public",
    "description": "Return an array of standalone week names.",
    "examples": [
      "Info.weekdays()[0] //=> 'Monday'",
      "Info.weekdays('short')[0] //=> 'Mon'",
      "Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'",
      "Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"
    ],
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'long'",
        "defaultRaw": "'long'",
        "name": "length",
        "description": "the length of the weekday representation, such as \"narrow\", \"short\", \"long\"."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "the locale code"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[string]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "weekdaysFormat",
    "memberof": "transpiled/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/info.js~Info.weekdaysFormat",
    "access": "public",
    "description": "Return an array of format week names.\nFormat weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\nchanges the string.\nSee {@link Info#weekdays}",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'long'",
        "defaultRaw": "'long'",
        "name": "length",
        "description": "the length of the weekday representation, such as \"narrow\", \"short\", \"long\"."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "the locale code"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.numberingSystem",
        "description": "the numbering system"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[string]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "meridiems",
    "memberof": "transpiled/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/info.js~Info.meridiems",
    "access": "public",
    "description": "Return an array of meridiems.",
    "examples": [
      "Info.meridiems() //=> [ 'AM', 'PM' ]",
      "Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]"
    ],
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "the locale code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[string]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "eras",
    "memberof": "transpiled/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/info.js~Info.eras",
    "access": "public",
    "description": "Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.",
    "examples": [
      "Info.eras() //=> [ 'BC', 'AD' ]",
      "Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]",
      "Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]"
    ],
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'short'",
        "defaultRaw": "'short'",
        "name": "length",
        "description": "the length of the era representation, such as \"short\" or \"long\"."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "the locale code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[string]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "features",
    "memberof": "transpiled/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/info.js~Info.features",
    "access": "public",
    "description": "Return the set of available features in this environment.\nSome features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\nKeys:\n* `zones`: whether this environment supports IANA timezones\n* `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n* `intl`: whether this environment supports general internationalization\n* `relative`: whether this environment supports relative time formatting",
    "examples": [
      "Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }"
    ],
    "lineNumber": 153,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 494,
    "kind": "file",
    "name": "transpiled/interval.js",
    "content": "import { DateTime } from \"./datetime\";\r\nimport { Duration, friendlyDuration } from \"./duration\";\r\nimport { InvalidArgumentError, UnparsableStringError } from \"./errors\";\r\n// checks if the start is equal to or before the end\r\nfunction validateStartEnd(start, end) {\r\n    if (!DateTime.isDateTime(start)) {\r\n        throw new InvalidArgumentError(\"Must pass a DateTime as the start\");\r\n    }\r\n    else if (!DateTime.isDateTime(end)) {\r\n        throw new InvalidArgumentError(\"Must pass a DateTime as the end\");\r\n    }\r\n    else if (end < start) {\r\n        throw new InvalidArgumentError(`The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`);\r\n    }\r\n}\r\nfunction friendlyDateTime(dateTimeish) {\r\n    if (DateTime.isDateTime(dateTimeish)) {\r\n        return dateTimeish;\r\n    }\r\n    else if (dateTimeish instanceof Date) {\r\n        return DateTime.fromJSDate(dateTimeish);\r\n    }\r\n    else if (typeof dateTimeish === \"object\" && dateTimeish) {\r\n        return DateTime.fromObject(dateTimeish);\r\n    }\r\n    throw new InvalidArgumentError(`Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`);\r\n}\r\n/**\r\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\r\n *\r\n * Here is a brief overview of the most commonly used methods and getters in Interval:\r\n *\r\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\r\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\r\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\r\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval#merge}, {@link Interval#xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\r\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}.\r\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\r\n */\r\nexport class Interval {\r\n    /**\r\n     * @private\r\n     */\r\n    constructor(config) {\r\n        validateStartEnd(config.start, config.end);\r\n        /**\r\n         * @access private\r\n         */\r\n        this._s = config.start;\r\n        /**\r\n         * @access private\r\n         */\r\n        this._e = config.end;\r\n        /**\r\n         * @access private\r\n         */\r\n        this._isLuxonInterval = true;\r\n    }\r\n    /**\r\n     * Returns the start of the Interval\r\n     * @type {DateTime}\r\n     */\r\n    get start() {\r\n        return this._s;\r\n    }\r\n    /**\r\n     * Returns the end of the Interval\r\n     * @type {DateTime}\r\n     */\r\n    get end() {\r\n        return this._e;\r\n    }\r\n    /**\r\n     * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\r\n     * @param {DateTime|Date|Object} start\r\n     * @param {DateTime|Date|Object} end\r\n     * @return {Interval}\r\n     */\r\n    static fromDateTimes(start, end) {\r\n        const builtStart = friendlyDateTime(start), builtEnd = friendlyDateTime(end);\r\n        return new Interval({\r\n            start: builtStart,\r\n            end: builtEnd\r\n        });\r\n    }\r\n    /**\r\n     * Create an Interval from a start DateTime and a Duration to extend to.\r\n     * @param {DateTime|Date|Object} start\r\n     * @param {Duration|Object} duration - the length of the Interval, as a Duration object.\r\n     * @return {Interval}\r\n     */\r\n    static after(start, duration) {\r\n        const dur = friendlyDuration(duration), dt = friendlyDateTime(start);\r\n        return new Interval({\r\n            start: dt,\r\n            end: dt ? dt.plus(dur) : null\r\n        });\r\n    }\r\n    /**\r\n     * Create an Interval from an end DateTime and a Duration to extend backwards to.\r\n     * @param {DateTime|Date|Object} end\r\n     * @param {Duration|Object} duration - the length of the Interval, as a Duration object.\r\n     * @return {Interval}\r\n     */\r\n    static before(end, duration) {\r\n        const dur = friendlyDuration(duration), dt = friendlyDateTime(end);\r\n        return new Interval({\r\n            start: dt ? dt.minus(dur) : null,\r\n            end: dt\r\n        });\r\n    }\r\n    /**\r\n     * Create an Interval from an ISO 8601 string.\r\n     * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\r\n     * @param {string} text - the ISO string to parse\r\n     * @param {Object} [options] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}\r\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n     * @return {Interval}\r\n     */\r\n    static fromISO(text, options = {}) {\r\n        const [s, e] = (text || \"\").split(\"/\", 2);\r\n        const nullOnInvalidOpts = Object.assign({}, options, { nullOnInvalid: true });\r\n        if (s && e) {\r\n            const start = DateTime.fromISO(s, nullOnInvalidOpts);\r\n            const end = DateTime.fromISO(e, nullOnInvalidOpts);\r\n            if (start !== null && end !== null) {\r\n                return Interval.fromDateTimes(start, end);\r\n            }\r\n            if (start !== null) {\r\n                const dur = Duration.fromISO(e, nullOnInvalidOpts);\r\n                if (dur !== null) {\r\n                    return Interval.after(start, dur);\r\n                }\r\n            }\r\n            else if (end !== null) {\r\n                const dur = Duration.fromISO(s, nullOnInvalidOpts);\r\n                if (dur !== null) {\r\n                    return Interval.before(end, dur);\r\n                }\r\n            }\r\n        }\r\n        throw new UnparsableStringError(\"ISO 8601\", text);\r\n    }\r\n    /**\r\n     * Check if an object is an Interval. Works across context boundaries\r\n     * @param {Object} o\r\n     * @return {boolean}\r\n     */\r\n    static isInterval(o) {\r\n        return (o && o._isLuxonInterval) || false;\r\n    }\r\n    /**\r\n     * Merge an array of Intervals into a equivalent minimal set of Intervals.\r\n     * Combines overlapping and adjacent Intervals.\r\n     * @param {[Interval]} intervals\r\n     * @return {[Interval]}\r\n     */\r\n    static merge(intervals) {\r\n        const [found, final] = intervals\r\n            .sort((a, b) => a._s.valueOf() - b._s.valueOf())\r\n            .reduce(([sofar, current], item) => {\r\n            if (!current) {\r\n                return [sofar, item];\r\n            }\r\n            else if (current.overlaps(item) || current.abutsStart(item)) {\r\n                return [sofar, current.union(item)];\r\n            }\r\n            else {\r\n                return [sofar.concat([current]), item];\r\n            }\r\n        }, [[], null]);\r\n        if (final) {\r\n            found.push(final);\r\n        }\r\n        return found;\r\n    }\r\n    /**\r\n     * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\r\n     * @param {[Interval]} intervals\r\n     * @return {[Interval]}\r\n     */\r\n    static xor(intervals) {\r\n        let start = null, currentCount = 0;\r\n        const results = [], ends = intervals.map(i => [\r\n            { time: i._s, type: \"s\" },\r\n            { time: i._e, type: \"e\" }\r\n        ]), flattened = Array.prototype.concat(...ends), arr = flattened.sort((a, b) => a.time.valueOf() - b.time.valueOf());\r\n        for (const i of arr) {\r\n            currentCount += i.type === \"s\" ? 1 : -1;\r\n            if (currentCount === 1) {\r\n                start = i.time;\r\n            }\r\n            else {\r\n                if (start && start.valueOf() !== i.time.valueOf()) {\r\n                    results.push(Interval.fromDateTimes(start, i.time));\r\n                }\r\n                start = null;\r\n            }\r\n        }\r\n        return Interval.merge(results);\r\n    }\r\n    /**\r\n     * Returns the length of the Interval in the specified unit.\r\n     * @param {string} [unit='milliseconds'] - the unit (such as 'hours' or 'days') to return the length in.\r\n     * @return {number}\r\n     */\r\n    length(unit = \"milliseconds\") {\r\n        return this.toDuration(unit).get(unit);\r\n    }\r\n    /**\r\n     * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\r\n     * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\r\n     * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\r\n     * @param {string} [unit='milliseconds'] - the unit of time to count.\r\n     * @return {number}\r\n     */\r\n    count(unit = \"milliseconds\") {\r\n        const start = this.start.startOf(unit), end = this.end.startOf(unit);\r\n        return Math.floor(end.diff(start, unit).get(unit)) + 1;\r\n    }\r\n    /**\r\n     * Returns whether this Interval's start and end are both in the same unit of time\r\n     * @param {string} unit - the unit of time to check sameness on\r\n     * @return {boolean}\r\n     */\r\n    hasSame(unit) {\r\n        return this.isEmpty() || this._e.minus({ milliseconds: 1 }).hasSame(this._s, unit);\r\n    }\r\n    /**\r\n     * Return whether this Interval has the same start and end DateTimes.\r\n     * @return {boolean}\r\n     */\r\n    isEmpty() {\r\n        return this._s.valueOf() === this._e.valueOf();\r\n    }\r\n    /**\r\n     * Return whether this Interval's start is after the specified DateTime.\r\n     * @param {DateTime} dateTime\r\n     * @return {boolean}\r\n     */\r\n    isAfter(dateTime) {\r\n        return this._s > dateTime;\r\n    }\r\n    /**\r\n     * Return whether this Interval's end is before the specified DateTime.\r\n     * @param {DateTime} dateTime\r\n     * @return {boolean}\r\n     */\r\n    isBefore(dateTime) {\r\n        return this._e <= dateTime;\r\n    }\r\n    /**\r\n     * Return whether this Interval contains the specified DateTime.\r\n     * @param {DateTime} dateTime\r\n     * @return {boolean}\r\n     */\r\n    contains(dateTime) {\r\n        return this._s <= dateTime && this._e > dateTime;\r\n    }\r\n    /**\r\n     * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\r\n     * @param {Object} values - the values to set\r\n     * @param {DateTime} values.start - the starting DateTime\r\n     * @param {DateTime} values.end - the ending DateTime\r\n     * @return {Interval}\r\n     */\r\n    set({ start, end }) {\r\n        return Interval.fromDateTimes(start || this._s, end || this._e);\r\n    }\r\n    /**\r\n     * Split this Interval at each of the specified DateTimes\r\n     * @param {...[DateTime]} dateTimes - the unit of time to count.\r\n     * @return {[Interval]}\r\n     */\r\n    splitAt(...dateTimes) {\r\n        const sorted = dateTimes\r\n            .map(friendlyDateTime)\r\n            .filter(d => this.contains(d))\r\n            .sort();\r\n        const results = [];\r\n        let s = this._s, i = 0;\r\n        while (s < this._e) {\r\n            const added = sorted[i] || this._e, next = +added > +this._e ? this._e : added;\r\n            results.push(Interval.fromDateTimes(s, next));\r\n            s = next;\r\n            i += 1;\r\n        }\r\n        return results;\r\n    }\r\n    /**\r\n     * Split this Interval into smaller Intervals, each of the specified length.\r\n     * Left over time is grouped into a smaller interval\r\n     * @param {Duration|Object} duration - The length of each resulting interval, as a Duration object.\r\n     * @return {[Interval]}\r\n     */\r\n    splitBy(duration) {\r\n        const dur = friendlyDuration(duration);\r\n        if (dur.as(\"milliseconds\") === 0) {\r\n            return [];\r\n        }\r\n        let s = this._s, added, next;\r\n        const results = [];\r\n        while (s < this._e) {\r\n            added = s.plus(dur);\r\n            next = +added > +this._e ? this._e : added;\r\n            results.push(Interval.fromDateTimes(s, next));\r\n            s = next;\r\n        }\r\n        return results;\r\n    }\r\n    /**\r\n     * Split this Interval into the specified number of smaller intervals.\r\n     * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\r\n     * @return {[Interval]}\r\n     */\r\n    divideEqually(numberOfParts) {\r\n        return this.splitBy({ milliseconds: this.length() / numberOfParts }).slice(0, numberOfParts);\r\n    }\r\n    /**\r\n     * Return whether this Interval overlaps with the specified Interval\r\n     * @param {Interval} other\r\n     * @return {boolean}\r\n     */\r\n    overlaps(other) {\r\n        return this._e > other._s && this._s < other._e;\r\n    }\r\n    /**\r\n     * Return whether this Interval's end is adjacent to the specified Interval's start.\r\n     * @param {Interval} other\r\n     * @return {boolean}\r\n     */\r\n    abutsStart(other) {\r\n        return +this._e === +other._s;\r\n    }\r\n    /**\r\n     * Return whether this Interval's start is adjacent to the specified Interval's end.\r\n     * @param {Interval} other\r\n     * @return {boolean}\r\n     */\r\n    abutsEnd(other) {\r\n        return +other._e === +this._s;\r\n    }\r\n    /**\r\n     * Return whether this Interval engulfs the start and end of the specified Interval.\r\n     * @param {Interval} other\r\n     * @return {boolean}\r\n     */\r\n    engulfs(other) {\r\n        return this._s <= other._s && this._e >= other._e;\r\n    }\r\n    /**\r\n     * Return whether this Interval has the same start and end as the specified Interval.\r\n     * @param {Interval} other\r\n     * @return {boolean}\r\n     */\r\n    equals(other) {\r\n        return this._s.equals(other._s) && this._e.equals(other._e);\r\n    }\r\n    /**\r\n     * Return an Interval representing the intersection of this Interval and the specified Interval.\r\n     * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\r\n     * Returns null if the intersection is empty, meaning, the intervals don't intersect.\r\n     * @param {Interval} other\r\n     * @return {Interval|null}\r\n     */\r\n    intersection(other) {\r\n        const s = this._s > other._s ? this._s : other._s, e = this._e < other._e ? this._e : other._e;\r\n        if (s > e) {\r\n            return null;\r\n        }\r\n        else {\r\n            return Interval.fromDateTimes(s, e);\r\n        }\r\n    }\r\n    /**\r\n     * Return an Interval representing the union of this Interval and the specified Interval.\r\n     * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\r\n     * @param {Interval} other\r\n     * @return {Interval}\r\n     */\r\n    union(other) {\r\n        const s = this._s < other._s ? this._s : other._s, e = this._e > other._e ? this._e : other._e;\r\n        return Interval.fromDateTimes(s, e);\r\n    }\r\n    /**\r\n     * Returns Intervals representing the span(s) of time in this Interval that don't overlap with any of the specified Intervals.\r\n     * @param {...Interval} intervals\r\n     * @return {[Interval]}\r\n     */\r\n    difference(...intervals) {\r\n        return Interval.xor([this].concat(intervals))\r\n            .map(i => this.intersection(i))\r\n            .filter(i => i !== null && !i.isEmpty());\r\n    }\r\n    /**\r\n     * Returns a string representation of this Interval appropriate for debugging.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `[${this._s.toISO()} – ${this._e.toISO()})`;\r\n    }\r\n    /**\r\n     * Returns an ISO 8601-compliant string representation of this Interval.\r\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n     * @param {Object} options - The same options as {@link DateTime#toISO}\r\n     * @return {string}\r\n     */\r\n    toISO(options = {}) {\r\n        return `${this._s.toISO(options)}/${this._e.toISO(options)}`;\r\n    }\r\n    /**\r\n     * Returns an ISO 8601-compliant string representation of date of this Interval.\r\n     * The time components are ignored.\r\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n     * @return {string}\r\n     */\r\n    toISODate() {\r\n        return `${this._s.toISODate()}/${this._e.toISODate()}`;\r\n    }\r\n    /**\r\n     * Returns an ISO 8601-compliant string representation of time of this Interval.\r\n     * The date components are ignored.\r\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n     * @param {Object} options - The same options as {@link DateTime#toISO}\r\n     * @return {string}\r\n     *\r\n     */\r\n    toISOTime(options = {}) {\r\n        return `${this._s.toISOTime(options)}/${this._e.toISOTime(options)}`;\r\n    }\r\n    /**\r\n     * Returns a string representation of this Interval formatted according to the specified format string.\r\n     * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\r\n     * @param {Object} options - options\r\n     * @param {string} [options.separator =  ' – '] - a separator to place between the start and end representations\r\n     * @return {string}\r\n     */\r\n    toFormat(dateFormat, options = { separator: \" – \" }) {\r\n        return `${this._s.toFormat(dateFormat)}${options.separator}${this._e.toFormat(dateFormat)}`;\r\n    }\r\n    /**\r\n     * Return a Duration representing the time spanned by this interval.\r\n     * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\r\n     * @param {Object} options - options that affect the creation of the Duration\r\n     * @param {string} [options.locale=end()'s locale] - the locale to use\r\n     * @param {string} [options.numberingSystem=end()'s numberingSystem] - the numbering system to use\r\n     * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\r\n     * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on error instead of throwing\r\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\r\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\r\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\r\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\r\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\r\n     * @return {Duration}\r\n     */\r\n    toDuration(unit = \"milliseconds\", options = {}) {\r\n        return this._e.diff(this._s, unit, options);\r\n    }\r\n    /**\r\n     * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\r\n     * @param {function} mapFn\r\n     * @return {Interval}\r\n     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\r\n     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\r\n     */\r\n    mapEndpoints(mapFn) {\r\n        return Interval.fromDateTimes(mapFn(this._s), mapFn(this._e));\r\n    }\r\n}\r\n//# sourceMappingURL=interval.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/interval.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 495,
    "kind": "function",
    "name": "validateStartEnd",
    "memberof": "transpiled/interval.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/interval.js~validateStartEnd",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/interval.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 496,
    "kind": "function",
    "name": "friendlyDateTime",
    "memberof": "transpiled/interval.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/interval.js~friendlyDateTime",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/interval.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "dateTimeish",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 497,
    "kind": "class",
    "name": "Interval",
    "memberof": "transpiled/interval.js",
    "static": true,
    "longname": "transpiled/interval.js~Interval",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/interval.js",
    "importStyle": "{Interval}",
    "description": "An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n\nHere is a brief overview of the most commonly used methods and getters in Interval:\n\n* **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n* **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n* **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n* **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval#merge}, {@link Interval#xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n* **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}.\n* **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.",
    "lineNumber": 40,
    "interface": false
  },
  {
    "__docId__": 498,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 44,
    "ignore": true
  },
  {
    "__docId__": 499,
    "kind": "member",
    "name": "_s",
    "memberof": "transpiled/interval.js~Interval",
    "static": false,
    "longname": "transpiled/interval.js~Interval#_s",
    "access": "private",
    "description": "",
    "lineNumber": 49,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "member",
    "name": "_e",
    "memberof": "transpiled/interval.js~Interval",
    "static": false,
    "longname": "transpiled/interval.js~Interval#_e",
    "access": "private",
    "description": "",
    "lineNumber": 53,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "member",
    "name": "_isLuxonInterval",
    "memberof": "transpiled/interval.js~Interval",
    "static": false,
    "longname": "transpiled/interval.js~Interval#_isLuxonInterval",
    "access": "private",
    "description": "",
    "lineNumber": 57,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 502,
    "kind": "get",
    "name": "start",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#start",
    "access": "public",
    "description": "Returns the start of the Interval",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 503,
    "kind": "get",
    "name": "end",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#end",
    "access": "public",
    "description": "Returns the end of the Interval",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "DateTime"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "fromDateTimes",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/interval.js~Interval.fromDateTimes",
    "access": "public",
    "description": "Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateTime",
          "Date",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "DateTime",
          "Date",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interval"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "after",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/interval.js~Interval.after",
    "access": "public",
    "description": "Create an Interval from a start DateTime and a Duration to extend to.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateTime",
          "Date",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Duration",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "the length of the Interval, as a Duration object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interval"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "before",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/interval.js~Interval.before",
    "access": "public",
    "description": "Create an Interval from an end DateTime and a Duration to extend backwards to.",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateTime",
          "Date",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Duration",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "the length of the Interval, as a Duration object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interval"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "fromISO",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/interval.js~Interval.fromISO",
    "access": "public",
    "description": "Create an Interval from an ISO 8601 string.\nAccepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.",
    "see": [
      "https://en.wikipedia.org/wiki/ISO_8601#Time_intervals"
    ],
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the ISO string to parse"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interval"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "isInterval",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/interval.js~Interval.isInterval",
    "access": "public",
    "description": "Check if an object is an Interval. Works across context boundaries",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "merge",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/interval.js~Interval.merge",
    "access": "public",
    "description": "Merge an array of Intervals into a equivalent minimal set of Intervals.\nCombines overlapping and adjacent Intervals.",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "[Interval]"
        ],
        "spread": false,
        "optional": false,
        "name": "intervals",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[Interval]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "xor",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/interval.js~Interval.xor",
    "access": "public",
    "description": "Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "[Interval]"
        ],
        "spread": false,
        "optional": false,
        "name": "intervals",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[Interval]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "length",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#length",
    "access": "public",
    "description": "Returns the length of the Interval in the specified unit.",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'milliseconds'",
        "defaultRaw": "'milliseconds'",
        "name": "unit",
        "description": "the unit (such as 'hours' or 'days') to return the length in."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "count",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#count",
    "access": "public",
    "description": "Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\nUnlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\nasks 'what dates are included in this interval?', not 'how many days long is this interval?'",
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'milliseconds'",
        "defaultRaw": "'milliseconds'",
        "name": "unit",
        "description": "the unit of time to count."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "hasSame",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#hasSame",
    "access": "public",
    "description": "Returns whether this Interval's start and end are both in the same unit of time",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "the unit of time to check sameness on"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#isEmpty",
    "access": "public",
    "description": "Return whether this Interval has the same start and end DateTimes.",
    "lineNumber": 233,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "isAfter",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#isAfter",
    "access": "public",
    "description": "Return whether this Interval's start is after the specified DateTime.",
    "lineNumber": 241,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateTime"
        ],
        "spread": false,
        "optional": false,
        "name": "dateTime",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "isBefore",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#isBefore",
    "access": "public",
    "description": "Return whether this Interval's end is before the specified DateTime.",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateTime"
        ],
        "spread": false,
        "optional": false,
        "name": "dateTime",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "contains",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#contains",
    "access": "public",
    "description": "Return whether this Interval contains the specified DateTime.",
    "lineNumber": 257,
    "params": [
      {
        "nullable": null,
        "types": [
          "DateTime"
        ],
        "spread": false,
        "optional": false,
        "name": "dateTime",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "set",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#set",
    "access": "public",
    "description": "\"Sets\" the start and/or end dates. Returns a newly-constructed Interval.",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "the values to set"
      },
      {
        "nullable": null,
        "types": [
          "DateTime"
        ],
        "spread": false,
        "optional": false,
        "name": "values.start",
        "description": "the starting DateTime"
      },
      {
        "nullable": null,
        "types": [
          "DateTime"
        ],
        "spread": false,
        "optional": false,
        "name": "values.end",
        "description": "the ending DateTime"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interval"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "splitAt",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#splitAt",
    "access": "public",
    "description": "Split this Interval at each of the specified DateTimes",
    "lineNumber": 275,
    "params": [
      {
        "nullable": null,
        "types": [
          "...[DateTime]"
        ],
        "spread": true,
        "optional": false,
        "name": "dateTimes",
        "description": "the unit of time to count."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[Interval]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "splitBy",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#splitBy",
    "access": "public",
    "description": "Split this Interval into smaller Intervals, each of the specified length.\nLeft over time is grouped into a smaller interval",
    "lineNumber": 296,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The length of each resulting interval, as a Duration object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[Interval]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "divideEqually",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#divideEqually",
    "access": "public",
    "description": "Split this Interval into the specified number of smaller intervals.",
    "lineNumber": 316,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numberOfParts",
        "description": "The number of Intervals to divide the Interval into."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[Interval]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "overlaps",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#overlaps",
    "access": "public",
    "description": "Return whether this Interval overlaps with the specified Interval",
    "lineNumber": 324,
    "params": [
      {
        "nullable": null,
        "types": [
          "Interval"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "abutsStart",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#abutsStart",
    "access": "public",
    "description": "Return whether this Interval's end is adjacent to the specified Interval's start.",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "Interval"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "abutsEnd",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#abutsEnd",
    "access": "public",
    "description": "Return whether this Interval's start is adjacent to the specified Interval's end.",
    "lineNumber": 340,
    "params": [
      {
        "nullable": null,
        "types": [
          "Interval"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "engulfs",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#engulfs",
    "access": "public",
    "description": "Return whether this Interval engulfs the start and end of the specified Interval.",
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "Interval"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "equals",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#equals",
    "access": "public",
    "description": "Return whether this Interval has the same start and end as the specified Interval.",
    "lineNumber": 356,
    "params": [
      {
        "nullable": null,
        "types": [
          "Interval"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "intersection",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#intersection",
    "access": "public",
    "description": "Return an Interval representing the intersection of this Interval and the specified Interval.\nSpecifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\nReturns null if the intersection is empty, meaning, the intervals don't intersect.",
    "lineNumber": 366,
    "params": [
      {
        "nullable": null,
        "types": [
          "Interval"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interval",
        "null"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "union",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#union",
    "access": "public",
    "description": "Return an Interval representing the union of this Interval and the specified Interval.\nSpecifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.",
    "lineNumber": 381,
    "params": [
      {
        "nullable": null,
        "types": [
          "Interval"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interval"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "difference",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#difference",
    "access": "public",
    "description": "Returns Intervals representing the span(s) of time in this Interval that don't overlap with any of the specified Intervals.",
    "lineNumber": 390,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Interval"
        ],
        "spread": true,
        "optional": false,
        "name": "intervals",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[Interval]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "toString",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#toString",
    "access": "public",
    "description": "Returns a string representation of this Interval appropriate for debugging.",
    "lineNumber": 399,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "toISO",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#toISO",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this Interval.",
    "see": [
      "https://en.wikipedia.org/wiki/ISO_8601#Time_intervals"
    ],
    "lineNumber": 408,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The same options as {@link DateTime#toISO}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "toISODate",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#toISODate",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of date of this Interval.\nThe time components are ignored.",
    "see": [
      "https://en.wikipedia.org/wiki/ISO_8601#Time_intervals"
    ],
    "lineNumber": 417,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "toISOTime",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#toISOTime",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of time of this Interval.\nThe date components are ignored.",
    "see": [
      "https://en.wikipedia.org/wiki/ISO_8601#Time_intervals"
    ],
    "lineNumber": 428,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The same options as {@link DateTime#toISO}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "toFormat",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#toFormat",
    "access": "public",
    "description": "Returns a string representation of this Interval formatted according to the specified format string.",
    "lineNumber": 438,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dateFormat",
        "description": "the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "  ' – '",
        "defaultRaw": "  ' – '",
        "name": "options.separator",
        "description": "a separator to place between the start and end representations"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "toDuration",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#toDuration",
    "access": "public",
    "description": "Return a Duration representing the time spanned by this interval.",
    "examples": [
      "Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }",
      "Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }",
      "Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }",
      "Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }",
      "Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }"
    ],
    "lineNumber": 456,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "['milliseconds']",
        "defaultRaw": "['milliseconds']",
        "name": "unit",
        "description": "the unit or units (such as 'hours' or 'days') to include in the duration."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options that affect the creation of the Duration"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "end()'s locale",
        "defaultRaw": "end()'s locale",
        "name": "options.locale",
        "description": "the locale to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "end()'s numberingSystem",
        "defaultRaw": "end()'s numberingSystem",
        "name": "options.numberingSystem",
        "description": "the numbering system to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "options.conversionAccuracy",
        "description": "the conversion system to use"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.nullOnInvalid",
        "description": "whether to return `null` on error instead of throwing"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "mapEndpoints",
    "memberof": "transpiled/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/interval.js~Interval#mapEndpoints",
    "access": "public",
    "description": "Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes",
    "examples": [
      "Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())",
      "Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))"
    ],
    "lineNumber": 466,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "mapFn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interval"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 537,
    "kind": "file",
    "name": "transpiled/settings.js",
    "content": "import { SystemZone } from \"./zones/systemZone\";\r\nimport { IANAZone } from \"./zones/IANAZone\";\r\nimport { Locale } from \"./impl/locale\";\r\nimport { normalizeZone } from \"./impl/zoneUtil\";\r\nlet now = () => Date.now(), defaultZone, defaultLocale, defaultNumberingSystem, defaultOutputCalendar;\r\n/**\r\n * Settings contains static getters and setters that control Luxon's overall behavior.\r\n * Luxon is a simple library with few options, but the ones it does have live here.\r\n */\r\nexport class Settings {\r\n    /**\r\n     * Get the callback for returning the current timestamp.\r\n     * @type {function}\r\n     */\r\n    static get now() {\r\n        return now;\r\n    }\r\n    /**\r\n     * Set the callback for returning the current timestamp.\r\n     * The function should return a number, which will be interpreted as an Epoch millisecond count\r\n     * @type {function}\r\n     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\r\n     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\r\n     */\r\n    static set now(n) {\r\n        now = n;\r\n    }\r\n    /**\r\n     * Set the default time zone to create DateTimes in. Does not affect existing instances.\r\n     *\r\n     * Use the value \"system\" (default) to reset this value to the system's time zone.\r\n     *\r\n     * zone can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3'.\r\n     *\r\n     * You may also supply an instance of a {@link Zone} class, or a number which will be interpreted as a UTC offset in minutes.\r\n     * @param {Zone | string | number} [zone='system'] - the zone value\r\n     */\r\n    static setDefaultZone(zone) {\r\n        defaultZone = zone;\r\n    }\r\n    /**\r\n     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\r\n     * The default value is the system's time zone (the one set on the machine that runs this code).\r\n     * @type {Zone}\r\n     */\r\n    static get defaultZone() {\r\n        return normalizeZone(defaultZone, SystemZone.instance);\r\n    }\r\n    /**\r\n     * Get the default locale to create DateTimes with. Does not affect existing instances.\r\n     * @type {string}\r\n     */\r\n    static get defaultLocale() {\r\n        return defaultLocale;\r\n    }\r\n    /**\r\n     * Set the default locale to create DateTimes with. Does not affect existing instances.\r\n     * @type {string}\r\n     */\r\n    static set defaultLocale(locale) {\r\n        defaultLocale = locale;\r\n    }\r\n    /**\r\n     * Get the default numbering system to create DateTimes with. Does not affect existing instances.\r\n     * @type {string}\r\n     */\r\n    static get defaultNumberingSystem() {\r\n        return defaultNumberingSystem;\r\n    }\r\n    /**\r\n     * Set the default numbering system to create DateTimes with. Does not affect existing instances.\r\n     * @type {string}\r\n     */\r\n    static set defaultNumberingSystem(numberingSystem) {\r\n        defaultNumberingSystem = numberingSystem;\r\n    }\r\n    /**\r\n     * Get the default output calendar to create DateTimes with. Does not affect existing instances.\r\n     * @type {string}\r\n     */\r\n    static get defaultOutputCalendar() {\r\n        return defaultOutputCalendar;\r\n    }\r\n    /**\r\n     * Set the default output calendar to create DateTimes with. Does not affect existing instances.\r\n     * @type {string}\r\n     */\r\n    static set defaultOutputCalendar(outputCalendar) {\r\n        defaultOutputCalendar = outputCalendar;\r\n    }\r\n    /**\r\n     * Reset Luxon's global caches. Should only be necessary in testing scenarios.\r\n     * @return {void}\r\n     */\r\n    static resetCaches() {\r\n        Locale.resetCache();\r\n        IANAZone.resetCache();\r\n    }\r\n}\r\n//# sourceMappingURL=settings.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 538,
    "kind": "function",
    "name": "now",
    "memberof": "transpiled/settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~now",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 539,
    "kind": "class",
    "name": "Settings",
    "memberof": "transpiled/settings.js",
    "static": true,
    "longname": "transpiled/settings.js~Settings",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/settings.js",
    "importStyle": "{Settings}",
    "description": "Settings contains static getters and setters that control Luxon's overall behavior.\nLuxon is a simple library with few options, but the ones it does have live here.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 540,
    "kind": "get",
    "name": "now",
    "memberof": "transpiled/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~Settings.now",
    "access": "public",
    "description": "Get the callback for returning the current timestamp.",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 541,
    "kind": "set",
    "name": "now",
    "memberof": "transpiled/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~Settings.now",
    "access": "public",
    "description": "Set the callback for returning the current timestamp.\nThe function should return a number, which will be interpreted as an Epoch millisecond count",
    "examples": [
      "Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future",
      "Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time"
    ],
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "setDefaultZone",
    "memberof": "transpiled/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~Settings.setDefaultZone",
    "access": "public",
    "description": "Set the default time zone to create DateTimes in. Does not affect existing instances.\n\nUse the value \"system\" (default) to reset this value to the system's time zone.\n\nzone can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3'.\n\nYou may also supply an instance of a {@link Zone} class, or a number which will be interpreted as a UTC offset in minutes.",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Zone ",
          " string ",
          " number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'system'",
        "defaultRaw": "'system'",
        "name": "zone",
        "description": "the zone value"
      }
    ],
    "return": null
  },
  {
    "__docId__": 543,
    "kind": "get",
    "name": "defaultZone",
    "memberof": "transpiled/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~Settings.defaultZone",
    "access": "public",
    "description": "Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\nThe default value is the system's time zone (the one set on the machine that runs this code).",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Zone"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 544,
    "kind": "get",
    "name": "defaultLocale",
    "memberof": "transpiled/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~Settings.defaultLocale",
    "access": "public",
    "description": "Get the default locale to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 545,
    "kind": "set",
    "name": "defaultLocale",
    "memberof": "transpiled/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~Settings.defaultLocale",
    "access": "public",
    "description": "Set the default locale to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 546,
    "kind": "get",
    "name": "defaultNumberingSystem",
    "memberof": "transpiled/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~Settings.defaultNumberingSystem",
    "access": "public",
    "description": "Get the default numbering system to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 547,
    "kind": "set",
    "name": "defaultNumberingSystem",
    "memberof": "transpiled/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~Settings.defaultNumberingSystem",
    "access": "public",
    "description": "Set the default numbering system to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 548,
    "kind": "get",
    "name": "defaultOutputCalendar",
    "memberof": "transpiled/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~Settings.defaultOutputCalendar",
    "access": "public",
    "description": "Get the default output calendar to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 549,
    "kind": "set",
    "name": "defaultOutputCalendar",
    "memberof": "transpiled/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~Settings.defaultOutputCalendar",
    "access": "public",
    "description": "Set the default output calendar to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "resetCaches",
    "memberof": "transpiled/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/settings.js~Settings.resetCaches",
    "access": "public",
    "description": "Reset Luxon's global caches. Should only be necessary in testing scenarios.",
    "lineNumber": 95,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 551,
    "kind": "file",
    "name": "transpiled/types/common.js",
    "content": "//# sourceMappingURL=common.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/types/common.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 552,
    "kind": "file",
    "name": "transpiled/types/datetime.js",
    "content": "//# sourceMappingURL=datetime.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/types/datetime.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 553,
    "kind": "file",
    "name": "transpiled/types/duration.js",
    "content": "//# sourceMappingURL=duration.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/types/duration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 554,
    "kind": "file",
    "name": "transpiled/types/info.js",
    "content": "//# sourceMappingURL=info.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/types/info.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 555,
    "kind": "file",
    "name": "transpiled/types/interval.js",
    "content": "//# sourceMappingURL=interval.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/types/interval.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 556,
    "kind": "file",
    "name": "transpiled/types/intl-2020.js",
    "content": "// This file can be removed once es2020.intl is part of TS\r\n// and can be added in the 'lib' section of tsconfig.json\r\nexport default Intl;\r\n//# sourceMappingURL=intl-2020.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/types/intl-2020.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 557,
    "kind": "file",
    "name": "transpiled/types/locale.js",
    "content": "//# sourceMappingURL=locale.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/types/locale.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 558,
    "kind": "file",
    "name": "transpiled/types/public.js",
    "content": "export * from \"./common\";\r\nexport * from \"./datetime\";\r\nexport * from \"./info\";\r\nexport * from \"./interval\";\r\nexport * from \"./locale\";\r\nexport * from \"./zone\";\r\nimport Intl from \"./intl-2020\";\r\nexport { Intl };\r\n//# sourceMappingURL=public.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/types/public.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 559,
    "kind": "file",
    "name": "transpiled/types/zone.js",
    "content": "//# sourceMappingURL=zone.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/types/zone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 560,
    "kind": "file",
    "name": "transpiled/zone.js",
    "content": "import { ZoneIsAbstractError } from \"./errors\";\r\n// Prefixing the parameter names with a _ confuses ESDoc\r\nfunction silenceUnusedWarning(...args) {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\r\n    args.length;\r\n}\r\n/**\r\n * An abstract Zone class\r\n * @interface\r\n */\r\nexport class Zone {\r\n    /**\r\n     * The type of zone\r\n     * @abstract\r\n     * @type {string}\r\n     */\r\n    get type() {\r\n        throw new ZoneIsAbstractError();\r\n    }\r\n    /**\r\n     * The name of this zone.\r\n     * @abstract\r\n     * @type {string}\r\n     */\r\n    get name() {\r\n        throw new ZoneIsAbstractError();\r\n    }\r\n    /**\r\n     * Returns whether the offset is known to be fixed for the whole year.\r\n     * @abstract\r\n     * @type {boolean}\r\n     */\r\n    get isUniversal() {\r\n        throw new ZoneIsAbstractError();\r\n    }\r\n    /**\r\n     * Returns the offset's common name (such as EST) at the specified timestamp\r\n     * @abstract\r\n     * @param {number} [ts] - Epoch milliseconds for which to get the name\r\n     * @param {Object} [options] - Options to affect the format\r\n     * @param {string} [options.format] - What style of offset to return. Accepts 'long' or 'short'.\r\n     * @param {string} [options.locale] - What locale to return the offset name in.\r\n     * @return {string | null}\r\n     */\r\n    offsetName(ts, options) {\r\n        silenceUnusedWarning(ts, options);\r\n        throw new ZoneIsAbstractError();\r\n    }\r\n    /**\r\n     * Returns the offset's value as a string\r\n     * @abstract\r\n     * @param {number} ts - Epoch milliseconds for which to get the offset\r\n     * @param {string} format - What style of offset to return.\r\n     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\r\n     * @return {string}\r\n     */\r\n    formatOffset(ts, format) {\r\n        silenceUnusedWarning(ts, format);\r\n        throw new ZoneIsAbstractError();\r\n    }\r\n    /**\r\n     * Return the offset in minutes for this zone at the specified timestamp.\r\n     * @abstract\r\n     * @param {number} ts - Epoch milliseconds for which to compute the offset\r\n     * @return {number}\r\n     */\r\n    offset(ts) {\r\n        silenceUnusedWarning(ts);\r\n        throw new ZoneIsAbstractError();\r\n    }\r\n    /**\r\n     * Return whether this Zone is equal to another zone\r\n     * @abstract\r\n     * @param {Zone} other - the zone to compare\r\n     * @return {boolean}\r\n     */\r\n    equals(other) {\r\n        silenceUnusedWarning(other);\r\n        throw new ZoneIsAbstractError();\r\n    }\r\n    /**\r\n     * Return whether this Zone is valid.\r\n     * @abstract\r\n     * @type {boolean}\r\n     */\r\n    get isValid() {\r\n        throw new ZoneIsAbstractError();\r\n    }\r\n}\r\n//# sourceMappingURL=zone.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/zone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 561,
    "kind": "function",
    "name": "silenceUnusedWarning",
    "memberof": "transpiled/zone.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zone.js~silenceUnusedWarning",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/zone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 562,
    "kind": "class",
    "name": "Zone",
    "memberof": "transpiled/zone.js",
    "static": true,
    "longname": "transpiled/zone.js~Zone",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/zone.js",
    "importStyle": "{Zone}",
    "description": "An abstract Zone class",
    "lineNumber": 11,
    "interface": true
  },
  {
    "__docId__": 563,
    "kind": "get",
    "name": "type",
    "memberof": "transpiled/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zone.js~Zone#type",
    "access": "public",
    "description": "The type of zone",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 564,
    "kind": "get",
    "name": "name",
    "memberof": "transpiled/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zone.js~Zone#name",
    "access": "public",
    "description": "The name of this zone.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 565,
    "kind": "get",
    "name": "isUniversal",
    "memberof": "transpiled/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zone.js~Zone#isUniversal",
    "access": "public",
    "description": "Returns whether the offset is known to be fixed for the whole year.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "offsetName",
    "memberof": "transpiled/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zone.js~Zone#offsetName",
    "access": "public",
    "description": "Returns the offset's common name (such as EST) at the specified timestamp",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "ts",
        "description": "Epoch milliseconds for which to get the name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Options to affect the format"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.format",
        "description": "What style of offset to return. Accepts 'long' or 'short'."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "What locale to return the offset name in."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string ",
        " null"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "formatOffset",
    "memberof": "transpiled/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zone.js~Zone#formatOffset",
    "access": "public",
    "description": "Returns the offset's value as a string",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ts",
        "description": "Epoch milliseconds for which to get the offset"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "What style of offset to return.\n                         Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "offset",
    "memberof": "transpiled/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zone.js~Zone#offset",
    "access": "public",
    "description": "Return the offset in minutes for this zone at the specified timestamp.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ts",
        "description": "Epoch milliseconds for which to compute the offset"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "equals",
    "memberof": "transpiled/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zone.js~Zone#equals",
    "access": "public",
    "description": "Return whether this Zone is equal to another zone",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Zone"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the zone to compare"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true
  },
  {
    "__docId__": 570,
    "kind": "get",
    "name": "isValid",
    "memberof": "transpiled/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zone.js~Zone#isValid",
    "access": "public",
    "description": "Return whether this Zone is valid.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 571,
    "kind": "file",
    "name": "transpiled/zones/fixedOffsetZone.js",
    "content": "import { formatOffset, signedOffset } from \"../impl/util\";\r\nimport { Zone } from \"../zone\";\r\nlet singleton;\r\n/**\r\n * A zone with a fixed offset (meaning no DST)\r\n * @implements {Zone}\r\n */\r\nexport class FixedOffsetZone extends Zone {\r\n    constructor(offset) {\r\n        super();\r\n        /** @private **/\r\n        this._fixed = offset;\r\n    }\r\n    /**\r\n     * Get a singleton instance of UTC\r\n     * @return {FixedOffsetZone}\r\n     */\r\n    static get utcInstance() {\r\n        if (singleton === undefined) {\r\n            singleton = new FixedOffsetZone(0);\r\n        }\r\n        return singleton;\r\n    }\r\n    /**\r\n     * Get an instance with a specified offset\r\n     * @param {number} offset - The offset in minutes\r\n     * @return {FixedOffsetZone}\r\n     */\r\n    static instance(offset) {\r\n        return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\r\n    }\r\n    /**\r\n     * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\r\n     * @param {string} s - The offset string to parse\r\n     * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\r\n     * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\r\n     * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\r\n     * @return {FixedOffsetZone | null}\r\n     */\r\n    static parseSpecifier(s) {\r\n        if (s) {\r\n            const regexp = /^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i;\r\n            const r = regexp.exec(s);\r\n            if (r !== null) {\r\n                return new FixedOffsetZone(signedOffset(r[1], r[2]));\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /** @override **/\r\n    get type() {\r\n        return \"fixed\";\r\n    }\r\n    /** @override **/\r\n    get name() {\r\n        return this._fixed === 0 ? \"UTC\" : `UTC${formatOffset(this._fixed, \"narrow\")}`;\r\n    }\r\n    /** @override **/\r\n    offsetName(_ts_, _options_) {\r\n        return this.name;\r\n    }\r\n    /** @override **/\r\n    formatOffset(_ts_, format) {\r\n        return formatOffset(this._fixed, format);\r\n    }\r\n    /** @override **/\r\n    get isUniversal() {\r\n        return true;\r\n    }\r\n    /** @override **/\r\n    offset(_ts_) {\r\n        return this._fixed;\r\n    }\r\n    /** @override **/\r\n    equals(other) {\r\n        return other.type === \"fixed\" && other._fixed === this._fixed;\r\n    }\r\n    /** @override **/\r\n    get isValid() {\r\n        return true;\r\n    }\r\n}\r\n//# sourceMappingURL=fixedOffsetZone.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/zones/fixedOffsetZone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 572,
    "kind": "class",
    "name": "FixedOffsetZone",
    "memberof": "transpiled/zones/fixedOffsetZone.js",
    "static": true,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/zones/fixedOffsetZone.js",
    "importStyle": "{FixedOffsetZone}",
    "description": "A zone with a fixed offset (meaning no DST)",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "transpiled/zone.js~Zone"
    ],
    "implements": [
      "Zone"
    ]
  },
  {
    "__docId__": 573,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 574,
    "kind": "member",
    "name": "_fixed",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "static": false,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone#_fixed",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 575,
    "kind": "get",
    "name": "utcInstance",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone.utcInstance",
    "access": "public",
    "description": "Get a singleton instance of UTC",
    "lineNumber": 18,
    "return": {
      "nullable": null,
      "types": [
        "FixedOffsetZone"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "instance",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone.instance",
    "access": "public",
    "description": "Get an instance with a specified offset",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "The offset in minutes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FixedOffsetZone"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "parseSpecifier",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone.parseSpecifier",
    "access": "public",
    "description": "Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"",
    "examples": [
      "FixedOffsetZone.parseSpecifier(\"UTC+6\")",
      "FixedOffsetZone.parseSpecifier(\"UTC+06\")",
      "FixedOffsetZone.parseSpecifier(\"UTC-6:00\")"
    ],
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The offset string to parse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FixedOffsetZone ",
        " null"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 578,
    "kind": "get",
    "name": "type",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone#type",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "override": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 579,
    "kind": "get",
    "name": "name",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone#name",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "override": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "offsetName",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone#offsetName",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "override": true,
    "params": [
      {
        "name": "_ts_",
        "types": [
          "*"
        ]
      },
      {
        "name": "_options_",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "formatOffset",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone#formatOffset",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "override": true,
    "params": [
      {
        "name": "_ts_",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 582,
    "kind": "get",
    "name": "isUniversal",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone#isUniversal",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "override": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "offset",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone#offset",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "override": true,
    "params": [
      {
        "name": "_ts_",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "equals",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone#equals",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "override": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 585,
    "kind": "get",
    "name": "isValid",
    "memberof": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/fixedOffsetZone.js~FixedOffsetZone#isValid",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "override": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 586,
    "kind": "file",
    "name": "transpiled/zones/IANAZone.js",
    "content": "import { formatOffset, parseZoneInfo, isUndefined, IANA_REGEX, objToLocalTS } from \"../impl/util\";\r\nimport { Zone } from \"../zone\";\r\nimport { InvalidZoneError } from \"../errors\";\r\nconst matchingRegex = RegExp(`^${IANA_REGEX.source}$`);\r\nlet dtfCache = {};\r\nfunction makeDTF(zone) {\r\n    if (!dtfCache[zone]) {\r\n        try {\r\n            dtfCache[zone] = new Intl.DateTimeFormat(\"en-US\", {\r\n                hour12: false,\r\n                timeZone: zone,\r\n                year: \"numeric\",\r\n                month: \"2-digit\",\r\n                day: \"2-digit\",\r\n                hour: \"2-digit\",\r\n                minute: \"2-digit\",\r\n                second: \"2-digit\"\r\n            });\r\n        }\r\n        catch (_a) {\r\n            throw new InvalidZoneError(zone);\r\n        }\r\n    }\r\n    return dtfCache[zone];\r\n}\r\nconst typeToPos = {\r\n    year: 0,\r\n    month: 1,\r\n    day: 2,\r\n    hour: 3,\r\n    minute: 4,\r\n    second: 5\r\n};\r\nfunction hackyOffset(dtf, date) {\r\n    const formatted = dtf.format(date).replace(/\\u200E/g, \"\"), parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted);\r\n    if (parsed !== null) {\r\n        const [, month, day, year, hour, minute, second] = parsed;\r\n        return [\r\n            parseInt(year, 10),\r\n            parseInt(month, 10),\r\n            parseInt(day, 10),\r\n            parseInt(hour, 10),\r\n            parseInt(minute, 10),\r\n            parseInt(second, 10)\r\n        ];\r\n    }\r\n    return [0, 0, 0, 0, 0, 0];\r\n}\r\nfunction partsOffset(dtf, date) {\r\n    const formatted = dtf.formatToParts(date), filled = [];\r\n    for (let i = 0; i < formatted.length; i++) {\r\n        const { type, value } = formatted[i], pos = typeToPos[type];\r\n        if (!isUndefined(pos)) {\r\n            filled[pos] = parseInt(value, 10);\r\n        }\r\n    }\r\n    return filled;\r\n}\r\nlet ianaZoneCache = {};\r\n/**\r\n * A zone identified by an IANA identifier, like America/New_York\r\n * @implements {Zone}\r\n */\r\nexport class IANAZone extends Zone {\r\n    constructor(name) {\r\n        super();\r\n        /** @private **/\r\n        this._zoneName = name;\r\n        /** @private **/\r\n        this._valid = IANAZone.isValidZone(name);\r\n    }\r\n    /**\r\n     * @param {string} name - Zone name\r\n     * @return {IANAZone}\r\n     */\r\n    static create(name) {\r\n        if (!ianaZoneCache[name]) {\r\n            ianaZoneCache[name] = new IANAZone(name);\r\n        }\r\n        return ianaZoneCache[name];\r\n    }\r\n    /**\r\n     * Reset local caches. Should only be necessary in testing scenarios.\r\n     * @return {void}\r\n     */\r\n    static resetCache() {\r\n        ianaZoneCache = {};\r\n        dtfCache = {};\r\n    }\r\n    /**\r\n     * Returns whether the provided string is a valid specifier.\r\n     * This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.\r\n     * @param {string} s - The string to check validity on\r\n     * @example IANAZone.isValidSpecifier(\"America/New_York\") //=> true\r\n     * @example IANAZone.isValidSpecifier(\"Fantasia/Castle\") //=> true\r\n     * @example IANAZone.isValidSpecifier(\"Sport~~blorp\") //=> false\r\n     * @return {boolean}\r\n     */\r\n    static isValidSpecifier(s) {\r\n        return !!(s && matchingRegex.exec(s) !== null);\r\n    }\r\n    /**\r\n     * Returns whether the provided string identifies a real zone\r\n     * @param {string} zone - The string to check\r\n     * @example IANAZone.isValidZone(\"America/New_York\") //=> true\r\n     * @example IANAZone.isValidZone(\"Fantasia/Castle\") //=> false\r\n     * @example IANAZone.isValidZone(\"Sport~~blorp\") //=> false\r\n     * @return {boolean}\r\n     */\r\n    static isValidZone(zone) {\r\n        try {\r\n            new Intl.DateTimeFormat(\"en-US\", { timeZone: zone }).format();\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    // Etc/GMT+8 -> -480\r\n    /** @ignore */\r\n    static parseGMTOffset(specifier) {\r\n        if (specifier) {\r\n            const regexp = /^Etc\\/GMT([+-]\\d{1,2})$/i;\r\n            const match = regexp.exec(specifier);\r\n            if (match !== null) {\r\n                return -60 * parseInt(match[1], 10);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /** @override **/\r\n    get type() {\r\n        return \"iana\";\r\n    }\r\n    /** @override **/\r\n    get name() {\r\n        return this._zoneName;\r\n    }\r\n    /** @override **/\r\n    get isUniversal() {\r\n        return false;\r\n    }\r\n    /** @override **/\r\n    offsetName(ts, { format, locale } = {}) {\r\n        return parseZoneInfo(ts, format, locale, this.name);\r\n    }\r\n    /** @override **/\r\n    formatOffset(ts, format) {\r\n        return formatOffset(this.offset(ts), format);\r\n    }\r\n    /** @override **/\r\n    offset(ts) {\r\n        const date = new Date(ts), dtf = makeDTF(this.name), [year, month, day, hour, minute, second] = dtf.formatToParts === undefined ? hackyOffset(dtf, date) : partsOffset(dtf, date), \r\n        // work around https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat\r\n        adjustedHour = hour === 24 ? 0 : hour;\r\n        const asUTC = objToLocalTS({\r\n            year,\r\n            month,\r\n            day,\r\n            hour: adjustedHour,\r\n            minute,\r\n            second,\r\n            millisecond: 0\r\n        });\r\n        let asTS = date.valueOf();\r\n        const over = asTS % 1000;\r\n        asTS -= over >= 0 ? over : 1000 + over;\r\n        return (asUTC - asTS) / (60 * 1000);\r\n    }\r\n    /** @override **/\r\n    equals(other) {\r\n        return other.type === \"iana\" && other.name === this.name;\r\n    }\r\n    /** @override **/\r\n    get isValid() {\r\n        return this._valid;\r\n    }\r\n}\r\n//# sourceMappingURL=IANAZone.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/zones/IANAZone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 587,
    "kind": "variable",
    "name": "matchingRegex",
    "memberof": "transpiled/zones/IANAZone.js",
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~matchingRegex",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/zones/IANAZone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 588,
    "kind": "variable",
    "name": "dtfCache",
    "memberof": "transpiled/zones/IANAZone.js",
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~dtfCache",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/zones/IANAZone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 589,
    "kind": "function",
    "name": "makeDTF",
    "memberof": "transpiled/zones/IANAZone.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~makeDTF",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/zones/IANAZone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "zone",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 590,
    "kind": "variable",
    "name": "typeToPos",
    "memberof": "transpiled/zones/IANAZone.js",
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~typeToPos",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/zones/IANAZone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"year\": *, \"month\": number, \"day\": number, \"hour\": number, \"minute\": number, \"second\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 591,
    "kind": "function",
    "name": "hackyOffset",
    "memberof": "transpiled/zones/IANAZone.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~hackyOffset",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/zones/IANAZone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "dtf",
        "types": [
          "*"
        ]
      },
      {
        "name": "date",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 592,
    "kind": "function",
    "name": "partsOffset",
    "memberof": "transpiled/zones/IANAZone.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~partsOffset",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/zones/IANAZone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "dtf",
        "types": [
          "*"
        ]
      },
      {
        "name": "date",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 593,
    "kind": "variable",
    "name": "ianaZoneCache",
    "memberof": "transpiled/zones/IANAZone.js",
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~ianaZoneCache",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/zones/IANAZone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 594,
    "kind": "class",
    "name": "IANAZone",
    "memberof": "transpiled/zones/IANAZone.js",
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~IANAZone",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/zones/IANAZone.js",
    "importStyle": "{IANAZone}",
    "description": "A zone identified by an IANA identifier, like America/New_York",
    "lineNumber": 64,
    "interface": false,
    "extends": [
      "transpiled/zone.js~Zone"
    ],
    "implements": [
      "Zone"
    ]
  },
  {
    "__docId__": 595,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/IANAZone.js~IANAZone#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true
  },
  {
    "__docId__": 596,
    "kind": "member",
    "name": "_zoneName",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "static": false,
    "longname": "transpiled/zones/IANAZone.js~IANAZone#_zoneName",
    "access": "private",
    "description": null,
    "lineNumber": 68,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 597,
    "kind": "member",
    "name": "_valid",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "static": false,
    "longname": "transpiled/zones/IANAZone.js~IANAZone#_valid",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "create",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~IANAZone.create",
    "access": "public",
    "description": "",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Zone name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "IANAZone"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "resetCache",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~IANAZone.resetCache",
    "access": "public",
    "description": "Reset local caches. Should only be necessary in testing scenarios.",
    "lineNumber": 86,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "isValidSpecifier",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~IANAZone.isValidSpecifier",
    "access": "public",
    "description": "Returns whether the provided string is a valid specifier.\nThis only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.",
    "examples": [
      "IANAZone.isValidSpecifier(\"America/New_York\") //=> true",
      "IANAZone.isValidSpecifier(\"Fantasia/Castle\") //=> true",
      "IANAZone.isValidSpecifier(\"Sport~~blorp\") //=> false"
    ],
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "The string to check validity on"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "isValidZone",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~IANAZone.isValidZone",
    "access": "public",
    "description": "Returns whether the provided string identifies a real zone",
    "examples": [
      "IANAZone.isValidZone(\"America/New_York\") //=> true",
      "IANAZone.isValidZone(\"Fantasia/Castle\") //=> false",
      "IANAZone.isValidZone(\"Sport~~blorp\") //=> false"
    ],
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "zone",
        "description": "The string to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "parseGMTOffset",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/IANAZone.js~IANAZone.parseGMTOffset",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "ignore": true,
    "params": [
      {
        "name": "specifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "get",
    "name": "type",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/IANAZone.js~IANAZone#type",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "override": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 604,
    "kind": "get",
    "name": "name",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/IANAZone.js~IANAZone#name",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "override": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "get",
    "name": "isUniversal",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/IANAZone.js~IANAZone#isUniversal",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "override": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "offsetName",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/IANAZone.js~IANAZone#offsetName",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "override": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "optional": true,
        "types": [
          "{\"format\": *, \"locale\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "formatOffset",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/IANAZone.js~IANAZone#formatOffset",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "override": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 608,
    "kind": "method",
    "name": "offset",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/IANAZone.js~IANAZone#offset",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "override": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "equals",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/IANAZone.js~IANAZone#equals",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "override": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "get",
    "name": "isValid",
    "memberof": "transpiled/zones/IANAZone.js~IANAZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/IANAZone.js~IANAZone#isValid",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "override": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "file",
    "name": "transpiled/zones/systemZone.js",
    "content": "import { formatOffset, parseZoneInfo, hasIntl } from \"../impl/util\";\r\nimport { Zone } from \"../zone\";\r\nlet singleton = null;\r\n/**\r\n * Represents the system's local zone for this Javascript environment.\r\n * @implements {Zone}\r\n */\r\nexport class SystemZone extends Zone {\r\n    /**\r\n     * Get a singleton instance of the system's local zone\r\n     * @return {SystemZone}\r\n     */\r\n    static get instance() {\r\n        if (singleton === null) {\r\n            singleton = new SystemZone();\r\n        }\r\n        return singleton;\r\n    }\r\n    /** @override **/\r\n    get type() {\r\n        return \"system\";\r\n    }\r\n    /** @override **/\r\n    get name() {\r\n        if (hasIntl()) {\r\n            return new Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n        }\r\n        else {\r\n            return \"system\";\r\n        }\r\n    }\r\n    /** @override **/\r\n    get isUniversal() {\r\n        return false;\r\n    }\r\n    /** @override **/\r\n    offsetName(ts, { format, locale } = {}) {\r\n        return parseZoneInfo(ts, format, locale);\r\n    }\r\n    /** @override **/\r\n    formatOffset(ts, format) {\r\n        return formatOffset(this.offset(ts), format);\r\n    }\r\n    /** @override **/\r\n    offset(ts) {\r\n        return -new Date(ts).getTimezoneOffset();\r\n    }\r\n    /** @override **/\r\n    equals(other) {\r\n        return other.type === \"system\";\r\n    }\r\n    /** @override **/\r\n    get isValid() {\r\n        return true;\r\n    }\r\n}\r\n//# sourceMappingURL=systemZone.js.map",
    "static": true,
    "longname": "C:/easyPhp/eds-www/git/ts-luxon/transpiled/zones/systemZone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 612,
    "kind": "variable",
    "name": "singleton",
    "memberof": "transpiled/zones/systemZone.js",
    "static": true,
    "longname": "transpiled/zones/systemZone.js~singleton",
    "access": "public",
    "export": false,
    "importPath": "ts-luxon/transpiled/zones/systemZone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 613,
    "kind": "class",
    "name": "SystemZone",
    "memberof": "transpiled/zones/systemZone.js",
    "static": true,
    "longname": "transpiled/zones/systemZone.js~SystemZone",
    "access": "public",
    "export": true,
    "importPath": "ts-luxon/transpiled/zones/systemZone.js",
    "importStyle": "{SystemZone}",
    "description": "Represents the system's local zone for this Javascript environment.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "transpiled/zone.js~Zone"
    ],
    "implements": [
      "Zone"
    ]
  },
  {
    "__docId__": 614,
    "kind": "get",
    "name": "instance",
    "memberof": "transpiled/zones/systemZone.js~SystemZone",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transpiled/zones/systemZone.js~SystemZone.instance",
    "access": "public",
    "description": "Get a singleton instance of the system's local zone",
    "lineNumber": 13,
    "return": {
      "nullable": null,
      "types": [
        "SystemZone"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "get",
    "name": "type",
    "memberof": "transpiled/zones/systemZone.js~SystemZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/systemZone.js~SystemZone#type",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "override": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "get",
    "name": "name",
    "memberof": "transpiled/zones/systemZone.js~SystemZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/systemZone.js~SystemZone#name",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "override": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "get",
    "name": "isUniversal",
    "memberof": "transpiled/zones/systemZone.js~SystemZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/systemZone.js~SystemZone#isUniversal",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "override": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "method",
    "name": "offsetName",
    "memberof": "transpiled/zones/systemZone.js~SystemZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/systemZone.js~SystemZone#offsetName",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "override": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "optional": true,
        "types": [
          "{\"format\": *, \"locale\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "formatOffset",
    "memberof": "transpiled/zones/systemZone.js~SystemZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/systemZone.js~SystemZone#formatOffset",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "override": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      },
      {
        "name": "format",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "offset",
    "memberof": "transpiled/zones/systemZone.js~SystemZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/systemZone.js~SystemZone#offset",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "override": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "equals",
    "memberof": "transpiled/zones/systemZone.js~SystemZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/systemZone.js~SystemZone#equals",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "override": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 622,
    "kind": "get",
    "name": "isValid",
    "memberof": "transpiled/zones/systemZone.js~SystemZone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transpiled/zones/systemZone.js~SystemZone#isValid",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "override": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# TS Luxon\n\n[![MIT License][license-image]][license] [![Build Status][gh-actions-image]][gh-actions-url] [![NPM version][npm-version-image]][npm-url] [![Coverage Status][test-coverage-image]][test-coverage-url] ![PRs welcome][contributing-image]\n\nTS Luxon is a library for working with dates and times in Javscript and Typescript.\n\nThis repo was initially created by [GillesDebunne]([initial-autor]) which of course started from [Luxon]([original-luxon]) itself.\n\nMany thanks to both of them for this fantastic work. \n\nI decided to fork his work, because we don't know for sure if and when Luxon will adopt this source.\n\nI realized moment wasn't suitable anymore for my projects, but I couldn't wait to have a more stable version and at this time Luxon (v 1.25.0) had structural issues, which resulted in errors in my Angular projects.\n\n\n```js\nDateTime.now().setZone('America/New_York').minus({ weeks: 1 }).endOf('day').toISO();\n```\n\n## Features\n * DateTime, Duration, and Interval types.\n * Immutable, chainable, unambiguous API.\n * Parsing and formatting for common and custom formats.\n * Native time zone and Intl support (no locale or tz files).\n\n## Download\n\nYou can download the umd bundles from here:\n\n* [ts-luxon.umd.js](https://tonysamperi.github.io/ts-luxon/lib/ts-luxon.umd.js)\n* [ts-luxon.umd.min.js](https://tonysamperi.github.io/ts-luxon/lib/ts-luxon.min.umd.js)\n\n# DOCS\n\n(COMING SOON)\n\n## Development\n\nPleas, read the CONTRIBUTING.md you can find in the master branch.\n\n[initial-author]: https://github.com/GillesDebunne\n[original-luxon]: https://github.com/moment/luxon\n[license-image]: http://img.shields.io/badge/license-MIT-blue.svg\n[license]: license.md\n\n[gh-actions-url]: https://github.com/tonysamperi/ts-luxon/actions?query=workflow%3A%22Docker+tests%22\n[gh-actions-image]: https://github.com/tonysamperi/ts-luxon/workflows/Docker%20tests/badge.svg?branch=master\n\n[npm-url]: https://npmjs.org/package/ts-luxon\n[npm-version-image]: https://badge.fury.io/js/ts-luxon.svg\n\n[doc-url]: https://tonysamperi.github.io/ts-luxon/\n[doc-coverage-image]: https://moment.github.io/luxon/docs/badge.svg\n\n[test-coverage-url]: https://codecov.io/gh/tonysamperi/ts-luxon\n[test-coverage-image]: https://codecov.io/gh/tonysamperi/ts-luxon/branch/master/graph/badge.svg\n\n[contributing-image]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg\n",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"ts-luxon\",\n  \"version\": \"2.0.2\",\n  \"license\": \"MIT\",\n  \"description\": \"Immutable date wrapper\",\n  \"author\": \"Tony Samperi\",\n  \"keywords\": [\n    \"date\",\n    \"immutable\"\n  ],\n  \"repository\": \"https://github.com/tonysamperi/ts-luxon\",\n  \"main\": \"dist/ts-luxon.umd.js\",\n  \"module\": \"dist/ts-luxon.esm.js\",\n  \"typings\": \"dist/index.d.ts\",\n  \"files\": [\n    \"dist/**\",\n    \"src\",\n    \"README.md\",\n    \"package.json\"\n  ],\n  \"engines\": {\n    \"node\": \">=13\"\n  },\n  \"scripts\": {\n    \"build:watch\": \"rollup -c rollup.config.js -w\",\n    \"build\": \"rollup -c rollup.config.js\",\n    \"test\": \"jest\",\n    \"lint\": \"tslint --project tsconfig.json\",\n    \"docs\": \"npm run build && esdoc -c docs/index.js\",\n    \"site\": \"cp -r site dist\",\n    \"benchmark\": \"echo todo benchmarks/datetime.ts\",\n    \"codecov\": \"codecov\",\n    \"check-doc-coverage\": \"grep '\\\"coverage\\\": \\\"100%\\\"' dist/docs/coverage.json\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run lint\"\n    }\n  },\n  \"devDependencies\": {\n    \"benchmark\": \"^2.0.0\",\n    \"codecov\": \"^3.0.0\",\n    \"esdoc\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"husky\": \"^4.0.0\",\n    \"jest\": \"^26.6.3\",\n    \"rollup\": \"~2.33.3\",\n    \"rollup-plugin-commonjs\": \"^10.1.0\",\n    \"rollup-plugin-json\": \"^4.0.0\",\n    \"rollup-plugin-node-resolve\": \"^5.2.0\",\n    \"rollup-plugin-sourcemaps\": \"~0.6.3\",\n    \"rollup-plugin-typescript2\": \"~0.29.0\",\n    \"ts-jest\": \"^26.4.4\",\n    \"tslib\": \"^2.0.0\",\n    \"tslint\": \"^6.1.3\",\n    \"tslint-consistent-codestyle\": \"^1.16.0\",\n    \"typescript\": \"^3.9.7\"\n  },\n  \"sideEffects\": false,\n  \"dependencies\": {}\n}\n",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# Luxon Documentation\n\nThis is the manual for Luxon. You'll find guides below and an API doc reference [here](identifiers.html).\n",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\index.md",
    "name": "./docs/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\install.md",
    "name": "./docs/install.md",
    "content": "# Install guide\n\nLuxon provides different builds for different JS environments. See below for a link to the right one and instructions on how to use it. Luxon supports all modern platforms, but see [the support matrix](matrix.html) for additional details.\n\n## Basic browser setup\n\n- [Download full](../../global/luxon.js)\n- [Download minified](../../global/luxon.min.js)\n\nYou can also load the files from a [CDN](https://www.jsdelivr.com/package/npm/luxon).\n\nJust include Luxon in a script tag. You can access its various classes through the `luxon` global.\n\n```html\n<script src=\"luxon.js\"></script>\n```\n\nYou may wish to alias the classes you use:\n\n```js\nvar DateTime = luxon.DateTime;\n```\n\n### Internet Explorer\n\nIf you're supporting IE 10 or 11, you need some polyfills to get Luxon to work. Use polyfill.io:\n\n```html\n<script src=\"https://cdn.polyfill.io/v3/polyfill.js?features=default,String.prototype.repeat,Array.prototype.find,Array.prototype.findIndex,Math.trunc,Math.sign,Object.is\"></script>\n```\n\nSee the [support matrix](matrix.html) for more information on what works and what doesn't in IE.\n\n## Node\n\nSupports Node 6+. Install via NPM:\n\n```\nnpm install --save luxon\n```\n\n```js\nconst { DateTime } = require(\"luxon\");\n```\n\nIf you want to work with locales, you'll need to have `full-icu` support installed in Node. You can [build Node with it](https://github.com/nodejs/node/wiki/Intl), use an [NPM module](https://www.npmjs.com/package/full-icu) to provide it, or find it prepackaged for your platform, like `brew install node --with-full-icu`. If you skip this step, Luxon still works but methods like `setLocale()` will do nothing.\n\nThe instructions for using full-icu as a package are a little confusing. Node can't automatically discover that you've installed the it, so you need to tell it where to find the data, like this:\n\n```\nnpm install full-icu\nnode --icu-data-dir=./node_modules/full-icu\n```\n\nYou can also point to the data with an environment var, like this:\n\n```\nNODE_ICU_DATA=\"$(pwd)/node_modules/full-icu\" node\n```\n\n## AMD (System.js, RequireJS, etc)\n\n- [Download full](../../amd/luxon.js)\n- [Download minified](../../amd/luxon.min.js)\n\n```js\nrequirejs([\"luxon\"], function(luxon) {\n  //...\n});\n```\n\n## ES6\n\n- [Download full](../../es6/luxon.js)\n- [Download minified](../../es6/luxon.min.js)\n\n```js\nimport { DateTime } from \"luxon\";\n```\n\n## Webpack\n\n```\nnpm install --save luxon\n```\n\n```js\nimport { DateTime } from \"luxon\";\n```\n\n## Types\n\nThere are third-party typing files for Flow (via [flow-typed](https://github.com/flowtype/flow-typed)) and TypeScript (via [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped)).\n\nFor Flow, use:\n\n```\nflow-typed install luxon\n```\n\nFor TypeScript, use:\n\n```\nnpm install --save-dev @types/luxon\n```\n\n## React Native\n\nReact Native works just fine, but React Native for Android doesn't ship with Intl support, which you need for [a lot of Luxon's functionality](matrix.html). Use [jsc-android-buildscripts](https://github.com/SoftwareMansion/jsc-android-buildscripts) to fix it.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\tour.md",
    "name": "./docs/tour.md",
    "content": "# A quick tour\n\nLuxon is a library that makes it easier to work with dates and times in Javascript. If you want, add and subtract them, format and parse them, ask them hard questions, and so on, Luxon provides a much easier and comprehensive interface than the native types it wraps. We're going to talk about the most immediately useful subset of that interface.\n\nThis is going to be a bit brisk, but keep in mind that the API docs are comprehensive, so if you want to know more, feel free to [dive into them](../identifiers.html).\n\n## Your first DateTime\n\nThe most important class in Luxon is [DateTime](../class/src/datetime.js~DateTime.html). A DateTime represents a specific millisecond in time, along with a time zone and a locale. Here's one that represents May 15, 2017 at 8:30 in the morning in the local time zone:\n\n```js\nvar dt = DateTime.local(2017, 5, 15, 8, 30);\n```\n\n[DateTime.local](../class/src/datetime.js~DateTime.html#static-method-local) takes any number of arguments, all the way out to milliseconds. Underneath, this is similar to a Javascript Date object. But we've decorated it with lots of useful methods.\n\n## Creating a DateTime\n\nThere are lots of ways to create a DateTime by parsing strings or constructing them out of parts. You've already seen one, `DateTime.local()`, but let's talk about three more.\n\n### Get the current date and time\n\nTo get the current time, just do this:\n\n```js\nvar now = DateTime.now();\n```\n\nCalling [DateTime.now](../class/src/datetime.js~DateTime.html#static-method-now) is equivalent to calling `local()` with no parameter.\n\n### Create from an object\n\nThe most powerful way to create a DateTime instance is to provide an object containing all the information:\n\n```js\ndt = DateTime.fromObject({day: 22, hour: 12, zone: 'America/Los_Angeles', numberingSystem: 'beng'})\n```\n\nDon't worry too much about the properties you don't understand yet; the point is that you can set every attribute of a DateTime when you create it. One thing to notice from the example is that we just set the day and hour; the year and month get defaulted to the current one and the minutes, seconds, and milliseconds get defaulted to 0. So [DateTime.fromObject](../class/src/datetime.js~DateTime.html#static-method-fromObject) is sort of the power user interface.\n\n### Parse from ISO 8601\n\nLuxon has lots of parsing capabilities, but the most important one is parsing [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) strings, because they're more-or-less the standard wire format for dates and times. Use [DateTime.fromISO](../class/src/datetime.js~DateTime.html#static-method-fromISO).\n\n\n```js\nDateTime.fromISO(\"2017-05-15\")          //=> May 15, 2017 at midnight\nDateTime.fromISO(\"2017-05-15T08:30:00\") //=> May 15, 2017 at 8:30\n```\n\nYou can parse a bunch of other formats, including [your own custom ones](parsing.html).\n\n## Getting to know your DateTime instance\n\nNow that we've made some DateTimes, let's see what we can ask of it.\n\n### toString\n\nThe first thing we want to see is the DateTime as a string. Luxon returns ISO 8601 strings:\n\n```js\nDateTime.now().toString(); //=> '2017-09-14T03:20:34.091-04:00'\n```\n\n### Getting at components\n\nWe can get at the components of the time individually through getters. For example:\n\n```js\ndt = DateTime.now();\ndt.year     //=> 2017\ndt.month    //=> 9\ndt.day      //=> 14\ndt.second   //=> 47\ndt.weekday  //=> 4\n```\n\n### Other fun accessors\n\n```js\ndt.zoneName     //=> 'America/New_York'\ndt.offset       //=> -240\ndt.daysInMonth  //=> 30\n```\n\nThere are lots more!\n\n## Formatting your DateTime\n\nYou may want to output your DateTime to a string for a machine or a human to read. Luxon has lots of tools for this, but two of them are most important. If you want to format a human-readable string, use `toLocaleString`:\n\n```js\ndt.toLocaleString()      //=> '9/14/2017'\ndt.toLocaleString(DateTime.DATETIME_MED) //=> 'September 14, 3:21 AM'\n```\n\nThis works well across different locales (languages) by letting the browser figure out what order the different parts go in and how to punctuate them.\n\nIf you want the string read by another program, you almost certainly want to use `toISO`:\n\n```js\ndt.toISO() //=> '2017-09-14T03:21:47.070-04:00'\n```\n\nCustom formats are also supported. See [formatting](formatting).\n\n## Transforming your DateTime\n\n### Immutability\n\nLuxon objects are immutable. That means that you can't alter them in place, just create altered copies. Throughout the documentation, we use terms like \"alter\", \"change\", and \"set\" loosely, but rest assured we mean \"create a new instance with different properties\".\n\n### Math\n\nThis is easier to show than to tell. All of these calls return new DateTime instances:\n\n```js\nvar dt = DateTime.now();\ndt.plus({ hours: 3, minutes: 2 });\ndt.minus({ days: 7 });\ndt.startOf('day');\ndt.endOf('hour');\n```\n\n### Set\n\nYou can create new instances by overriding specific properties:\n\n```js\nvar dt = DateTime.now();\ndt.set({hour: 3}).hour   //=> 3\n```\n\n## Intl\n\nLuxon provides several different Intl capabilities, but the most important one is in formatting:\n\n```js\nvar dt = DateTime.now();\nvar f = {month: 'long', day: 'numeric'};\ndt.setLocale('fr').toLocaleString(f)      //=> '14 septembre'\ndt.setLocale('en-GB').toLocaleString(f)   //=> '14 September'\ndt.setLocale('en-US').toLocaleString(f)  //=> 'September 14'\n```\n\nLuxon's Info class can also list months or weekdays for different locales:\n\n```js\nInfo.months('long', {locale: 'fr'}) //=> [ 'janvier', 'février', 'mars', 'avril', ... ]\n```\n\n## Time zones\n\nLuxon supports time zones. There's a whole [big section](zones) about it. But briefly, you can create DateTimes in specific zones and change their zones:\n\n```js\nDateTime.fromObject({zone: 'America/Los_Angeles'}) // now, but expressed in LA's local time\nDateTime.now().setZone('America/Los_Angeles'); // same\n```\n\nLuxon also supports UTC directly:\n\n```js\nDateTime.utc(2017, 5, 15);\nDateTime.utc(); // now, in UTC time zone\nDateTime.now().toUTC();\nDateTime.utc().toSystemZone();\n```\n\n## Durations\n\nThe Duration class represents a quantity of time such as \"2 hours and 7 minutes\". You create them like this:\n\n```js\nvar dur = Duration.fromObject({ hours: 2, minutes: 7 });\n```\n\nThey can be add or subtracted from DateTimes like this:\n\n```js\ndt.plus(dur);\n```\n\nThey have getters just like DateTime:\n\n```js\ndur.hours   //=> 2\ndur.minutes //=> 7\ndur.seconds //=> 0\n```\n\nAnd some other useful stuff:\n\n```js\ndur.as('seconds') //=> 7620\ndur.toObject()    //=> { hours: 2, minutes: 7 }\ndur.toISO()       //=> 'PT2H7M'\n```\n\nYou can also format, negate, and normalize them. See it all in the [Duration API docs](../class/src/duration.js~Duration.html).\n\n## Intervals\n\nIntervals are a specific period of time, such as \"between now and midnight\". They're really a wrapper for two DateTimes that form its endpoints. Here's what you can do with them:\n\n```js\nnow = DateTime.now();\nlater = DateTime.local(2020, 10, 12);\ni = Interval.fromDateTimes(now, later);\n\ni.length()                             //=> 97098768468\ni.length('years')                //=> 3.0762420239726027\ni.contains(DateTime.local(2019))       //=> true\n\ni.toISO()       //=> '2017-09-14T04:07:11.532-04:00/2020-10-12T00:00:00.000-04:00'\ni.toString()    //=> '[2017-09-14T04:07:11.532-04:00 – 2020-10-12T00:00:00.000-04:00)\n```\n\nIntervals can be split up into smaller intervals, perform set-like operations with other intervals, and few other handy features. See the [Interval API docs](../class/src/interval.js~Interval.html).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\intl.md",
    "name": "./docs/intl.md",
    "content": "# Intl\n\nLuxon uses the native Intl API to provide easy-to-use internationalization. A quick example:\n\n```js\nDateTime.now()\n  .setLocale(\"el\")\n  .toLocaleString(DateTime.DATE_FULL); //=>  '24 Σεπτεμβρίου 2017'\n```\n\n## Making sure you have access to other locales\n\nPlease see the [install guide](install.html) for instructions on making sure your platform has access to the Intl APIs and the ICU data to power it. This especially important for Node, which doesn't ship with ICU data by default.\n\n## How locales work\n\nLuxon DateTimes can be configured using [BCP 47](https://tools.ietf.org/html/rfc5646) locale strings specifying the language to use generating or interpreting strings. The native Intl API provides the actual internationalized strings; Luxon just wraps it with a nice layer of convenience and integrates the localization functionality into the rest of Luxon. The Mozilla MDN Intl docs have a [good description](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation) of how the `locale` argument works. In Luxon, the methods are different but the semantics are the same, except in that Luxon allows you to specify a numbering system and output calendar independently of the locale string.\n\nThe rest of this document will concentrate on what Luxon does when provided with locale information.\n\n## Setting the locale\n\n`locale` is a property of Luxon object. Thus, locale is a sort of setting on the DateTime object, as opposed to an argument you provide the different methods that need internationalized.\n\nYou can generally set it at construction time:\n\n```js\nvar dt = DateTime.fromISO(\"2017-09-24\", { locale: \"fr\" });\ndt.locale; //=> 'fr'\n```\n\nIn this case, the specified locale didn't change the how the parsing worked (there's nothing localized about it), but it did set the locale property in the resulting instance. For other factory methods, such as `fromFormat`, the locale argument _does_ affect how the string is parsed. See further down for more.\n\nYou can change the locale of a DateTime instance (meaning, create a clone DateTime with a different locale) using `setLocale`:\n\n```js\nDateTime.now().setLocale(\"fr\").locale; //=> 'fr'\n```\n\n`setLocale` is just a convenience for `reconfigure`:\n\n```js\nDateTime.now().reconfigure({ locale: \"fr\" }).locale; //=> 'fr'\n```\n\n## Default locale\n\n### Out-of-the-box behavior\n\nBy default, the `locale` property of a new DateTime or Duration is the system locale. On a browser, that means whatever the user has their browser or OS language set to. On Node, that usually means en-US.\n\nAs a result, `DateTime#toLocaleString`, `DateTime#toLocaleParts`, and other human-readable-string methods like `Info.months` will by default generate strings in the user's locale.\n\nHowever, note that `DateTime.fromFormat` and `DateTime#toFormat` fall back on en-US. That's because these methods are often used to parse or format strings for consumption by APIs that don't care about the user's locale. So we need to pick a locale and stick with it, or the code will break depending on whose browser it runs in. There's an exception, though: `DateTime#toFormat` can take \"macro\" formats like \"D\" that produces localized strings as part of a larger string. These _do_ default to the system locale because their entire purpose is to be provide localized strings.\n\n### Setting the default\n\nYou can set a default locale so that news instances will always be created with the specified locale:\n\n```js\nSettings.defaultLocale = \"fr\";\nDateTime.now().locale; //=> 'fr'\n```\n\nNote that this also alters the behavior of `DateTime#toFormat` and `DateTime#fromFormat`.\n\n### Using the system locale in string parsing\n\nYou generally don't want `DateTime#fromFormat` and `DateTime#toFormat` to use the system's locale, since your format won't be sensitive to the locale's string ordering. That's why Luxon doesn't behave that way by default. But if you really want that behavior, you can always do this:\n\n```js\nSettings.defaultLocale = DateTime.now().resolvedLocaleOptions().locale;\n```\n\n## Checking what you got\n\nThe local environment may not support the exact locale you asked for. The native Intl API will try to find the best match. If you want to know what that match was, use `resolvedLocaleOptions`:\n\n```js\nDateTime.fromObject(null, { locale: \"fr-co\" }).resolvedLocaleOptions(); //=> { locale: 'fr',\n//     numberingSystem: 'latn',\n//     outputCalendar: 'gregory' }\n```\n\n## Methods affected by the locale\n\n### Formatting\n\nThe most important method affected by the locale setting is `toLocaleString`, which allows you to produce internationalized, human-readable strings.\n\n```js\ndt.setLocale(\"fr\").toLocaleString(DateTime.DATE_FULL); //=> '25 septembre 2017'\n```\n\nThat's the normal way to do it: set the locale as property of the DateTime itself and let the `toLocaleString` inherit it. But you can specify the locale directly to `toLocaleString` too:\n\n```js\ndt.toLocaleString(Object.assign({ locale: \"es\" }, DateTime.DATE_FULL)); //=> '25 de septiembre de 2017'\n```\n\nAd-hoc formatting also respects the locale:\n\n```js\ndt.setLocale(\"fr\").toFormat(\"MMMM dd, yyyy GG\"); //=> 'septembre 25, 2017 après Jésus-Christ'\n```\n\n### Parsing\n\nYou can [parse](parsing.html) localized strings:\n\n```js\nDateTime.fromFormat(\"septembre 25, 2017 après Jésus-Christ\", \"MMMM dd, yyyy GG\", { locale: \"fr\" });\n```\n\n### Listing\n\nSome of the methods in the [Info](../class/src/info.js~Info.html) class let you list strings like months, weekdays, and eras, and they can be localized:\n\n```js\nInfo.months(\"long\", { locale: \"fr\" }); //=> [ 'janvier', 'février', ...\nInfo.weekdays(\"long\", { locale: \"fr\" }); //=> [ 'lundi', 'mardi', ...\nInfo.eras(\"long\", { locale: \"fr\" }); //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n```\n\n## numberingSystem\n\nDateTimes also have a `numberingSystem` setting that lets you control what system of numerals is used in formatting. In general, you shouldn't override the numbering system provided by the locale. For example, no extra work is needed to get Arabic numbers to show up in Arabic-speaking locales:\n\n```js\nconst dt = DateTime.now().setLocale(\"ar\");\n\ndt.resolvedLocaleOptions(); //=> { locale: 'ar',\n//     numberingSystem: 'arab',\n//     outputCalendar: 'gregory' }\n\ndt.toLocaleString(); //=> '٢٤‏/٩‏/٢٠١٧'\n```\n\nFor this reason, Luxon defaults its own `numberingSystem` property to null, by which it means \"let the Intl API decide\". However, you can override it if you want. This example is admittedly ridiculous:\n\n```js\nconst dt = DateTime.now().reconfigure({ locale: \"it\", numberingSystem: \"beng\" });\ndt.toLocaleString(DateTime.DATE_FULL); //=> '২৪ settembre ২০১৭'\n```\n\nSimilar to `locale`, you can set the default numbering system for new instances:\n\n```js\nSettings.defaultNumberingSystem = \"beng\";\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\zones.md",
    "name": "./docs/zones.md",
    "content": "# Time zones and offsets\n\nLuxon has support for time zones. This page explains how to use them.\n\n## Don't worry!\n\nYou _usually_ don't need to worry about time zones. Your code runs on a computer with a particular time zone and everything will work consistently in that zone without you doing anything. It's when you want to do complicated stuff _across_ zones that you have to think about it. Even then, here are some pointers to help you avoid situations where you have to think carefully about time zones:\n\n1.  Don't make servers think about _local_ times. Configure them to use UTC and write your server's code to work in UTC. Times can often be thought of as a simple count of epoch milliseconds; what you would call that time (e.g. 9:30) in what zone doesn't (again, often) matter.\n2.  Communicate times between systems in ISO 8601, like \"2017-05-15T13:30:34Z\" where possible (it doesn't matter if you use Z or some local offset; the point is that it precisely identifies the millisecond on the global timeline).\n3.  Where possible, only think of time zones as a formatting concern; your application ideally never knows that the time it's working with is called \"9:00\" until it's being rendered to the user.\n4.  Barring 3, do as much manipulation of the time (say, adding an hour to the current time) in the client code that's already running in the time zone where the results will matter.\n\nAll those things will make it less likely you ever need to work explicitly with time zones and may also save you plenty of other headaches. But those aren't possible for some applications; you might need to work with times in zones other than the one the program is running in, for any number of reasons. And that's where Luxon's time zone support comes in.\n\n## Terminology\n\nBear with me here. Time zones are pain in the ass. Luxon has lots of tools to deal with them, but there's no getting around the fact that they're complicated. The terminology for time zones and offsets isn't well-established. But let's try to impose some order:\n\n1.  An **offset** is a difference between the local time and the UTC time, such as +5 (hours) or -12:30. They may be expressed directly in minutes, or in hours, or in a combination of minutes and hours. Here we'll use hours.\n1.  A **time zone** is a set of rules, associated with a geographical location, that determines the local offset from UTC at any given time. The best way to identify a zone is by its IANA string, such as \"America/New_York\". That zone says something to the effect of \"The offset is -4, except between March and November, when it's -5\".\n1.  A **fixed-offset time zone** is any time zone that never changes offsets, such as UTC. Luxon supports fixed-offset zones directly; they're specified like UTC+7, which you can interpret as \"always with an offset of +7\".\n1.  A **named offset** is a time zone-specific name for an offset, such as Eastern Daylight Time. It expresses both the zone (America's EST roughly implies America/New_York) and the current offset (EST means -4). They are confusing in that they overspecify the offset (e.g. for any given time it is unnecessary to specify EST vs EDT; it's always whichever one is right). They are also ambiguous (BST is both British Summer Time and Bangladesh Standard Time), unstandardized, and internationalized (what would a Frenchman call the US's EST?). For all these reasons, you should avoid them when specifying times programmatically. Luxon only supports their use in formatting.\n\nSome subtleties:\n\n1.  Multiple zones can have the same offset (think about the US's zones and their Canadian equivalents), though they might not have the same offset all the time, depending on when their DSTs are. Thus zones and offsets have a many-to-many relationship.\n1.  Just because a time zone doesn't have a DST now doesn't mean it's fixed. Perhaps it had one in the past. Regardless, Luxon does not have first-class access to the list of rules, so it assumes any IANA-specified zone is not fixed and checks for its current offset programmatically.\n\nIf all this seems too terse, check out these articles. The terminology in them is subtly different but the concepts are the same:\n\n- [Time Zones Aren’t Offsets – Offsets Aren’t Time Zones](https://spin.atomicobject.com/2016/07/06/time-zones-offsets/)\n- [Stack Overflow's timezone wiki page](https://stackoverflow.com/tags/timezone/info)\n\n## Luxon works with time zones\n\nLuxon's DateTime class supports zones directly. By default, a date created in Luxon is \"in\" the system's time zone (i.e. the time zone set on the machine it's running on). By \"in\" we mean that the DateTime has, as one of its properties, an associated zone.\n\nIt's important to remember that a DateTime represents a specific instant in time and that instant has an unambiguous meaning independent of what time zone you're in; the zone is really piece of social metadata that affects how humans interact with the time, rather than a fact about the passing of time itself. Of course, Luxon is a library for humans, so that social metadata affects Luxon's behavior too. It just doesn't change _what time it is_.\n\nSpecifically, a DateTime's zone affects its behavior in these ways:\n\n1.  Times will be formatted as they would be in that zone.\n1.  Transformations to the DateTime (such as `plus` or `startOf`) will obey any DSTs in that zone that affect the calculation (see \"Math across DSTs\" below)\n\nGenerally speaking, Luxon does not support changing a DateTime's offset, just its zone. That allows it to enforce the behaviors in the list above. The offset for that DateTime is just whatever the zone says it is. If you are unconcerned with the effects above, then you can always give your DateTime a fixed-offset zone.\n\n## Specifying a zone\n\nLuxon's API methods that take a zone as an argument all let you specify the zone in a few ways.\n\n| Type         | Example            | Description                                                       |\n| ------------ | ------------------ | ----------------------------------------------------------------- |\n| IANA         | 'America/New_York' | that zone                                                         |\n| system       | 'system'           | the system's time zone (the one set on the machine)               |\n| default      | 'default'          | the time zone used to create DateTimes (equals system by default) |\n| UTC          | 'utc'              | Universal Coordinated Time                                        |\n| fixed offset | 'UTC+7'            | a fixed offset zone                                               |\n| Zone         | new YourZone()     | A custom implementation of Luxon's Zone interface (advanced only) |\n\n### IANA support\n\nIANA-specified zones are string identifiers like \"America/New_York\" or \"Asia/Tokyo\". Luxon gains direct support for them by abusing built-in Intl APIs. However, your environment may not support them, in which case, you can't fiddle with the zones directly. You can always use the time zone your system is in (`system`), UTC, and any fixed-offset zone like UTC+7. You can check if your runtime environment supports IANA zones with our handy utility:\n\n```js\nInfo.features().zones; //=> true\n```\n\nIf you're unsure if all your target environments (browser versions and Node versions) support this, check out the [Support Matrix](matrix.html). You can generally count on modern browsers to have this feature, except IE (it is supported in Edge). You may also [polyfill](matrix.html#zones) your environment.\n\nIf you specify a zone and your environment doesn't support that zone, you'll get an [error](errors.html). That could be because the environment doesn't support zones at all, because for whatever reason it doesn't support that _particular_ zone, or because the zone is just bogus. Like this:\n\n```js\ntry {\n  bogus = DateTime.local().setZone(\"America/Bogus\");\n} catch (e) {\n  e.invalidReason; //=> 'unsupported zone'\n}\n```\n\n## Creating DateTimes\n\n### Local by default\n\nBy default, DateTime instances are created in the system's time zone and parsed strings are interpreted as specifying times in the system's time zone. For example, my computer is configured to use `America/New_York`, which has an offset of -4 in May:\n\n```js\nvar local = DateTime.local(2017, 05, 15, 09, 10, 23);\n\nlocal.zoneName; //=> 'America/New_York'\nlocal.toString(); //=> '2017-05-15T09:10:23.000-04:00'\n\nvar iso = DateTime.fromISO(\"2017-05-15T09:10:23\");\n\niso.zoneName; //=> 'America/New_York'\niso.toString(); //=> '2017-05-15T09:10:23.000-04:00'\n```\n\n### Creating DateTimes in a zone\n\nMany of Luxon's factory methods allow you to tell it specifically what zone to create the DateTime in:\n\n```js\nvar overrideZone = DateTime.fromISO(\"2017-05-15T09:10:23\", { zone: \"Europe/Paris\" });\n\noverrideZone.zoneName; //=> 'Europe/Paris'\noverrideZone.toString(); //=> '2017-05-15T09:10:23.000+02:00'\n```\n\nNote two things:\n\n1.  The date and time specified in the string was interpreted as a Parisian local time (i.e. it's the time that corresponds to what would be called 9:10 _there_).\n2.  The resulting DateTime object is in Europe/Paris.\n\nThose are conceptually independent (i.e. Luxon could have converted that instant to the system's time zone), but in practice it's more convenient for the same option to govern both.\n\nIn addition, one static method, `utc()`, specifically interprets the input as being specified in UTC. It also returns a DateTime in UTC:\n\n```js\nvar utc = DateTime.utc(2017, 05, 15, 09, 10, 23);\n\nutc.zoneName; //=> 'UTC'\nutc.toString(); //=> '2017-05-15T09:10:23.000Z'\n```\n\n### Strings that specify an offset\n\nSome input strings may specify an offset as part of the string itself. In these cases, Luxon interprets the time as being specified with that offset, but converts the resulting DateTime into the system's time zone:\n\n```js\nvar specifyOffset = DateTime.fromISO(\"2017-05-15T09:10:23-09:00\");\n\nspecifyOffset.zoneName; //=> 'America/New_York'\nspecifyOffset.toString(); //=> '2017-05-15T14:10:23.000-04:00'\n\nvar specifyZone = DateTime.fromFormat(\n  \"2017-05-15T09:10:23 Europe/Paris\",\n  \"yyyy-MM-dd'T'HH:mm:ss z\"\n);\n\nspecifyZone.zoneName; //=> 'America/New_York'\nspecifyZone.toString(); //=> '2017-05-15T03:10:23.000-04:00'\n```\n\n...unless a zone is specified as an option (see previous section), in which case the DateTime gets converted to _that_ zone:\n\n```js\nvar specifyOffsetAndOverrideZone = DateTime.fromISO(\"2017-05-15T09:10:23-09:00\", {\n  zone: \"Europe/Paris\"\n});\n\nspecifyOffsetAndOverrideZone.zoneName; //=> 'Europe/Paris'\nspecifyOffsetAndOverrideZone.toString(); //=> '2017-05-15T20:10:23.000+02:00'\n```\n\n### setZone\n\nFinally, some parsing functions allow you to \"keep\" the zone in the string as the DateTime's zone. Note that if only an offset is provided by the string, the zone will be a fixed-offset one, since Luxon doesn't know which zone is meant, even if you do.\n\n```js\nvar keepOffset = DateTime.fromISO(\"2017-05-15T09:10:23-09:00\", { setZone: true });\n\nkeepOffset.zoneName; //=> 'UTC-9'\nkeepOffset.toString(); //=> '2017-05-15T09:10:23.000-09:00'\n\nvar keepZone = DateTime.fromFormat(\"2017-05-15T09:10:23 Europe/Paris\", \"yyyy-MM-dd'T'HH:mm:ss z\", {\n  setZone: true\n});\n\nkeepZone.zoneName; //=> 'Europe/Paris'\nkeepZone.toString(); //=> '2017-05-15T09:10:23.000+02:00'\n```\n\n## Changing zones\n\n### setZone\n\nLuxon objects are immutable, so when we say \"changing zones\" we really mean \"creating a new instance with a different zone\". Changing zone generally means \"change the zone in which this DateTime is expressed (and according to which rules it is manipulated), but don't change the underlying timestamp.\" For example:\n\n```js\nvar local = DateTime.local();\nvar rezoned = local.setZone(\"America/Los_Angeles\");\n\n// different times with different offsets\nlocal.toString(); //=> '2017-09-13T18:30:51.141-04:00'\nrezoned.toString(); //=> '2017-09-13T15:30:51.141-07:00'\n\n// but actually the same timestamp\nlocal.valueOf() === rezoned.valueOf(); //=> true\n```\n\n### keepLocalTime\n\nGenerally, it's best to think of the zone as a sort of metadata that you slide around independent of the underlying count of milliseconds. However, sometimes that's not what you want. Sometimes you want to change zones while keeping the local time fixed and instead altering the timestamp. Luxon supports this:\n\n```js\nvar local = DateTime.local();\nvar rezoned = local.setZone(\"America/Los_Angeles\", { keepLocalTime: true });\n\n// identical times with different offsets\nlocal.toString(); //=> '2017-09-13T18:36:23.187-04:00'\nrezoned.toString(); //=> '2017-09-13T18:36:23.187-07:00'\n\nlocal.valueOf() === rezoned.valueOf(); //=> false\n```\n\nIf you find that confusing, I recommend just not using it. On the other hand, if you find yourself using this all the time, you are probably doing something wrong.\n\n## Accessors\n\nLuxon DateTimes have a few different accessors that let you find out about the zone and offset:\n\n```js\nvar dt = DateTime.local();\n\ndt.zoneName; //=> 'America/New_York' (for instance)\ndt.offset; //=> -240\ndt.offsetNameShort; //=> 'EDT'\ndt.offsetNameLong; //=> 'Eastern Daylight Time'\ndt.isOffsetFixed; //=> false\ndt.isInDST; //=> true\n```\n\nThose are all documented in the [DateTime API docs](../class/src/datetime.js~DateTime.html).\n\n## DST weirdness\n\nBecause our ancestors were morons, they opted for a system wherein many governments shift around the local time twice a year for no good reason. And it's not like they do it in a neat, coordinated fashion. No, they do it whimsically, varying the shifts' timing from country to country (or region to region!) and from year to year. And of course, they do it the opposite way south of the Equator. This is all a tremendous waste of everyone's energy and, er, time, but it is how the world works and a date and a time library has to deal with it.\n\nMost of the time, DST shifts will happen without you having to do anything about it and everything will just work. Luxon goes to some pains to make DSTs as unweird as possible. But there are exceptions. This section covers them.\n\n### Invalid times\n\nSome local times simply don't exist. The Spring Forward DST shift involves shifting the local time forward by (usually) one hour. In my zone, `America/New_York`, on March 12, 2017 the millisecond after 1:59:59.999 is 3:00:00.000. Thus the times between 2:00:00.000 and 2:59:59.000, inclusive, don't exist in that zone. But of course, nothing stops a user from constructing a DateTime out of that local time.\n\nIf you create such a DateTime from scratch, the missing time will be advanced by an hour:\n\n```js\nDateTime.local(2017, 3, 12, 2, 30).toString(); //=> '2017-03-12T03:30:00.000-04:00'\n```\n\nYou can also do date math that lands you in the middle of the shift. These also push forward:\n\n```js\nDateTime.local(2017, 3, 11, 2, 30)\n  .plus({ days: 1 })\n  .toString(); //=> '2017-03-12T03:30:00.000-04:00'\nDateTime.local(2017, 3, 13, 2, 30)\n  .minus({ days: 1 })\n  .toString(); //=> '2017-03-12T03:30:00.000-04:00'\n```\n\n### Ambiguous times\n\nHarder to handle are ambiguous times. During Fall Back, some local times happen twice. In my zone, `America/New_York`, on November 5, 2017 the millisecond after 1:59:59.000 became 1:00:00.000. But of course there was already a 1:00 that day, one hour before before this one. So if you create a DateTime with a local time of 1:30, which time do you mean? It's an important question, because they correspond to different moments in time.\n\nHowever, Luxon's behavior here is undefined. It makes no promises about which of the two possible timestamps the instance will represent. Currently, its specific behavior is like this:\n\n```js\nDateTime.local(2017, 11, 5, 1, 30).offset / 60; //=> -4\nDateTime.local(2017, 11, 4, 1, 30).plus({ days: 1 }).offset / 60; //=> -4\nDateTime.local(2017, 11, 6, 1, 30).minus({ days: 1 }).offset / 60; //=> -5\n```\n\nIn other words, sometimes it picks one and sometimes the other. Luxon doesn't guarantee the specific behavior above. That's just what it happens to do.\n\nIf you're curious, this lack of definition is because Luxon doesn't actually know that any particular DateTime is an ambiguous time. It doesn't know the time zones rules at all. It just knows the local time does not contradict the offset and leaves it at that. To find out the time is ambiguous and define exact rules for how to resolve it, Luxon would have to test nearby times to see if it can find duplicate local time, and it would have to do that on every creation of a DateTime, regardless of whether it was anywhere near a real DST shift. Because that's onerous, Luxon doesn't bother.\n\n### Math across DSTs\n\nThere's a whole [section](math.html) about date and time math, but it's worth highlighting one thing here: when Luxon does math across DSTs, it adjusts for them when working with higher-order, variable-length units like days, weeks, months, and years. When working with lower-order, exact units like hours, minutes, and seconds, it does not. For example, DSTs mean that days are not always the same length: one day a year is (usually) 23 hours long and another is 25 hours long. Luxon makes sure that adding days takes that into account. On the other hand, an hour is always 3,600,000 milliseconds.\n\nAn easy way to think of it is that if you add a day to a DateTime, you should always get the same time the next day, regardless of any intervening DSTs. On the other hand, adding 24 hours will result in DateTime that is 24 hours later, which may or may not be the same time the next day. In this example, my zone is `America/New_York`, which had a Spring Forward DST in the early hours of March 12.\n\n```js\nvar start = DateTime.local(2017, 3, 11, 10);\nstart.hour; //=> 10, just for comparison\nstart.plus({ days: 1 }).hour; //=> 10, stayed the same\nstart.plus({ hours: 24 }).hour; //=> 11, DST pushed forward an hour\n```\n\n## Changing the default zone\n\nBy default, Luxon creates DateTimes in the system's time zone, which is normally set to the local time zone where the machine that executes this code is located. However, you can override this behavior globally:\n\n```js\nSettings.defaultZone = \"Asia/Tokyo\";\nDateTime.local().zoneName; //=> 'Asia/Tokyo'\n\nSettings.defaultZone = \"utc\";\nDateTime.local().zoneName; //=> 'UTC'\n\n// you can reset by setting to 'system'\n\nSettings.defaultZone = \"system\";\nDateTime.local().zoneName; //=> 'America/New_York' (for instance)\n```\n\nNote that changing the default zone will only affect the DateTimes created _after_ this change, not the existing ones.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\calendars.md",
    "name": "./docs/calendars.md",
    "content": "# Calendars\n\nThis covers Luxon's support for various calendar systems. If you don't need to use non-standard calendars, you don't need to read any of this.\n\n## Fully supported calendars\n\nLuxon has full support for Gregorian and ISO Week calendars. What I mean by that is that Luxon can parse dates specified in those calendars, format dates into strings using those calendars, and transform dates using the units of those calendars. For example, here is Luxon working directly with an ISO calendar:\n\n```js\nDateTime.fromISO('2017-W23-3').plus({ weeks: 1, days: 2 }).toISOWeekDate(); //=>  '2017-W24-5'\n```\n\nThe main reason I bring all this is up is to contrast it with the capabilities for other calendars described below.\n\n## Output calendars\n\nLuxon has limited support for other calendaring systems. Which calendars are supported at all is a platform-dependent, but can generally be expected to be these: Buddhist, Chinese, Coptic, Ethioaa, Ethiopic, Hebrew, Indian, Islamic, Islamicc, Japanese, Persian, and ROC. **Support is limited to formatting strings with them**, hence the qualified name \"output calendar\".\n\nIn practice this is pretty useful; you can show users the date in their preferred calendaring system while the software works with dates using Gregorian units or Epoch milliseconds. But the limitations are real enough; Luxon doesn't know how to do things like \"add one Islamic month\".\n\nThe output calendar is a property of the DateTime itself. For example:\n\n```js\nvar dtHebrew = DateTime.now().reconfigure({ outputCalendar: 'hebrew' });\ndtHebrew.outputCalendar; //=> 'hebrew'\ndtHebrew.toLocaleString() //=> '4 Tishri 5778'\n```\n\nYou can modulate the structure of that string with arguments to `toLocaleString` (see [the docs on that](formatting.html#tolocalestring-strings-for-humans-)), but the point here is just that you got the alternative calendar.\n\n### Generally supported calendars\n\nHere's a table of the different calendars with examples generated formatting the same date generated like this:\n\n```js\nDateTime.fromObject({ outputCalendar: c }).toLocaleString(DateTime.DATE_FULL);\n```\n\n| Calendar | Example                  |\n| ---      | ---                      |\n| buddhist | September 24, 2560 BE    |\n| chinese  | Eighth Month 5, 2017     |\n| coptic   | Tout 14, 1734 ERA1       |\n| ethioaa  | Meskerem 14, 7510 ERA0   |\n| ethiopic | Meskerem 14, 2010 ERA1   |\n| hebrew   | 4 Tishri 5778            |\n| indian   | Asvina 2, 1939 Saka      |\n| islamic  | Muharram 4, 1439 AH      |\n| islamicc | Muharram 3, 1439 AH      |\n| japanese | September 24, 29 Heisei  |\n| persian  | Mehr 2, 1396 AP          |\n| roc      | September 24, 106 Minguo |\n\n\n### Default output calendar\n\nYou can set the default output calendar for new DateTime instances like this:\n\n```js\nSettings.defaultOuputCalendar = 'persian';\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\formatting.md",
    "name": "./docs/formatting.md",
    "content": "# Formatting\n\nThis section covers creating strings to represent a DateTime. There are three types of formatting capabilities:\n\n1.  Technical formats like ISO 8601 and RFC 2822\n2.  Internationalizable human-readable formats\n3.  Token-based formatting\n\n## Technical formats (strings for computers)\n\n### ISO 8601\n\n[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the most widely used set of string formats for dates and times. Luxon can _parse_ a wide range of them, but provides direct support for formatting only a few of them:\n\n```js\ndt.toISO(); //=> '2017-04-20T11:32:00.000-04:00'\ndt.toISODate(); //=> '2017-04-20'\ndt.toISOWeekDate(); //=> '2017-W17-7'\ndt.toISOTime(); //=> '11:32:00.000-04:00'\n```\n\nGenerally, you'll want the first one. Use it by default when building or interacting with APIs, communicating times over a wire, etc.\n\n### HTTP and RFC 2822\n\nThere are a number of legacy standard date and time formats out there, and Luxon supports some of them. You shouldn't use them unless you have a specific reason to.\n\n```js\ndt.toRFC2822(); //=> 'Thu, 20 Apr 2017 11:32:00 -0400'\ndt.toHTTP(); //=> 'Thu, 20 Apr 2017 03:32:00 GMT'\n```\n\n### Unix timestamps\n\nDateTime objects can also be converted to numerical [Unix timestamps](https://en.wikipedia.org/wiki/Unix_time):\n\n```js\ndt.toMillis(); //=> 1492702320000\ndt.toSeconds(); //=> 1492702320\ndt.valueOf(); //=> 1492702320000, same as .toMillis()\n```\n\n## toLocaleString (strings for humans)\n\n### The basics\n\nModern browsers (and other JS environments) provide support for human-readable, internationalized strings. Luxon provides convenient support for them, and you should use them anytime you want to display a time to a user. Use [toLocaleString](../class/src/datetime.js~DateTime.html#instance-method-toLocaleString) to do it:\n\n```js\ndt.toLocaleString(); //=> '4/20/2017'\ndt.toLocaleString(DateTime.DATETIME_FULL); //=> 'April 20, 2017, 11:32 AM EDT'\ndt.setLocale(\"fr\").toLocaleString(DateTime.DATETIME_FULL); //=> '20 avril 2017 à 11:32 UTC−4'\n```\n\n### Intl.DateTimeFormat\n\nIn the example above, `DateTime.DATETIME_FULL` is one of several convenience formats provided by Luxon. But the arguments are really any object of options that can be provided to [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat). For example:\n\n```js\ndt.toLocaleString({ month: \"long\", day: \"numeric\" }); //=> 'April 20'\n```\n\nAnd that's all the preset is:\n\n```\nDateTime.DATETIME_FULL;  //=> {\n                         //     year: 'numeric',\n                         //     month: 'long',\n                         //     day: 'numeric',\n                         //     hour: 'numeric',\n                         //     minute: '2-digit',\n                         //     timeZoneName: 'short'\n                         //   }\n```\n\nThis also means you can modify the presets as you choose:\n\n```js\ndt.toLocaleString(DateTime.DATE_SHORT); //=>  '4/20/2017'\nvar newFormat = Object.assign(DateTime.DATE_SHORT, { weekday: \"long\" });\ndt.toLocaleString(newFormat); //=>  'Thursday, 4/20/2017'\n```\n\n### Presets\n\nHere's the full set of provided presets using the October 14, 1983 at 13:30:23 as an example.\n\n| Name                        | Description                                                        | Example in en_US                                           | Example in fr                                            |\n| --------------------------- | ------------------------------------------------------------------ | ---------------------------------------------------------- | -------------------------------------------------------- |\n| DATE_SHORT                  | short date                                                         | 10/14/1983                                                 | 14/10/1983                                               |\n| DATE_MED                    | abbreviated date                                                   | Oct 14, 1983                                               | 14 oct. 1983                                             |\n| DATE_MED_WITH_WEEKDAY       | abbreviated date with weekday                                      | Fri, Oct 14, 1983                                          | ven. 14 oct. 1983                                        |\n| DATE_FULL                   | full date                                                          | October 14, 1983                                           | 14 octobre 1983                                          |\n| DATE_HUGE                   | full date with weekday                                             | Tuesday, October 14, 1983                                  | vendredi 14 octobre 1983                                 |\n| TIME_SIMPLE                 | time                                                               | 1:30 PM                                                    | 13:30                                                    |\n| TIME_WITH_SECONDS           | time with seconds                                                  | 1:30:23 PM                                                 | 13:30:23                                                 |\n| TIME_WITH_SHORT_OFFSET      | time with seconds and abbreviated named offset                     | 1:30:23 PM EDT                                             | 13:30:23 UTC−4                                           |\n| TIME_WITH_LONG_OFFSET       | time with seconds and full named offset                            | 1:30:23 PM Eastern Daylight Time                           | 13:30:23 heure d’été de l’Est                            |\n| TIME_24_SIMPLE              | 24-hour time                                                       | 13:30                                                      | 13:30                                                    |\n| TIME_24_WITH_SECONDS        | 24-hour time with seconds                                          | 13:30:23                                                   | 13:30:23                                                 |\n| TIME_24_WITH_SHORT_OFFSET   | 24-hour time with seconds and abbreviated named offset             | 13:30:23 EDT                                               | 13:30:23 UTC−4                                           |\n| TIME_24_WITH_LONG_OFFSET    | 24-hour time with seconds and full named offset                    | 13:30:23 Eastern Daylight Time                             | 13:30:23 heure d’été de l’Est                            |\n| DATETIME_SHORT              | short date & time                                                  | 10/14/1983, 1:30 PM                                        | 14/10/1983 à 13:30                                       |\n| DATETIME_MED                | abbreviated date & time                                            | Oct 14, 1983, 1:30 PM                                      | 14 oct. 1983 à 13:30                                     |\n| DATETIME_FULL               | full date and time with abbreviated named offset                   | October 14, 1983, 1:30 PM EDT                              | 14 octobre 1983 à 13:30 UTC−4                            |\n| DATETIME_HUGE               | full date and time with weekday and full named offset              | Friday, October 14, 1983, 1:30 PM Eastern Daylight Time    | vendredi 14 octobre 1983 à 13:30 heure d’été de l’Est    |\n| DATETIME_SHORT_WITH_SECONDS | short date & time with seconds                                     | 10/14/1983, 1:30:23 PM                                     | 14/10/1983 à 13:30:23                                    |\n| DATETIME_MED_WITH_SECONDS   | abbreviated date & time with seconds                               | Oct 14, 1983, 1:30:23 PM                                   | 14 oct. 1983 à 13:30:23                                  |\n| DATETIME_FULL_WITH_SECONDS  | full date and time with abbreviated named offset with seconds      | October 14, 1983, 1:30:23 PM EDT                           | 14 octobre 1983 à 13:30:23 UTC−4                         |\n| DATETIME_HUGE_WITH_SECONDS  | full date and time with weekday and full named offset with seconds | Friday, October 14, 1983, 1:30:23 PM Eastern Daylight Time | vendredi 14 octobre 1983 à 13:30:23 heure d’été de l’Est |\n\n### Intl\n\n`toLocaleString`'s behavior is affected by the DateTime's `locale`, `numberingSystem`, and `outputCalendar` properties. See the [Intl](intl.html) section for more.\n\n## Formatting with tokens (strings for Cthulhu)\n\nThis section covers generating strings from DateTimes with programmer-specified formats.\n\n### Consider alternatives\n\nYou shouldn't create ad-hoc string formats if you can avoid it. If you intend for a computer to read the string, prefer ISO 8601. If a human will read it, prefer `toLocaleString`. Both are covered above. However, if you have some esoteric need where you need some specific format (e.g. because some other software expects it), then `toFormat` is how you do it.\n\n### toFormat\n\nSee [DateTime#toFormat](../class/src/datetime.js~DateTime.html#instance-method-toFormat) for the API signature. As a brief motivating example:\n\n```js\nDateTime.fromISO(\"2014-08-06T13:07:04.054\").toFormat(\"yyyy LLL dd\"); //=> '2014 Aug 06'\n```\n\nThe supported tokens are described in the table below.\n\n### Intl\n\nAll of the strings (e.g. month names and weekday names) are internationalized by introspecting strings generated by the Intl API. Thus the exact strings you get are implementation-specific.\n\n```js\nDateTime.fromISO(\"2014-08-06T13:07:04.054\")\n  .setLocale(\"fr\")\n  .toFormat(\"yyyy LLL dd\"); //=> '2014 août 06'\n```\n\n### Escaping\n\nYou may escape strings using brackets:\n\n```js\nDateTime.now().toFormat(\"HH [hours and] mm [minutes]\"); //=> '20 hours and 55 minutes'\n```\n\n### Standalone vs format tokens\n\nSome tokens have a \"standalone\" and \"format\" version. Some languages require different forms of a word based on whether it is part of a longer phrase or just by itself (e.g. \"Monday the 22nd\" vs \"Monday\"). Use them accordingly.\n\n```js\nvar d = DateTime.fromISO(\"2014-08-06T13:07:04.054\").setLocale(\"ru\");\nd.toFormat(\"LLLL\"); //=> 'август' (standalone)\nd.toFormat(\"MMMM\"); //=> 'августа' (format)\n```\n\n### Macro tokens\n\nSome of the formats are \"macros\", meaning they correspond to multiple components. These use the native Intl API and will order their constituent parts in a locale-friendly way.\n\n```js\nDateTime.fromISO(\"2014-08-06T13:07:04.054\").toFormat(\"ff\"); //=> 'Aug 6, 2014, 1:07 PM'\n```\n\nThe macro options available correspond one-to-one with the preset formats defined for `toLocaleString`.\n\n### Table of tokens\n\n(Examples below given for 2014-08-06T13:07:04.054 considered as a local time in America/New_York).\n\n| Standalone token | Format token | Description                                                    | Example                                                     |\n| ---------------- | ------------ | -------------------------------------------------------------- | ----------------------------------------------------------- |\n| S                |              | millisecond, no padding                                        | 54                                                          |\n| SSS              |              | millisecond, padded to 3                                       | 054                                                         |\n| u                |              | fractional seconds, functionally identical to SSS              | 054                                                         |\n| s                |              | second, no padding                                             | 4                                                           |\n| ss               |              | second, padded to 2 padding                                    | 04                                                          |\n| m                |              | minute, no padding                                             | 7                                                           |\n| mm               |              | minute, padded to 2                                            | 07                                                          |\n| h                |              | hour in 12-hour time, no padding                               | 1                                                           |\n| hh               |              | hour in 12-hour time, padded to 2                              | 01                                                          |\n| H                |              | hour in 24-hour time, no padding                               | 9                                                           |\n| HH               |              | hour in 24-hour time, padded to 2                              | 13                                                          |\n| Z                |              | narrow offset                                                  | +5                                                          |\n| ZZ               |              | short offset                                                   | +05:00                                                      |\n| ZZZ              |              | techie offset                                                  | +0500                                                       |\n| ZZZZ             |              | abbreviated named offset                                       | EST                                                         |\n| ZZZZZ            |              | unabbreviated named offset                                     | Eastern Standard Time                                       |\n| z                |              | IANA zone                                                      | America/New_York                                            |\n| a                |              | meridiem                                                       | AM                                                          |\n| d                |              | day of the month, no padding                                   | 6                                                           |\n| dd               |              | day of the month, padded to 2                                  | 06                                                          |\n| c                | E            | day of the week, as number from 1-7 (Monday is 1, Sunday is 7) | 3                                                           |\n| ccc              | EEE          | day of the week, as an abbreviate localized string             | Wed                                                         |\n| cccc             | EEEE         | day of the week, as an unabbreviated localized string          | Wednesday                                                   |\n| ccccc            | EEEEE        | day of the week, as a single localized letter                  | W                                                           |\n| L                | M            | month as an unpadded number                                    | 8                                                           |\n| LL               | MM           | month as an padded number                                      | 08                                                          |\n| LLL              | MMM          | month as an abbreviated localized string                       | Aug                                                         |\n| LLLL             | MMMM         | month as an unabbreviated localized string                     | August                                                      |\n| LLLLL            | MMMMM        | month as a single localized letter                             | A                                                           |\n| y                |              | year, unpadded                                                 | 2014                                                        |\n| yy               |              | two-digit year                                                 | 14                                                          |\n| yyyy             |              | four- to six- digit year, pads to 4                            | 2014                                                        |\n| G                |              | abbreviated localized era                                      | AD                                                          |\n| GG               |              | unabbreviated localized era                                    | Anno Domini                                                 |\n| GGGGG            |              | one-letter localized era                                       | A                                                           |\n| kk               |              | ISO week year, unpadded                                        | 14                                                          |\n| kkkk             |              | ISO week year, padded to 4                                     | 2014                                                        |\n| W                |              | ISO week number, unpadded                                      | 32                                                          |\n| WW               |              | ISO week number, padded to 2                                   | 32                                                          |\n| o                |              | ordinal (day of year), unpadded                                | 218                                                         |\n| ooo              |              | ordinal (day of year), padded to 3                             | 218                                                         |\n| q                |              | quarter, no padding                                            | 3                                                           |\n| qq               |              | quarter, padded to 2                                           | 03                                                          |\n| D                |              | localized numeric date                                         | 9/4/2017                                                    |\n| DD               |              | localized date with abbreviated month                          | Aug 6, 2014                                                 |\n| DDD              |              | localized date with full month                                 | August 6, 2014                                              |\n| DDDD             |              | localized date with full month and weekday                     | Wednesday, August 6, 2014                                   |\n| t                |              | localized time                                                 | 9:07 AM                                                     |\n| tt               |              | localized time with seconds                                    | 1:07:04 PM                                                  |\n| ttt              |              | localized time with seconds and abbreviated offset             | 1:07:04 PM EDT                                              |\n| tttt             |              | localized time with seconds and full offset                    | 1:07:04 PM Eastern Daylight Time                            |\n| T                |              | localized 24-hour time                                         | 13:07                                                       |\n| TT               |              | localized 24-hour time with seconds                            | 13:07:04                                                    |\n| TTT              |              | localized 24-hour time with seconds and abbreviated offset     | 13:07:04 EDT                                                |\n| TTTT             |              | localized 24-hour time with seconds and full offset            | 13:07:04 Eastern Daylight Time                              |\n| f                |              | short localized date and time                                  | 8/6/2014, 1:07 PM                                           |\n| ff               |              | less short localized date and time                             | Aug 6, 2014, 1:07 PM                                        |\n| fff              |              | verbose localized date and time                                | August 6, 2014, 1:07 PM EDT                                 |\n| ffff             |              | extra verbose localized date and time                          | Wednesday, August 6, 2014, 1:07 PM Eastern Daylight Time    |\n| F                |              | short localized date and time with seconds                     | 8/6/2014, 1:07:04 PM                                        |\n| FF               |              | less short localized date and time with seconds                | Aug 6, 2014, 1:07:04 PM                                     |\n| FFF              |              | verbose localized date and time with seconds                   | August 6, 2014, 1:07:04 PM EDT                              |\n| FFFF             |              | extra verbose localized date and time with seconds             | Wednesday, August 6, 2014, 1:07:04 PM Eastern Daylight Time |\n| X                |              | unix timestamp in seconds                                      | 1407287224                                                  |\n| x                |              | unix timestamp in milliseconds                                 | 1407287224054                                               |\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\parsing.md",
    "name": "./docs/parsing.md",
    "content": "# Parsing\n\nLuxon is not an NLP tool and isn't suitable for all date parsing jobs. But it can do some parsing:\n\n1.  Direct support for several well-known formats, including most valid ISO 8601 formats\n2.  An ad-hoc parser for parsing specific formats\n\n## Parsing technical formats\n\n### ISO 8601\n\nLuxon supports a wide range of valid ISO 8601 formats through the [fromISO](../class/src/datetime.js~DateTime.html#static-method-fromISO) method.\n\n```js\nDateTime.fromISO(\"2016-05-25\");\n```\n\nAll of these are parsable by `fromISO`:\n\n```\n2016\n2016-05\n201605\n2016-05-25\n20160525\n2016-05-25T09\n2016-05-25T09:24\n2016-05-25T09:24:15\n2016-05-25T09:24:15.123\n2016-05-25T0924\n2016-05-25T092415\n2016-05-25T092415.123\n2016-05-25T09:24:15,123\n2016-W21-3\n2016W213\n2016-W21-3T09:24:15.123\n2016W213T09:24:15.123\n2016-200\n2016200\n2016-200T09:24:15.123\n09:24\n09:24:15\n09:24:15.123\n09:24:15,123\n```\n\n- In addition, all the times support offset arguments like \"Z\" and \"+06:00\".\n- Missing lower-order values are always set to the minimum possible value; i.e. it always parses to a full DateTime. For example, \"2016-05-25\" parses to midnight of that day. \"2016-05\" parses to the first of the month, etc.\n- The time is parsed as a local time if no offset is specified, but see the method docs to see your options, and also check out [time zone docs](zones.html) for more details.\n\n### HTTP and RFC2822\n\nLuxon also provides parsing for strings formatted according to RFC 2822 and the HTTP header specs (RFC 850 and 1123):\n\n```js\nDateTime.fromRFC2822(\"Tue, 01 Nov 2016 13:23:12 +0630\");\nDateTime.fromHTTP(\"Sunday, 06-Nov-94 08:49:37 GMT\");\nDateTime.fromHTTP(\"Sun, 06 Nov 1994 08:49:37 GMT\");\n```\n\n### SQL\n\nLuxon accepts SQL dates, times, and datetimes, via [fromSQL](../class/src/datetime.js~DateTime.html#static-method-fromSQL):\n\n```js\nDateTime.fromSQL(\"2017-05-15\");\nDateTime.fromSQL(\"2017-05-15 09:24:15\");\nDateTime.fromSQL(\"09:24:15\");\n```\n\nIt works similarly to `fromISO`, so see above for additional notes.\n\n### Unix timestamps\n\nLuxon can parse numerical [Unix timestamps](https://en.wikipedia.org/wiki/Unix_time):\n\n```js\nDateTime.fromMillis(1542674993410);\nDateTime.fromSeconds(1542674993);\n```\n\nBoth methods accept the same options, which allow you to specify a timezone, calendar, and/or numbering system.\n\n## Ad-hoc parsing\n\n### Consider alternatives\n\nYou generally shouldn't use Luxon to parse arbitrarily formatted date strings:\n\n1.  If the string was generated by a computer for programmatic access, use a standard format like ISO 8601. Then you can parse it using [DateTime.fromISO](../class/src/datetime.js~DateTime.html#static-method-fromISO).\n2.  If the string is typed out by a human, it may not conform to the format you specify when asking Luxon to parse it. Luxon is quite strict about the format matching the string exactly.\n\nSometimes, though, you get a string from some legacy system in some terrible ad-hoc format and you need to parse it.\n\n### fromFormat\n\nSee [DateTime.fromFormat](../class/src/datetime.js~DateTime.html#static-method-fromFormat) for the method signature. A brief example:\n\n```js\nDateTime.fromFormat(\"May 25 1982\", \"LLLL dd yyyy\");\n```\n\n### Intl\n\nLuxon supports parsing internationalized strings:\n\n```js\nDateTime.fromFormat(\"mai 25 1982\", \"LLLL dd yyyy\", { locale: \"fr\" });\n```\n\nNote, however, that Luxon derives the list of strings that can match, say, \"LLLL\" (and their meaning) by introspecting the environment's Intl implementation. Thus the exact strings may in some cases be environment-specific. You also need the Intl API available on the target platform (see the [support matrix](matrix.html)).\n\n### Limitations\n\nNot every token supported by `DateTime#toFormat` is supported in the parser. For example, there's no `ZZZZ` or `ZZZZZ` tokens. This is for a few reasons:\n\n- Luxon relies on natively-available functionality that only provides the mapping in one direction. We can ask what the named offset is and get \"Eastern Standard Time\" but not ask what \"Eastern Standard Time\" is most likely to mean.\n- Some things are ambiguous. There are several Eastern Standard Times in different countries and Luxon has no way to know which one you mean without additional information (such as that the zone is America/New_York) that would make EST superfluous anyway. Similarly, the single-letter month and weekday formats (EEEEE) that are useful in displaying calendars graphically can't be parsed because of their ambiguity.\n- Because of the limitations above, Luxon also doesn't support the \"macro\" tokens that include offset names, such ass \"ttt\" and \"FFFF\".\n\n### Debugging\n\nThere are two kinds of things that can go wrong when parsing a string: a) you make a mistake with the tokens or b) the information parsed from the string does not correspond to a valid date. To help you sort that out, Luxon provides a method called [fromFormatExplain](../class/src/datetime.js~DateTime.html#static-method-fromFormatExplain). It takes the same arguments as `fromFormat` but returns a map of information about the parse that can be useful in debugging.\n\nFor example, here the code is using \"MMMM\" where \"MMM\" was needed. You can see the regex Luxon uses and see that it didn't match anything:\n\n```js\n> DateTime.fromFormatExplain(\"Aug 6 1982\", \"MMMM d yyyy\")\n\n{ input: 'Aug 6 1982',\n  tokens:\n   [ { literal: false, val: 'MMMM' },\n     { literal: false, val: ' ' },\n     { literal: false, val: 'd' },\n     { literal: false, val: ' ' },\n     { literal: false, val: 'yyyy' } ],\n  regex: '(January|February|March|April|May|June|July|August|September|October|November|December)( )(\\\\d\\\\d?)( )(\\\\d{4})',\n  matches: {},\n  result: {},\n  zone: null }\n```\n\nIf you parse something and get an invalid date, the debugging steps are slightly different. Here, we're attempting to parse August 32nd, which doesn't exist:\n\n```js\nvar d = DateTime.fromFormat(\"August 32 1982\", \"MMMM d yyyy\");\nd.isValid; //=> false\nd.invalidReason; //=> 'day out of range'\n```\n\nFor more on validity and how to debug it, see [errors](errors.html). You may find more comprehensive tips there. But as it applies specifically to `fromFormat`, again try `fromFormatExplain`:\n\n```js\n> DateTime.fromFormatExplain(\"August 32 1982\", \"MMMM d yyyy\")\n\n{ input: 'August 32 1982',\n  tokens:\n   [ { literal: false, val: 'MMMM' },\n     { literal: false, val: ' ' },\n     { literal: false, val: 'd' },\n     { literal: false, val: ' ' },\n     { literal: false, val: 'yyyy' } ],\n  regex: '(January|February|March|April|May|June|July|August|September|October|November|December)( )(\\\\d\\\\d?)( )(\\\\d{4})',\n  matches: { M: 8, d: 32, y: 1982 },\n  result: { month: 8, day: 32, year: 1982 },\n  zone: null }\n```\n\nBecause Luxon was able to parse the string without difficulty, the output is a lot richer. And you can see that the \"day\" field is set to 32. Combined with the \"out of range\" explanation above, that should clear up the situation.\n\n### Table of tokens\n\n(Examples below given for 2014-08-06T13:07:04.054 considered as a local time in America/New_York). Note that many tokens supported by the [formatter](formatting.md) are **not** supported by the parser. That includes all the \"macro\" formats like \"D\" for \"localized numeric date\".\n\n| Standalone token | Format token | Description                                                    | Example                   |\n| ---------------- | ------------ | -------------------------------------------------------------- | ------------------------- |\n| S                |              | millisecond, no padding                                        | 54                        |\n| SSS              |              | millisecond, padded to 3                                       | 054                       |\n| u                |              | fractional seconds, (5 is a half second, 54 is slightly more)  | 54                        |\n| s                |              | second, no padding                                             | 4                         |\n| ss               |              | second, padded to 2 padding                                    | 04                        |\n| m                |              | minute, no padding                                             | 7                         |\n| mm               |              | minute, padded to 2                                            | 07                        |\n| h                |              | hour in 12-hour time, no padding                               | 1                         |\n| hh               |              | hour in 12-hour time, padded to 2                              | 01                        |\n| H                |              | hour in 24-hour time, no padding                               | 9                         |\n| HH               |              | hour in 24-hour time, padded to 2                              | 13                        |\n| Z                |              | narrow offset                                                  | +5                        |\n| ZZ               |              | short offset                                                   | +05:00                    |\n| ZZZ              |              | techie offset                                                  | +0500                     |\n| z                |              | IANA zone                                                      | America/New_York          |\n| a                |              | meridiem                                                       | AM                        |\n| d                |              | day of the month, no padding                                   | 6                         |\n| dd               |              | day of the month, padded to 2                                  | 06                        |\n| E                | c            | day of the week, as number from 1-7 (Monday is 1, Sunday is 7) | 3                         |\n| EEE              | ccc          | day of the week, as an abbreviate localized string             | Wed                       |\n| EEEE             | cccc         | day of the week, as an unabbreviated localized string          | Wednesday                 |\n| M                | L            | month as an unpadded number                                    | 8                         |\n| MM               | LL           | month as an padded number                                      | 08                        |\n| MMM              | LLL          | month as an abbreviated localized string                       | Aug                       |\n| MMMM             | LLLL         | month as an unabbreviated localized string                     | August                    |\n| y                |              | year, 1-6 digits, very literally                               | 2014                      |\n| yy               |              | two-digit year, interpreted as > 1960 (also accepts 4)         | 14                        |\n| yyyy             |              | four-digit year                                                | 2014                      |\n| yyyyy            |              | four- to six-digit years                                       | 10340                     |\n| yyyyyy           |              | six-digit years                                                | 010340                    |\n| G                |              | abbreviated localized era                                      | AD                        |\n| GG               |              | unabbreviated localized era                                    | Anno Domini               |\n| GGGGG            |              | one-letter localized era                                       | A                         |\n| kk               |              | ISO week year, unpadded                                        | 17                        |\n| kkkk             |              | ISO week year, padded to 4                                     | 2014                      |\n| W                |              | ISO week number, unpadded                                      | 32                        |\n| WW               |              | ISO week number, padded to 2                                   | 32                        |\n| o                |              | ordinal (day of year), unpadded                                | 218                       |\n| ooo              |              | ordinal (day of year), padded to 3                             | 218                       |\n| q                |              | quarter, no padding                                            | 3                         |\n| D                |              | localized numeric date                                         | 9/4/2017                  |\n| DD               |              | localized date with abbreviated month                          | Aug 6, 2014               |\n| DDD              |              | localized date with full month                                 | August 6, 2014            |\n| DDDD             |              | localized date with full month and weekday                     | Wednesday, August 6, 2014 |\n| t                |              | localized time                                                 | 9:07 AM                   |\n| tt               |              | localized time with seconds                                    | 1:07:04 PM                |\n| T                |              | localized 24-hour time                                         | 13:07                     |\n| TT               |              | localized 24-hour time with seconds                            | 13:07:04                  |\n| TTT              |              | localized 24-hour time with seconds and abbreviated offset     | 13:07:04 EDT              |\n| f                |              | short localized date and time                                  | 8/6/2014, 1:07 PM         |\n| ff               |              | less short localized date and time                             | Aug 6, 2014, 1:07 PM      |\n| F                |              | short localized date and time with seconds                     | 8/6/2014, 1:07:04 PM      |\n| FF               |              | less short localized date and time with seconds                | Aug 6, 2014, 1:07:04 PM   |\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\math.md",
    "name": "./docs/math.md",
    "content": "# Math\n\nThis page covers some oddball topics related to date and time math, which has some quirky corner cases.\n\n## Calendar math vs time math\n\n### The basics\n\nMath with dates and times can be unintuitive to programmers. If it's Feb 13, 2017 and I say \"in exactly one month\", you know I mean March 13. Exactly one month after that is April 13. But because February is a shorter month than March, that means we added a different amount of time in each case. On the other hand, if I said \"30 days from February 13\", you'd try to figure out what day that landed on in March. Here it is in Luxon:\n\n```js\nDateTime.local(2017, 2, 13).plus({ months: 1 }).toISODate() //=> '2017-03-13'\n\nDateTime.local(2017, 2, 13).plus({ days: 30 }).toISODate() //=> '2017-03-15'\n```\n\nMore generally we can differentiate two modes of math:\n\n * Calendar math works with higher-order, variable-length units like years and months\n * Time math works with lower-order, constant-length units such as hours, minutes, and seconds.\n\n### Which units use which math?\n\nThese units use calendar math:\n\n * **Years** vary because of leap years.\n * **Months** vary because they're just different lengths.\n * **Days** vary because DST transitions mean some days are 23 or 25 hours long.\n * **Quarters** are always three months, but months vary in length so quarters do too.\n * **Weeks** are always the same number of days, but days vary so weeks do too.\n \nThese units use time math:\n\n * **Hours** are always 60 minutes\n * **Minutes** are always 60 seconds\n * **Seconds** are always 1000 milliseconds\n\nDon't worry about leap seconds. Javascript and most other programming environments don't account for them; they just happen as abrupt, invisible changes to the underlying system's time.\n\n### How to think about calendar math\n\nIt's best not to think of calendar math as requiring arcane checks on the lengths of intervening periods. Instead, think of them as **adjusting that unit directly and keeping lower order date components constant**. Let's go back to the Feb 13 + 1 month example. If you didn't have Luxon, you would do something like this to accomplish that:\n\n```js\nvar d = new Date('2017-02-13')\nd.setMonth(d.getMonth() + 1)\nd.toLocaleString() //=> '3/13/2017, 12:00:00 AM'\n```\n\nAnd under the covers, that's more or less what Luxon does too. It doesn't boil the operation down to a milliseconds delta because that's not what's being asked. Instead, it fiddles with what it thinks the date should be and then uses the built-in Gregorian calendar to compute the new timestamp.\n\n### DSTs\n\nThere's a whole section about this in the [time zones documentation](zones.html#math-across-dsts). But here's a quick example (Spring Forward is early on March 12 in my time zone):\n\n```\nvar start = DateTime.local(2017, 3, 11, 10);\nstart.hour                          //=> 10, just for comparison\nstart.plus({days: 1}).hour          //=> 10, stayed the same\nstart.plus({hours: 24}).hour        //=> 11, DST pushed forward an hour\n```\n\nSo in adding a day, we kept the hour at 10, even though that's only 23 hours later.\n\n### Time math\n\nTime math is different. In time math, we're just adjusting the clock, adding or subtracting from the epoch timestamp. Adding 63 hours is really the same as adding 63 hours' worth of milliseconds. Under the covers, Luxon does this exactly the opposite of how it does calendar math; it boils the operation down to milliseconds, computes the new timestamp, and then computes the date out of that.\n\n## Math with multiple units\n\nIt's possible to do math with multiple units:\n\n```js\nDateTime.fromISO('2017-05-15').plus({months: 2, days: 6}).toISODate(); //=> '2017-07-21'\n```\n\nThis isn't as simple as it looks. For example, what should you expect this to do?\n\n```js\nDateTime.fromISO('2017-04-30').plus({months: 1, days: 1}).toISODate();\n```\n\nIf the day is added first, we'll get an intermediate value of May 1. Adding a month to that gives us June 1. But if the month is added first, we'll an intermediate value of May 30 and day after that is May 31. (See \"Calendar math vs time math above if this is confusing.) So the order matters.\n\nLuxon has a simple rule for this: **math is done from highest order to lowest order**. So the result of the example above is May 31. This rule isn't logically necessary, but it does seem reflect what people mean. Of course, Luxon can't enforce this rule if you do the math in separate operations:\n\n```js\nDateTime.fromISO('2017-04-30').plus({days: 1}).plus({months: 1}).toISODate() //=> '2017-06-01'\n```\n\nIt's not a coincidence that Luxon's interface makes it awkward to do this wrong.\n\n## Comparing DateTimes\n\nDateTime implements `#valueOf` to return the epoch timestamp, so you can compare DateTimes with `<`, `>`, `<=`, and `>=`. That lets you find out if one DateTime is after or before another DateTime.\n\n```js\nd1 < d2 // is d1 before d2?\n```\n\nHowever, be aware that `===` compares object identity, which is not a useful concept in a library with immutable types. Use `#equals` to compare both the time and additional metadata, such as the locale and time zone. If you're only interested in checking the equality of the timestamps, you can use:\n\n```js\nd1.toMillis() === d2.toMillis() // are d1 and d2 the same instant in time?\n+d1 === +d2 // same test, using object coercion\n```\n\nYou may also use `#hasSame` to make more subtle comparisons:\n\n```js\nd1.hasSame(d2, 'millisecond'); // equivalent to `+d1 === +d2`\nd1.hasSame(d2, 'minute');       // both DateTimes are in the same minute (and hour, day, month, etc)\nd1.hasSame(d2, 'year');         // etc\n```\n\nNote that these are checking against the calendar. For example, if `d1` is in 2017, calling `hasSame` with \"year\" asks if d2 is also in 2017, not whether the DateTimes within a year of each other. For that, you'd need `diff` (see below).\n\nIf you'd like to compare using a specific unit, you can achieve this by combining `#startOf` and the `#valueOf` comparisons above.\n\n```js\nvar d1 = DateTime.fromISO('2017-04-30');\nvar d2 = DateTime.fromISO('2017-04-01');\n\nd2 < d1                                   //=> true\nd2.startOf('year') < d1.startOf('year')   //=> false\nd2.startOf('month') < d1.startOf('month') //=> false\nd2.startOf('day') < d1.startOf('day')     //=> true\n```\n\n## Duration math\n\n### Basics\n\n[Durations](../class/src/duration.js~Duration.html) are quantities of time, like \"3 days and 6 hours\". Luxon has no idea *which* 3 days and 6 hours they represent; it's just how Luxon represents those quantities in abstract, unmoored from the timeline. This is both tremendously useful and occasionally confusing. I'm not going to give a detailed tour of their capabilities here (see the API docs for that), but I do want to clear up some of those confusions.\n\nHere's some very basic stuff to get us going:\n\n```js\nvar dur = Duration.fromObject({ days: 3, hours: 6})\n\n// examine it\ndur.toObject()          //=> { days: 3, hours: 6 }\n\n// express in minutes\ndur.as('minutes')       //=> 4680\n\n// convert to minutes\ndur.shiftTo('minutes').toObject() //=> { minutes: 4680 }\n\n// add to a DateTime\nDateTime.fromISO(\"2017-05-15\").plus(dur).toISO() //=> '2017-05-18T06:00:00.000-04:00'\n```\n\n### Diffs\n\nYou can subtract one time from another to find out how much time there is between them. Luxon's [diff](../class/src/datetime.js~DateTime.html#instance-method-diff) method does this and it returns a Duration. For example:\n\n```js\nvar end = DateTime.fromISO('2017-03-13');\nvar start = DateTime.fromISO('2017-02-13');\n\nvar diffInMonths = end.diff(start, 'months');\ndiffInMonths.toObject(); //=> { months: 1 }\n```\n\nNotice we had to pick the unit to keep track of the diff in. The default is milliseconds:\n\n```js\nvar diff = end.diff(start);\ndiff.toObject() //=> { milliseconds: 2415600000 }\n```\n\nFinally, you can diff using multiple units:\n\n```js\nvar end = DateTime.fromISO('2017-03-13');\nvar start = DateTime.fromISO('2017-02-15');\nend.diff(start, ['months', 'days']) //=> { months: 1, days: 2 }\n```\n\n### Casual vs longterm conversion accuracy\n\nDurations represent bundles of time with specific units, but Luxon allows you to convert between them:\n\n * `shiftTo` returns a new Duration denominated in the specified units.\n * `as` converts the duration to just that unit and returns its value\n\n```js\nvar dur = Duration.fromObject({ months: 4, weeks: 2, days: 6 })\n\ndur.as('days')                            //=> 140\ndur.shiftTo('days').toObject()            //=> { days: 140 }\ndur.shiftTo('weeks', 'hours').toObject()  //=> { weeks: 18, hours: 144 }\n```\n\nBut how do those conversions actually work? First, uncontroversially:\n\n * 1 week = 7 days\n * 1 day = 24 hours\n * 1 hour = 60 minutes\n * 1 minute = 60 seconds\n * 1 second = 1000 milliseconds\n \nThese are always true and you can roll them up and down with consistency (e.g. `1 hour = 60 * 60 * 1000 milliseconds`). However, this isn't really true for the higher order units, which vary in length, even putting DSTs aside. A year is sometimes 365 days long and sometimes 366. Months are 28, 29, 30, or 31 days. By default Luxon converts between these units using what you might call \"casual\" conversions:\n\n|         | Month | Week | Day |\n| ---     | ---   |  --- | --- |\n| Year    | 12    |   52 | 365 |\n| Quarter | 3     |   13 |  91 |\n| Month   |       |    4 |  30 |\n\nThese should match your intuition and for most purposes they work well. But they're not just wrong; they're not even self-consistent:\n\n```js\ndur.shiftTo('months').shiftTo('days').as('years') //=> 0.9863013698630136\n```\n\nThis is because 12 * 30 != 365. These errors can be annoying, but they can also cause significant issues if the errors accumulate:\n\n```js\nvar dur = Duration.fromObject({ years: 50000 });\nDateTime.now().plus(dur.shiftTo('milliseconds')).year //=> 51984\nDateTime.now().plus(dur).year                         //=> 52017\n```\n\nThose are 33 years apart! So Luxon offers an alternative conversion scheme called \"longterm\", based on the 400-year calendar cycle:\n\n|         | Month |     Week |       Day |\n|----     | ---   |      --- |       --- |\n| Year    | 12    |  52.1775 |  365.2425 |\n| Quarter |  3    | 13.04435 | 91.310625 |\n| Month   |       | 4.348125 | 30.436875 |\n\nYou can see why these are irritating to work with, which is why they're not the default.\n\nLuxon methods that create Durations de novo accept an option called `conversionAccuracy`. You can set it to \"casual\" or \"longterm\". It's a property of the Duration itself, so any conversions you do use the rule you've picked, and any new Durations you derive from it will retain that property.\n\n```js\nDuration.fromObject({ years: 23, conversionAccuracy: 'longterm' });\nDuration.fromISO('PY23', { conversionAccuracy: 'longterm' });\n\nend.diff(start, 'days', { conversionAccuracy: 'longterm' })\n```\n\nYou can also create an accurate Duration out of an existing one:\n\n```js\nvar pedanticDuration = casualDuration.reconfigure({ conversionAccuracy: 'longterm' });\n```\n\nThese Durations will do their conversions differently.\n\n\n### Losing information\n\nBe careful of converting between units. It's easy to lose information. Let's say we converted a diff into days:\n\n\n```js\nvar end = DateTime.fromISO('2017-03-13');\nvar start = DateTime.fromISO('2017-02-13');\n\nvar diffInMonths = end.diff(start, 'months');\ndiffInMonths.as('days'); //=> 30\n```\n\nThat's our conversion between months and days (you could also do a longterm-accurate conversion; it wouldn't fix the issue ahead). But this isn't the number of days between February 15 and March 15!\n\n```js\nvar diffInDays = end.diff(start, 'days');\ndiffInDays.toObject(); //=> { days: 28 }\n```\n\nIt's important to remember that diffs are Duration objects, and a Duration is just a dumb pile of time units our computation spat out. Unlike an Interval, a Duration doesn't \"remember\" what the inputs to the diff were. So we lost some information converting between units. This mistake is really common when rolling up:\n\n\n```js\nvar diff = end.diff(start); // default unit is milliseconds\n\n// wtf, that's not a month!\ndiff.as('months'); //=> 0.9319444 \n\n// it's not even the right number of days! (hint: my time zone has a DST)\ndiff.shiftTo('hours').as('days'); //=> 27.958333333333332\n```\n\nNormally you won't run into this problem if you think clearly about what you want to do with a diff. Specifically, make sure you diff in the units you actually want to use. Then Luxon knows to answer the question you really want to ask.\n\n```js\nvar monthsDiff = end.diff(start, \"months\");\nvar daysDiff = end.diff(start, \"days\");\n```\n\nBut sometimes you really do want an object that represents the subtraction itself, not the result. [Intervals](../class/src/interval.js~Interval.html) can help. Intervals are mostly used to keep track of ranges of time, but they make for \"anchored\" diffs too. For example:\n\n```js\nvar end = DateTime.fromISO('2017-03-13');\nvar start = DateTime.fromISO('2017-02-13');\nvar i = Interval.fromDateTimes(start, end);\n\ni.length('days');       //=> 28\ni.length('months')      //=> 1\n```\n\nBecause the Interval stores its endpoints and computes `length` on the fly, it retakes the diff each time you query it. Of course, precisely because an Interval *isn't* an abstract bundle of time, it can't be used in places where Durations can. For example, you can't add them to DateTime via `plus()` because Luxon wouldn't know what units to do the math in (see \"Calendar vs time math\" above). But you can convert the interval into a Duration by picking the units:\n\n```js\ni.toDuration('months').toObject(); //=> { months: 1 }\ni.toDuration('days').toObject(); //=> { days: 28 }\n```\n\nYou can even pick multiple units:\n\n```js\nend = DateTime.fromISO('2018-05-25');\ni = start.until(end);\ni.toDuration(['years', 'months', 'days']).toObject(); //=> { years: 1, months: 3, days: 12 }\n```\n\nOf course, once you've converted to a Duration, you're back in the same spot you were with the diff case; *further* conversions will be lossy. So the point is to think carefully about what information you have when.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\errors.md",
    "name": "./docs/errors.md",
    "content": "# Errors\n\nSometimes Luxon throws errors. Here's a rundown on when and why.\n\n## InvalidUnitError\n\n## UnitOutOfRangeError\n\n## InvalidZoneError\n\n## MissingPlatformFeatureError\n\n## ConflictingSpecificationError\n\n## InvalidArgumentError\n\nThe most important error is the `InvalidDateTime` error. One of the most irritating aspects of programming with time is that it's possible to end up with invalid dates. This is a bit subtle: barring integer overflows, there's no count of milliseconds that don't correspond to a valid DateTime, but when working with calendar units, it's pretty easy to say something like \"June 400th\". Luxon considers that invalid and will throw an error.\n\n```js\n> var dt = DateTime.fromObject({ month: 6, day: 400 }); // throws!\n```\n\nSome examples:\n\n- February 40th\n- 28:00\n- -4 pm\n- etc\n\nBut there are other ways to do it:\n\n```js\n// specify a time zone that doesn't exist\nDateTime.now().setZone(\"America/Blorp\"); // throws\n\n// provide contradictory information (here, this date is not a Wednesday)\nDateTime.fromObject({ year: 2017, month: 5, day: 25, weekday: 3 }).; // throws\n```\n\n##InvalidArgumentError\n\nSometimes Luxon decides that the problem isn't so much the data being wrong, but that the programmer misunderstood the interface. For that, Luxon throws an `InvalidArgumentError`.\n\n```js\nDateTime.now().set({ blorp: 7 }); //=> kerplosion\n```\n\n## Debugging invalid DateTimes\n\nBecause DateTimes fail silently, they can be a pain to debug. Luxon has some features that can help.\n\n### invalidReason and invalidExplanation\n\nInvalid DateTime objects are happy to tell you why they're invalid. `invalidReason` will give you a consistent error code you can use, whereas `invalidExplanation` will spell it out\n\n```js\nvar dt = DateTime.now().setZone(\"America/Blorp\");\ndt.invalidReason; //=>  'unsupported zone'\ndt.invalidExplanation; //=> 'the zone \"America/Blorp\" is not supported'\n```\n\n### throwOnInvalid\n\nYou can make Luxon throw whenever it creates an invalid DateTime. The message will combine `invalidReason` and `invalidExplanation`:\n\n```js\nSettings.throwOnInvalid = true;\nDateTime.now().setZone(\"America/Blorp\"); //=> Error: Invalid DateTime: unsupported zone: the zone \"America/Blorp\" is not supported\n```\n\nYou can of course leave this on in production too, but be sure to try/catch it appropriately.\n\n## Invalid Durations\n\nDurations can be invalid too. The easiest way to get one is to diff an invalid DateTime.\n\n```js\nDateTime.local(2017, 28).diffNow().isValid; //=> false\n```\n\n## Invalid Intervals\n\nIntervals can be invalid. This can happen a few different ways:\n\n- The end time is before the start time\n- It was created from invalid DateTime or Duration\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\matrix.md",
    "name": "./docs/matrix.md",
    "content": "# Support matrix\n\nThis page covers what platforms are supported by Luxon and what caveats apply to them.\n\n## Official support\n\nLuxon officially supports the last two versions of the major browsers, with some caveats. The table below shows which of the not-universally-supported features are available in what environments.\n\n| Browser                          | Versions | Zones | Intl basics | Intl tokens | Intl relative time formatting |\n| -------------------------------- | -------- | ----- | ----------- | ----------- | ----------------------------- |\n| Chrome                           | >= 71    | ✓     | ✓           | ✓           | ✓                             |\n|                                  | >= 54    | ✓     | ✓           | ✓           | ✗                             |\n| Firefox                          | >= 65    | ✓     | ✓           | ✓           | ✓                             |\n| Edge                             | 18       | ✓     | ✓           | ✓           | ✗                             |\n|                                  | 16       | ✓     | ✓           | ✗           | ✗                             |\n| IE                               | 11       | ✗     | ✓           | ✗           | ✗                             |\n|                                  | 10       | ✗     | ✗           | ✗           | ✗                             |\n| Safari                           | 11       | ✓     | ✓           | ✓           | ✗                             |\n|                                  | 10       | ✓     | ✗           | ✗           | ✗                             |\n| iOS Safari (iOS version numbers) | >= 11    | ✓     | ✓           | ✓           | ✗                             |\n|                                  | 10       | ✓     | ✗           | ✗           | ✗                             |\n|                                  | 9        | ✗     | ✓           | ✗           | ✗                             |\n| Node w/ICU                       | >= 12    | ✓     | ✓           | ✓           | ✓                             |\n|                                  | >= 8     | ✓     | ✓           | ✓           | ✗                             |\n|                                  | 6        | ✗     | ✓           | ✗           | ✗                             |\n| Node w/o ICU                     | >= 8     | ✓     | ✗           | ✗           | ✗                             |\n|                                  | 6        | ✗     | ✗           | ✗           | ✗                             |\n\n- Those capabilities are explained in the next sections, along with possible polyfill options\n- \"w/ICU\" refers to providing Node with ICU data. See the [install](install.html#node) for instructions\n\n## Internet Explorer and platform polyfills\n\nIf you're supporting IE 10 or 11, you need some polyfills just to make Luxon work at all.\n\nWith IE 11, you can just add a polyfill like this to get the JS features you need:\n\n```html\n<script src=\"https://cdn.polyfill.io/v2/polyfill.js?features=default,String.prototype.repeat,Array.prototype.find,Array.prototype.findIndex,Math.trunc,Math.sign\"></script>\n```\n\nThat hasn't checked off the other boxes in the chart above though, so keep reading for those.\n\nWith IE 10, you have the same problems as IE 11, except that you don't even get basic Intl support. You'll need to tack on the languages you wish to support. See the Basic Internationalization polyfill section below.\n\nAlternatively, you can use a polyfilled build of Luxon, which you can find here:\n\n- [Download full polyfilled build](../../global-filled/luxon.js)\n- [Download minified polyfilled build](../../global-filled/luxon.min.js)\n\nThese use global polyfills, though, which means newer browsers will be running the injected code too. And the same doesn't-include-intl-and-zone-support caveats apply to it too.\n\n## Effects of missing features\n\n**If the platforms you're targeting has all its boxes above check off, ignore this section**.\n\nIn the support table above, you can see that some environments are missing capabilities. They affect a subset of Luxon's features that depend on specific APIs that some older browsers don't support.\n\n1.  **Basic internationalization**. Luxon doesn't have internationalized strings in its code; instead it relies on the hosts implementation of the Intl API. This includes the very handy [toLocaleString](../class/src/datetime.js~DateTime.html#instance-method-toLocaleString). Most browsers and recent versions of Node support this.\n2.  **Internationalized tokens**. Listing the months or weekdays of a locale and outputting or parsing ad-hoc formats in non-English locales requires that Luxon be able to programmatically introspect the results of an Intl call. It does this using Intl's [formatToParts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts) method, which is a relatively recent addition in most browsers. So you could have the Intl API without having that.\n3.  **Zones**. Luxon's support of IANA zones works by abusing the Intl API. That means you have to have that API and that the API must support a reasonable list of time zones. Zones are a recent addition to some platforms.\n4.  **Relative time formatting**. Luxon's support for relative time formatting (e.g. `DateTime#toRelative` and `DateTime#toRelativeCalendar`) depends on Intl.RelativeTimeFormat, which is currently only available in Chrome and Firefox. Luxon will fall back to using English if that capability is missing.\n\nIf the browser lacks these capabilities, Luxon tries its best:\n\n| Feature                                | Full support | No Intl at all                   | Intl but no formatToParts                          | No IANA zone support | No relative time format |\n| -------------------------------------- | ------------ | -------------------------------- | -------------------------------------------------- | -------------------- | ----------------------- |\n| Most things                            | OK           | OK                               | OK                                                 | OK                   | OK                      |\n| Using explicit time zones              | OK           | Error                            | OK                                                 | Error                | OK                      |\n| `DateTime#toLocaleString`              | OK           | Uses English with caveats†       | OK                                                 | OK                   | OK                      |\n| `DateTime#toLocaleParts`               | OK           | Empty array                      | Empty array                                        | OK                   | OK                      |\n| `DateTime#toFormat` in en-US           | OK           | OK                               | OK                                                 | OK                   | OK                      |\n| `DateTime#toFormat` in other locales   | OK           | Uses English                     | Uses English if format contains localized strings‡ | OK                   | OK                      |\n| `DateTime#fromFormat` in en-US         | OK           | OK                               | OK                                                 | OK                   | OK                      |\n| `DateTime#toRelative` in en-US         | OK           | OK                               | OK                                                 | OK                   | OK                      |\n| `DateTime#toRelative` in other locales | Uses English | OK                               | OK                                                 | OK                   | Uses English            |\n| `DateTime#offsetNameShort`, etc        | OK           | Returns null                     | OK in most locales§                                | OK                   | OK                      |\n| `fromFormat` in other locales          | OK           | Error if uses localized strings‡ | Uses English if format contains localized strings‡ | OK                   | OK                      |\n| `Info.months`, etc in en-US            | OK           | OK                               | OK                                                 | OK                   | OK                      |\n| `Info.months`, etc in other locales    | OK           | Uses English                     | Uses English                                       | OK                   | OK                      |\n\n† Specifically, the caveat here is that this English fallback only works as you might expect for Luxon-provided preset arguments, like `DateTime.DATETIME_MED`. If you provide your own, modify the presets, or even clone them, it will use `DateTime.DATETIME_HUGE`. If you don't provide any arguments at all, it defaults to `DateTime.DATE_SHORT`.\n\n‡ This means that Luxon can't parse anything with a word in it like localized versions of \"January\" or \"Tuesday\". It's fine with numbers, as long as they're Western numbers.\n\n§ This fallback uses a hack that is not guaranteed to work in every locale in every browser. It's worked where I tested it, though. It will fall back to returning `null` if it fails.\n\n## Polyfills\n\n### Intl\n\nIf your platform doesn't have any kind of Intl support (such as IE 10), you need to load them individually through a polyfill. The easiest way to that is like this:\n\n```html\n<script src=\"https://cdn.polyfill.io/v2/polyfill.js?features=Intl.~locale.zh,Intl.~locale.fr\"></script>\n```\n\nIf you're on a platform that already needs other polyfills, just tack those features to the end of your polyfill list.\n\n### Intl tokens\n\nPolyfilling Intl token support is a bit painful. This limitation applies to Edge < 18 and all the IEs. Fortunately, you probably don't need Intl token support!\n\nFirst, if you don't have Intl at all (e.g. as in IE 10), you are in luck. The polyfills in the previous section will give you Intl token support too!\n\nBut more likely, you have basic Intl support but not `formatToParts` (e.g. IE 11 or Edge 16). The problem here is that the polyfill service will ignore the Intl polyfills, so you won't get the support you need. Instead, you need to override all of Intl with the [Intl polyfill](https://github.com/andyearnshaw/Intl.js/) directly. [help wanted: instructions on exactly how to do that]\n\n### Zones\n\nIf you have an Intl API (either natively or through the Intl polyfill above) but no zone support, you can add it via the very nice [DateTime format polyfill](https://github.com/yahoo/date-time-format-timezone).\n\n## Older platforms\n\n- **Older versions of both Chrome and Firefox** will most likely work. It's just that I only officially support the last two versions. As you get to older versions of these browsers, the missing capabilities listed above begin to apply to them. (e.g. FF started supporting `formatToParts` in 51 and time zones in 52). I haven't broken that out because it's complicated, Luxon doesn't officially support them, and no one runs them anyway.\n- **Older versions of IE** probably won't work at all.\n- **Older versions of Node** probably won't work without recompiling Luxon with a different Node target. In which case they'll work with some features missing.\n\n## Other platforms\n\nIf the platform you're targeting isn't on the list and you're unsure what caveats apply, you can check which pieces are supported:\n\n```js\nInfo.features(); //=> { intl: true, intlTokens: true, zones: true, relative: false }\n```\n\nSpecific notes on other platforms:\n\n- **React Native on (specifically) Android** doesn't come with Intl support, so all the possible-to-be-missing capabilities above are unavailable. Use [jsc-android-buildscripts](https://github.com/SoftwareMansion/jsc-android-buildscripts) to fix it.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\moment.md",
    "name": "./docs/moment.md",
    "content": "# For Moment users\n\nLuxon borrows lots of ideas from [Moment.js](http://momentjs.com), but there are a lot of differences too. This document clarifies what they are.\n\n## Immutability\n\nLuxon's objects are immutable, whereas Moment's are mutable. For example, in Moment:\n\n```js\nvar m1 = moment();\nvar m2 = m1.add(1, \"hours\");\nm1.valueOf() === m2.valueOf(); //=> true\n```\n\nThis happens because `m1` and `m2` are really the same object; `add()` _mutated_ the object to be an hour later. Compare that to Luxon:\n\n```js\nvar d1 = DateTime.now();\nvar d2 = d1.plus({ hours: 1 });\nd1.valueOf() === d2.valueOf(); //=> false\n```\n\nThis happens because the `plus` method returns a new instance, leaving `d1` unmodified. It also means that Luxon doesn't require copy constructors or clone methods.\n\n## Major functional differences\n\n1. Months in Luxon are 1-indexed instead of 0-indexed like in Moment and the native Date type.\n1. Localizations and time zones are implemented by the native Intl API (or a polyfill of it), instead of by the library itself.\n1. Luxon has both a Duration type and an Interval type. The Interval type is like Twix.\n1. Luxon lacks the relative time features of Moment and won't support it until the required [facilities](https://github.com/tc39/proposal-intl-relative-time) are provided by the browser.\n\n## Other API style differences\n\n1. Luxon methods often take option objects as their last parameter\n1. Luxon has different static methods for object creation (e.g. `fromISO`), as opposed to Moment's one function that dispatches based on the input\n1. Luxon parsers are very strict, whereas Moment's are more lenient.\n1. Luxon uses getters instead of accessor methods, so `dateTime.year` instead of `dateTime.year()`\n1. Luxon centralizes its \"setters\", like `dateTime.set({year: 2016, month: 4})` instead of `dateTime.year(2016).month(4)` like in Moment.\n1. Luxon's Durations are a separate top-level class.\n1. Arguments to Luxon's methods are not automatically coerced into Luxon instances. E.g. `m.diff('2017-04-01')` would be `dt.diff(DateTime.fromISO('2017-04-01'))`.\n\n## DateTime method equivalence\n\nHere's a rough mapping of DateTime methods in Moment to ones in Luxon. I haven't comprehensively documented stuff that's in Luxon but not in Moment, just a few odds and ends that seemed obvious for inclusion; there are more. I've probably missed a few things too.\n\n### Creation\n\n| Operation               | Moment                   | Luxon                                 | Notes                                                                                                                                 |\n| ----------------------- | ------------------------ | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| Now                     | `moment()`               | `DateTime.now()`                      |                                                                                                                                       |\n| From ISO                | `moment(String)`         | `DateTime.fromISO(String)`            |                                                                                                                                       |\n| From RFC 2822           | `moment(String)`         | `DateTime.fromRFC2822(String)`        |                                                                                                                                       |\n| From custom format      | `moment(String, String)` | `DateTime.fromFormat(String, String)` | The format tokens differ between Moment and Luxon, such that the same format string cannot be used between the two.                   |\n| From object             | `moment(Object)`         | `DateTime.fromObject(Object)`         |                                                                                                                                       |\n| From timestamp          | `moment(Number)`         | `DateTime.fromMillis(Number)`         |                                                                                                                                       |\n| From JS Date            | `moment(Date)`           | `DateTime.fromJSDate(Date)`           |                                                                                                                                       |\n| From civil time         | `moment(Array)`          | `DateTime.local(Number...)`           | Like `DateTime.local(2016, 12, 25, 10, 30)`                                                                                           |\n| From UTC civil time     | `moment.utc(Array)`      | `DateTime.utc(Number...)`             | Moment also uses `moment.utc()` to take other arguments. In Luxon, use the appropriate method and pass in the `{ zone: 'utc'}` option |\n| Clone                   | `moment(Moment)`         | N/A                                   | Immutability makes this pointless; just reuse the object                                                                              |\n| Use the string's offset | `parseZone`              | See note                              | Methods taking strings that can specify offset or zone take a `setZone` argument                                                      |\n\n### Getters and setters\n\n#### Basic information getters\n\n| Property | Moment      | Luxon                | Notes                                            |\n| -------- | ----------- | -------------------- | ------------------------------------------------ |\n| Validity | `isValid()` | N/A, throws an error |                                                  |\n| Locale   | `locale()`  | `locale`             |                                                  |\n| Zone     | `tz()`      | `zone`               | Moment requires a plugin for this, but not Luxon |\n\n#### Unit getters\n\n| Property               | Moment                               | Luxon         | Notes                                  |\n| ---------------------- | ------------------------------------ | ------------- | -------------------------------------- |\n| Year                   | `year()`                             | `year`        |                                        |\n| Month                  | `month()`                            | `month`       |                                        |\n| Day of month           | `date()`                             | `day`         |                                        |\n| Day of week            | `day()`, `weekday()`, `isoWeekday()` | `weekday`     | 1-7, Monday is 1, Sunday is 7, per ISO |\n| Day of year            | `dayOfYear()`                        | `ordinal`     |                                        |\n| Hour of day            | `hour()`                             | `hour`        |                                        |\n| Minute of hour         | `minute()`                           | `minute`      |                                        |\n| Second of minute       | `second()`                           | `second`      |                                        |\n| Millisecond of seconds | `millisecond()`                      | `millisecond` |                                        |\n| Week of ISO week year  | `weekYear`, `isoWeekYear`            | `weekYear`    |                                        |\n| Quarter                | `quarter`                            | None          | Just divide the months by 4            |\n\n#### Programmatic get and set\n\nFor programmatic getting and setting, Luxon and Moment are very similar here:\n\n| Operation  | Moment                | Luxon         | Notes                                   |\n| ---------- | --------------------- | ------------- | --------------------------------------- |\n| get value  | `get(String)`         | `get(String)` |                                         |\n| set value  | `set(String, Number)` | None          |                                         |\n| set values | `set(Object)`         | `set(Object)` | Like `dt.set({ year: 2016, month: 3 })` |\n\n### Transformation\n\n| Operation          | Moment                     | Luxon               | Notes                                   |\n| ------------------ | -------------------------- | ------------------- | --------------------------------------- |\n| Addition           | `add(Number, String)`      | `plus(Object)`      | Like `dt.plus({ months: 3, days: 2 })`  |\n| Subtraction        | `subtract(Number, String)` | `minus(Object)`     | Like `dt.minus({ months: 3, days: 2 })` |\n| Start of unit      | `startOf(String)`          | `startOf(String)`   |                                         |\n| End of unit        | `endOf(String)`            | `endOf(String)`     |                                         |\n| Change unit values | `set(Object)`              | `set(Object)`       | Like `dt.set({ year: 2016, month: 3 })` |\n| Change time zone   | `tz(String)`               | `setZone(string)`   | Luxon doesn't require a plugin          |\n| Change zone to utc | `utc()`                    | `toUTC()`           |                                         |\n| Change local zone  | `local()`                  | `toSystemZone()`    |                                         |\n| Change offset      | `utcOffset(Number)`        | None                | Set the zone instead                    |\n| Change locale      | `locale(String)`           | `setLocale(String)` |                                         |\n\n### Query\n\n| Question                                   | Moment                  | Luxon                                            | Notes                                                                                           |\n| ------------------------------------------ | ----------------------- | ------------------------------------------------ | ----------------------------------------------------------------------------------------------- |\n| Is this time before that time?             | `m1.isBefore(m2)`       | `dt1 < dt2`                                      | The Moment versions of these take a unit. To do that in Luxon, use `startOf` on both instances. |\n| Is this time after that time?              | `m1.isAfter(m2)`        | `dt1 > dt2`                                      |                                                                                                 |\n| Is this time the same or before that time? | `m1.isSameOrBefore(m2)` | `dt1 <= dt2`                                     |                                                                                                 |\n| Is this time the same or after that time?  | `m1.isSameOrAfter(m2)`  | `dt1 >= dt2`                                     |                                                                                                 |\n| Do these two times have the same [unit]?   | `m1.isSame(m2, unit)`   | `dt1.hasSame(dt2, unit)`                         |                                                                                                 |\n| Is this time's [unit] before that time's?  | `m1.isBefore(m2, unit)` | `dt1.startOf(unit) < dt2.startOf(unit)`          |                                                                                                 |\n| Is this time's [unit] after that time's?   | `m1.isAfter(m2, unit)`  | `dt1.startOf(unit) > dt2.startOf(unit)`          |                                                                                                 |\n| Is this time between these two times?      | `m1.isBetween(m2, m3)`  | `Interval.fromDateTimes(dt2, dt3).contains(dt1)` |                                                                                                 |\n| Is this time inside a DST                  | `isDST()`               | `isInDST`                                        |                                                                                                 |\n| Is this time's year a leap year?           | `isInLeapYear()`        | `isInLeapYear`                                   |                                                                                                 |\n| How many days are in this time's month?    | `daysInMonth()`         | `daysInMonth`                                    |                                                                                                 |\n| How many days are in this time's year?     | None                    | `daysInYear`                                     |                                                                                                 |\n\n### Output\n\n#### Basics\n\nSee the [formatting guide](formatting.html) for more about the string-outputting methods.\n\n| Output           | Moment         | Luxon                       | Notes                                                                                                                                             |\n| ---------------- | -------------- | --------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| simple string    | `toString()`   | `toString()`                | Luxon just uses ISO 8601 for this. See Luxon's `toLocaleString()`                                                                                 |\n| full ISO 8601    | `iso()`        | `toISO()`                   |                                                                                                                                                   |\n| ISO date only    | None           | `toISODate()`               |                                                                                                                                                   |\n| ISO time only    | None           | `toISOTime()`               |                                                                                                                                                   |\n| custom format    | `format(...)`  | `toFormat(...)`             | The format tokens differ between Moment and Luxon, such that the same format string cannot be used between the two.                               |\n| RFC 2822         |                | `toRFC2822()`               |                                                                                                                                                   |\n| HTTP date string |                | `toHTTP()`                  |                                                                                                                                                   |\n| JS Date          | `toDate()`     | `toJSDate()`                |                                                                                                                                                   |\n| Epoch time       | `valueOf()`    | `toMillis()` or `valueOf()` |                                                                                                                                                   |\n| Object           | `toObject()`   | `toObject()`                |                                                                                                                                                   |\n| Duration         | `diff(Moment)` | `diff(DateTime)`            | Moment's diff returns a count of milliseconds, but Luxon's returns a Duration. To replicate the Moment behavior, use `dt1.diff(d2).milliseconds`. |\n\n#### Humanization\n\nLuxon has `toRelative` and `toRelativeCalendar`. For internationalization, they use Intl.RelativeTimeFormat (or fall back to English when it is not supported by the browser).\n\n| Operation            | Moment         | Luxon                                         |\n| -------------------- | -------------- | --------------------------------------------- |\n| Time from now        | `fromNow()`    | `toRelative()`                                |\n| Time from other time | `from(Moment)` | `toRelative({ base: DateTime })`              |\n| Time to now          | `toNow()`      | `DateTime.local().toRelative({ base: this })` |\n| Time to other time   | `to(Moment)`   | `otherTime.toRelative({ base: this })`        |\n| \"Calendar time\"      | `calendar()`   | `toRelativeCalendar()`                        |\n\n## Durations\n\nMoment Durations and Luxon Durations are broadly similar in purpose and capabilities. The main differences are:\n\n1.  Luxon durations have more sophisticated conversion capabilities. They can convert from one set of units to another using `shiftTo`. They can also be configured to use different unit conversions. See [Duration Math](math.html#duration-math) for more.\n1.  Luxon does not (yet) have an equivalent of Moment's Duration `humanize` method. Luxon will add that when [Unified Intl.NumberFormat](https://github.com/tc39/proposal-unified-intl-numberformat) is supported by browsers.\n1.  Like DateTimes, Luxon Durations have separate methods for creating objects from different sources.\n\nSee the [Duration API docs](../class/src/duration.js~Duration.html) for more.\n\n## Intervals\n\nMoment doesn't have direct support intervals, which must be provided by plugins like Twix or moment-range. Luxon's Intervals have similar capabilities to theirs, with the exception of the humanization features. See the [Interval API docs](../class/src/interval.js~Interval.html) for more.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\docs\\why.md",
    "name": "./docs/why.md",
    "content": "# Why does Luxon exist?\n\nWhat's the deal with this whole Luxon thing anyway? Why did I write it? How is it related to the Moment project? What's different about it? This page tries to hash all that out.\n\n## A disclaimer\n\nI should clarify here that I'm just one of Moment's maintainers; I'm not in charge and I'm not Moment's creator. The opinions here are solely mine. Finally, none of this is meant to bash Moment, a project I've spent a lot of time on and whose other developers I respect.\n\n## Origin\n\nLuxon started because I had a bunch of ideas on how to improve Moment but kept finding Moment wasn't a good codebase to explore them with. Namely:\n\n- I wanted to try out some ideas that I thought would provide a better, more explicit API but didn't want to break everything in Moment.\n- I had an idea on how to provide out-of-the-box, no-data-files-required support for time zones, but Moment's design made that difficult.\n- I wanted to completely rethink how internationalization worked by using the Intl API that comes packaged in browsers.\n- I wanted to use a modern JS toolchain, which would require a major retrofit to Moment.\n\nSo I decided to write something from scratch, a sort of modernized Moment. It's a combination of all the things I learned maintaining Moment and Twix, plus a bunch of fresh ideas. I worked on it in little slivers of spare time for about two years. But now it's ready to actually use, and the Moment team likes it enough that we pulled it under the organization's umbrella.\n\n## Ideas in Luxon\n\nLuxon is built around a few core ideas:\n\n1.  Keep the basic chainable date wrapper idea from Moment.\n1.  Make all the types immutable.\n1.  Make the API explicit; different methods do different things and have well-defined options.\n1.  Use the Intl API to provide internationalization, including token parsing. Fall back to English if the browser doesn't support those APIs.\n1.  Abuse the Intl API horribly to provide time zone support. Only possible for modern browsers.\n1.  Provide more comprehensive duration support.\n1.  Directly provide interval support.\n1.  Write inline docs for everything.\n\nThese ideas have some big advantages:\n\n1.  It's much easier to understand and debug code that uses Luxon.\n1.  Using native browser capabilities for internationalization leads to a much better behavior and is dramatically easier to maintain.\n1.  Luxon has the best time zone support of any JS date library.\n1.  Luxon's durations are both flexible and easy to use.\n1.  The documentation is very good.\n\nThey also have some disadvantages:\n\n1.  Using modern browser capabilities means that the fallback behavior introduces complexity for the programmer.\n1.  Never keeping internationalized strings in the code base means that some capabilities have to wait until the browsers provide it.\n1.  Some aspects of the Intl API are browser-dependent, which means Luxon's behavior is too.\n\n## Place in the Moment project\n\nLuxon lives in the Moment project because, basically, we all really like it, and it represents a huge improvement.\n\nBut Luxon doesn't quite fulfill Moment's mandate. Since it sometimes relies on browsers' implementations of the `Intl` specifications, it doesn't provide some of Moment's most commonly-used features on all browsers. Relative date formatting is for instance not supported in IE11 and Safari (as of August 2020). Luxon's Intl features do not work as expected on sufficiently outdated browsers, whereas Moment's all work everywhere. That represents a good tradeoff, IMO, but it's clearly a different one than Moment makes.\n\nLuxon makes a major break in API conventions. Part of Moment's charm is that you just call `moment()` on basically anything and you get date, whereas Luxon forces you to decide that you want to call `fromISO` or whatever. The upshot of all that is that Luxon feels like a different library; that's why it's not Moment 3.0.\n\nSo what is it then? We're not really sure. We're calling it a Moment labs project. Will its ideas get backported into Moment 3? Will it gradually siphon users away from Moment and become the focus of the Moment project? Will the march of modern browsers retire the arguments above and cause us to revisit branding Luxon as Moment? We don't know.\n\nThere, now you know as much as I do.\n\n## Future plans\n\nLuxon is fully usable and I plan to support it indefinitely. It's also largely complete. Luxon will eventually strip out its fallbacks for missing platform features. But overall I expect the core functionality to stay basically as it is, adding mostly minor tweaks and bugfixes.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "# Changelog\n\n## before 2.0.0\n\n Refer to Luxon's changelog \n \n## 2.0.1\n* Fixed DateTime.hasSame comparison \n\n## 2.0.2\n* Added tslint\n* Improved naming convention\n* Solved Intl issue when compiling Angular (improved Intl namespace declaring and merging until es2020.intl)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\easyPhp\\eds-www\\git\\ts-luxon\\CONTRIBUTING.md",
    "name": "./CONTRIBUTING.md",
    "content": "# Contributing to Luxon\n\n## General guidelines\n\nPatches are welcome. Luxon is at this point just a baby and it could use lots of help. But before you dive in...Luxon is one of those tightly-scoped libraries where the default answer to \"should this library do X?\" is likely \"no\". **So ask first!** It might save you some time and energy.\n\nHere are some vague notes on Luxon's design philosophy:\n\n1.  We won't accept patches that can't be internationalized using the JS environment's (e.g. the browser's) native capabilities. This means that most convenient humanization features are out of scope.\n1.  We try hard to have a clear definition of what Luxon does and doesn't do. With few exceptions, this is not a \"do what I mean\" library.\n1.  Luxon shouldn't contain simple conveniences that bloat the library to save callers a couple lines of code. Write those lines in your own code.\n1.  Most of the complexity of JS module loading compatibility is left to the build. If you have a \"this can't be loaded in my bespoke JS module loader\" problems, this isn't something you should be solving with changes to the `src` directory. If it's a common use case and is possible to generate with Rollup, it can get its own build command.\n1.  We prefer documentation clarifications and gotchas to go in the docstrings, not in the guides on the docs page. Obviously, if the guides are wrong, they should be fixed, but we don't want them to turn into troubleshooting pages. On the other hand, making sure the method-level documentation has ample examples and notes is great.\n1.  You'll need to sign a CLA as part of your first pull request to Luxon.\n\n## Building and testing\n\nBuilding and testing is done through npm scripts. The tests run in Node and require Node 10+ with full-icu support. This is because some of the features available in TS-Luxon (like internationalization and time zones) need that stuff and we test it all. On any platform, if you have Node 10 installed with full-icu, you're good to go; just run npm scripts like `npm run test`. But you probably don't have that, so read on.\n\n**IMPORTANT: your tests will likely fail if you're not in Italy, that's why I strongly suggest using docker for a guaranteed success!**\n\n### OSX\n\nMac is easy:\nOpen the terminal.\n\n```\nbrew install node --with-full-icu\nnpm install\n./scripts/test\n```\n\nIf that's for whatever reason a pain, the Linux instructions should also work, as well as the Docker ones.\n\n### Linux\n\nThere are two ways to get full-icu support in Linux: build it with that support, or provide it as a module. We'll cover the latter. Assuming you've installed Node 10:\n\n```\nnpm install\nnpm install full-icu\n./scripts/test\n```\n\nWhere `scripts/test` is just `NODE_ICU_DATA=\"$(pwd)/node_modules/full-icu\" npm run test`, which is required for making Node load the full-icu module you just installed. You can run all the other npm scripts (e.g. `npm run docs`) directly; they don't require Intl support.\n\n### Windows\n\nIf you have [Bash](https://git-scm.com/downloads) or [WSL](https://docs.microsoft.com/en-us/windows/wsl/install-win10), the Linux instructions seem to work fine.\n\nI would love to add instructions for a non-WSL install of the dev env!\n\n### Docker\n\nIn case messing with your Node environment just to run TSLuxon's tests is too much to ask, we've provided a Docker container.\nYou'll need a functioning Docker environment, but the rest is easy:\n\nON BOTH UNIX OR WINDOWS this will build a local image with your sources\n\n```\n# cd /path/to/ts-luxon-folder \n# docker build -t tonysamperi/ts-luxon -f ./docker/Dockerfile .\n```\n\nON UNIX\n\n```\n# docker run --rm -v ${pwd}/ts-luxon -w /tonysamperi/ts-luxon tonysamperi/ts-luxon ./docker/workflow.sh\n```\n\nON WINDOWS:\n\n```\n# docker run --rm -v %CD%:/ts-luxon -w /tonysamperi/ts-luxon tonysamperi/ts-luxon ./docker/workflow.sh\n```\n\nIf you get to the tests and all the tests passed, then you're good! :)\n\n## Patch basics\n\nOnce you're sure your bugfix or feature makes sense for TSLuxon, make sure you take these steps:\n\n1.  Be sure to add tests and run them with `scripts/test`\n1.  Be sure you run `npm run lint` before you commit. Note this will modify your source files to line up with the style guidelines.\n1.  Make sure you add or ESDoc annotations appropriately. You can run `npm run docs` to generate the HTML for them. They land in the `build/docs` directory. This also builds the markdown files in `/docs` into the guide on the Luxon website.\n1.  To test TSLuxon in your browser, run `npm run site` and then open `build/demo/global.html`. You can access TSLuxon classes in the console like `window.luxon.DateTime`.\n1.  To test in Node, run `npm run build` and then run something like `var DateTime = require('./build/cjs/luxon').DateTime`.\n\nLuxon uses [Husky](https://github.com/typicode/husky) to run the formatter on your code as a pre-commit hook. You should still run `npm run lint!` yourself to catch other issues, but this hook will help prevent you from failing the build with a trivial formatting error.\n\n## npm script reference\n\n| Command                      | Function                                |\n| ---------------------------- | --------------------------------------- |\n| `npm run build`              | Build all the distributable files       |\n| `npm run test`               | Run the test suite, but see notes above |\n| `npm run lint`               | Run the formatter and the linter        |\n| `npm run docs`               | Build the doc pages                     |\n| `npm run site`               | Build the TSLuxon website               |\n| `npm run check-doc-coverage` | Check whether there's full doc coverage |\n",
    "static": true,
    "access": "public"
  }
]