{"version":3,"file":"ts-luxon.umd.js","sources":["../src/errors.ts","../src/impl/util.ts","../src/impl/formats.ts","../src/impl/english.ts","../src/zone.ts","../src/zones/systemZone.ts","../src/zones/IANAZone.ts","../src/zones/fixedOffsetZone.ts","../src/impl/zoneUtil.ts","../src/settings.ts","../src/impl/formatter.ts","../src/impl/locale.ts","../src/impl/regexParser.ts","../src/duration.ts","../src/interval.ts","../src/info.ts","../src/impl/diff.ts","../src/impl/digits.ts","../src/impl/tokenParser.ts","../src/impl/conversions.ts","../src/datetime.ts"],"sourcesContent":["// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class UnitOutOfRangeError extends LuxonError {\n  constructor(unit: string, value: unknown) {\n    super(`you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`);\n\n    // See https://github.com/facebook/jest/issues/8279#issuecomment-539775425\n    Object.setPrototypeOf(this, UnitOutOfRangeError.prototype);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit: string) {\n    super(`Invalid unit ${unit}`);\n    Object.setPrototypeOf(this, InvalidUnitError.prototype);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidZoneError extends LuxonError {\n  constructor(zoneName: string) {\n    super(`${zoneName} is an invalid or unknown zone specifier`);\n    Object.setPrototypeOf(this, InvalidZoneError.prototype);\n  }\n}\n\n/**\n * @private\n */\nexport class MissingPlatformFeatureError extends LuxonError {\n  constructor(feature: string) {\n    super(`missing ${feature} support`);\n    Object.setPrototypeOf(this, MissingPlatformFeatureError.prototype);\n  }\n}\n\n/**\n * @private\n */\nexport class MismatchedWeekdayError extends LuxonError {\n  constructor(weekday: number, date: string) {\n    super(`you can't specify both a weekday of ${weekday} and a date of ${date}`);\n    Object.setPrototypeOf(this, MismatchedWeekdayError.prototype);\n  }\n}\n\n/**\n * @private\n */\nexport class UnparsableStringError extends LuxonError {\n  constructor(format: string, text: string) {\n    super(`can't parse ${text} into format ${format}`);\n    Object.setPrototypeOf(this, UnparsableStringError.prototype);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, ConflictingSpecificationError.prototype);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, InvalidArgumentError.prototype);\n  }\n}\n\n/**\n * @private\n */\nexport class ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super(\"Zone is an abstract class\");\n    Object.setPrototypeOf(this, ZoneIsAbstractError.prototype);\n  }\n}\n","/*\n  This is just a junk drawer, containing anything used across multiple classes.\n  Because Luxon is small(ish), this should stay small and we won't worry about splitting\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\n*/\n\nimport { InvalidArgumentError } from \"../errors\";\nimport { TimeObject, GregorianDateTime } from \"../types/datetime\";\nimport { ZoneOffsetFormat } from \"../types/zone\";\n\n/**\n * @private\n */\n\n// TYPES\n\nexport function isUndefined(o: unknown): o is undefined {\n  return typeof o === \"undefined\";\n}\n\nexport function isNumber(o: unknown): o is number {\n  return typeof o === \"number\";\n}\n\nexport function isInteger(o: unknown) {\n  return typeof o === \"number\" && o % 1 === 0;\n}\n\nexport function isString(o: unknown): o is string {\n  return typeof o === \"string\";\n}\n\nexport function isDate(o: unknown): o is Date {\n  return Object.prototype.toString.call(o) === \"[object Date]\";\n}\n\n// CAPABILITIES\n\nexport function hasIntl() {\n  try {\n    return typeof Intl !== \"undefined\" && !!Intl.DateTimeFormat;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function hasFormatToParts() {\n  return !isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\n}\n\nexport function hasRelative() {\n  try {\n    return typeof Intl !== \"undefined\" && !!Intl.RelativeTimeFormat;\n  } catch (e) {\n    return false;\n  }\n}\n\n// OBJECTS AND ARRAYS\n\nexport function maybeArray<T>(thing: T | T[]) {\n  return Array.isArray(thing) ? thing : [thing];\n}\n\nexport function bestBy<T, U>(arr: T[], by: (_: T) => U, compare: (_: U, __: U) => U) {\n  const best = arr.reduce<[U, T] | undefined>((best, next) => {\n    const pair: [U, T] = [by(next), next];\n    if (best === undefined) {\n      return pair;\n    } else if (compare(best[0], pair[0]) === best[0]) {\n      return best;\n    } else {\n      return pair;\n    }\n  }, undefined);\n\n  if (best === undefined) throw new InvalidArgumentError(\"bestBy expects a non empty array\");\n\n  return best[1];\n}\n\nexport function pick<T, K extends keyof T>(obj: T, keys: K[]) {\n  return keys.reduce<Partial<Pick<T, K>>>((a, k) => {\n    a[k] = obj[k];\n    return a;\n  }, {}) as Pick<T, K>;\n}\n\n// NUMBERS AND STRINGS\n\nexport function integerBetween(thing: number, bottom: number, top: number) {\n  return isInteger(thing) && thing >= bottom && thing <= top;\n}\n\n// x % n but takes the sign of n instead of x\nexport function floorMod(x: number, n: number) {\n  return x - n * Math.floor(x / n);\n}\n\nexport function padStart(input: string | number, n = 2) {\n  if (input.toString().length < n) {\n    return (\"0\".repeat(n) + input).slice(-n);\n  } else {\n    return input.toString();\n  }\n}\n\nexport function parseInteger(text: string) {\n  if (isUndefined(text) || text === null || text === \"\") {\n    return undefined;\n  } else {\n    return parseInt(text, 10);\n  }\n}\n\nexport function parseMillis(fraction: string | null | undefined) {\n  // Return undefined (instead of 0) in these cases, where fraction is not set\n  if (isUndefined(fraction) || fraction === null || fraction === \"\") {\n    return undefined;\n  } else {\n    const f = parseFloat(\"0.\" + fraction) * 1000;\n    return Math.floor(f);\n  }\n}\n\nexport function roundTo(value: number, digits: number, towardZero = false) {\n  const factor = 10 ** digits,\n    rounder = towardZero ? Math.trunc : Math.round;\n  return rounder(value * factor) / factor;\n}\n\n// DATE BASICS\n\nexport function isLeapYear(year: number) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function daysInYear(year: number) {\n  return isLeapYear(year) ? 366 : 365;\n}\n\nexport function daysInMonth(year: number, month: number) {\n  const modMonth = floorMod(month - 1, 12) + 1,\n    modYear = year + (month - modMonth) / 12;\n  return [31, isLeapYear(modYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\n}\n\n// convert a calendar object to a local timestamp (epoch, but with the offset baked in)\nexport function objToLocalTS(obj: GregorianDateTime) {\n  const ts = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\n  if (integerBetween(obj.year, 0, 99)) {\n    const date = new Date(ts);\n    date.setUTCFullYear(date.getUTCFullYear() - 1900);\n    return date.getTime();\n  }\n\n  return ts;\n}\n\nexport function weeksInWeekYear(weekYear: number) {\n  const p1 =\n      (weekYear +\n        Math.floor(weekYear / 4) -\n        Math.floor(weekYear / 100) +\n        Math.floor(weekYear / 400)) %\n      7,\n    last = weekYear - 1,\n    p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\n\nexport function untruncateYear(year: number) {\n  if (year > 99) {\n    return year;\n  } else return year > 60 ? 1900 + year : 2000 + year;\n}\n\n// PARSING\n\nexport function parseZoneInfo(\n  ts: number,\n  offsetFormat?: string,\n  locale?: string,\n  timeZone?: string\n) {\n  const date = new Date(ts),\n    intlOptions = {\n      hour12: false,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      timeZone\n    };\n\n  const modified: Intl.DateTimeFormatOptions = Object.assign(\n      { timeZoneName: offsetFormat },\n      intlOptions\n    ),\n    intl = hasIntl();\n\n  if (intl && hasFormatToParts()) {\n    const parsed = new Intl.DateTimeFormat(locale, modified)\n      .formatToParts(date)\n      .find(m => m.type.toLowerCase() === \"timezonename\");\n    return parsed ? parsed.value : null;\n  } else if (intl) {\n    // this probably doesn't work for all locales\n    const without = new Intl.DateTimeFormat(locale, intlOptions).format(date),\n      included = new Intl.DateTimeFormat(locale, modified).format(date),\n      diffed = included.substring(without.length),\n      trimmed = diffed.replace(/^[, \\u200e]+/, \"\");\n    return trimmed;\n  } else {\n    return null;\n  }\n}\n\n// signedOffset('-5', '30') -> -330\nexport function signedOffset(offHourStr: string, offMinuteStr: string) {\n  let offHour = parseInt(offHourStr, 10);\n\n  // don't || this because we want to preserve -0\n  if (Number.isNaN(offHour)) {\n    offHour = 0;\n  }\n\n  const offMin = parseInt(offMinuteStr, 10) || 0,\n    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;\n  return offHour * 60 + offMinSigned;\n}\n\n// COERCION\n\nexport function asNumber(value: unknown) {\n  const numericValue = Number(value);\n  if (typeof value === \"boolean\" || value === \"\" || Number.isNaN(numericValue))\n    throw new InvalidArgumentError(`Invalid unit value ${value}`);\n  return numericValue;\n}\n\nexport function normalizeObject<T extends string>(\n  obj: Record<string, unknown>,\n  normalizer: (key: string) => T\n) {\n  return Object.keys(obj).reduce<Partial<Record<T, number>>>((normalized, key) => {\n    const value = obj[key];\n    if (value !== undefined && value !== null) normalized[normalizer(key)] = asNumber(value);\n    return normalized;\n  }, {});\n}\n\nexport function formatOffset(offset: number, format: ZoneOffsetFormat) {\n  const hours = Math.trunc(Math.abs(offset / 60)),\n    minutes = Math.trunc(Math.abs(offset % 60)),\n    sign = offset >= 0 ? \"+\" : \"-\";\n\n  switch (format) {\n    case \"short\":\n      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;\n    case \"narrow\":\n      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : \"\"}`;\n    case \"techie\":\n      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;\n    default:\n      throw new RangeError(`Value format ${format} is out of range for property format`);\n  }\n}\n\nexport function timeObject(obj: TimeObject): TimeObject {\n  return pick(obj, [\"hour\", \"minute\", \"second\", \"millisecond\"]);\n}\n\nexport const ianaRegex = /[A-Za-z_+-]{1,256}(:?\\/[A-Za-z_+-]{1,256}(\\/[A-Za-z_+-]{1,256})?)?/;\n","/**\n * @private\n */\n\nconst n = \"numeric\",\n  s = \"short\",\n  l = \"long\";\n\nexport const DATE_SHORT = {\n  year: n,\n  month: n,\n  day: n\n};\n\nexport const DATE_MED = {\n  year: n,\n  month: s,\n  day: n\n};\n\nexport const DATE_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s\n};\n\nexport const DATE_FULL = {\n  year: n,\n  month: l,\n  day: n\n};\n\nexport const DATE_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l\n};\n\nexport const TIME_SIMPLE = {\n  hour: n,\n  minute: n\n};\n\nexport const TIME_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n\n};\n\nexport const TIME_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s\n};\n\nexport const TIME_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l\n};\n\nexport const TIME_24_SIMPLE = {\n  hour: n,\n  minute: n,\n  hour12: false\n};\n\nexport const TIME_24_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n  hour12: false\n};\n\nexport const TIME_24_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hour12: false,\n  timeZoneName: s\n};\n\nexport const TIME_24_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hour12: false,\n  timeZoneName: l\n};\n\nexport const DATETIME_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n\n};\n\nexport const DATETIME_SHORT_WITH_SECONDS = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n\n};\n\nexport const DATETIME_MED = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n\n};\n\nexport const DATETIME_MED_WITH_SECONDS = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n\n};\n\nexport const DATETIME_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n  hour: n,\n  minute: n\n};\n\nexport const DATETIME_FULL = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  timeZoneName: s\n};\n\nexport const DATETIME_FULL_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s\n};\n\nexport const DATETIME_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  timeZoneName: l\n};\n\nexport const DATETIME_HUGE_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l\n};\n","import * as Formats from \"./formats\";\nimport { pick } from \"./util\";\nimport { UnitLength, StringUnitLength } from \"../types/common\";\nimport { DateTime } from \"../datetime\";\nimport { Duration} from \"../duration\";\n\nfunction stringify(obj: Record<string, unknown>) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\n\n/**\n * @private\n */\n\nexport const monthsLong = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nexport const monthsShort = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\"\n];\n\nexport const monthsNarrow = [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\n\nexport function months(length: UnitLength) {\n  switch (length) {\n    case \"narrow\":\n      return monthsNarrow;\n    case \"short\":\n      return monthsShort;\n    case \"long\":\n      return monthsLong;\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\n    case \"2-digit\":\n      return [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n  }\n}\n\nexport const weekdaysLong = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\"\n];\n\nexport const weekdaysShort = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n\nexport const weekdaysNarrow = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\n\nexport function weekdays(length: StringUnitLength) {\n  switch (length) {\n    case \"narrow\":\n      return weekdaysNarrow;\n    case \"short\":\n      return weekdaysShort;\n    case \"long\":\n      return weekdaysLong;\n  }\n}\n\nexport const meridiems = [\"AM\", \"PM\"];\n\nexport const erasLong = [\"Before Christ\", \"Anno Domini\"];\n\nexport const erasShort = [\"BC\", \"AD\"];\n\nexport const erasNarrow = [\"B\", \"A\"];\n\nexport function eras(length: StringUnitLength) {\n  switch (length) {\n    case \"narrow\":\n      return erasNarrow;\n    case \"short\":\n      return erasShort;\n    case \"long\":\n      return erasLong;\n  }\n}\n\nexport function meridiemForDateTime(dt: DateTime) {\n  return meridiems[dt.hour < 12 ? 0 : 1];\n}\n\nexport function weekdayForDateTime(dt: DateTime, length: StringUnitLength) {\n  return weekdays(length)[dt.weekday - 1];\n}\n\nexport function monthForDateTime(dt: DateTime, length: UnitLength) {\n  return months(length)[dt.month - 1];\n}\n\nexport function eraForDateTime(dt: DateTime, length: StringUnitLength) {\n  return eras(length)[dt.year < 0 ? 0 : 1];\n}\n\nexport function formatRelativeTime(\n  unit: Intl.RelativeTimeFormatUnit,\n  count: number,\n  numeric: Intl.RelativeTimeFormatNumeric = \"always\",\n  narrow = false\n) {\n  const units = {\n    years: [\"year\", \"yr.\"],\n    quarters: [\"quarter\", \"qtr.\"],\n    months: [\"month\", \"mo.\"],\n    weeks: [\"week\", \"wk.\"],\n    days: [\"day\", \"day\", \"days\"],\n    hours: [\"hour\", \"hr.\"],\n    minutes: [\"minute\", \"min.\"],\n    seconds: [\"second\", \"sec.\"],\n    milliseconds: [] // never used\n  };\n\n  const normalizedUnit = Duration.normalizeUnit(unit),\n    unitTexts = units[normalizedUnit],\n    lastable = [\"hours\", \"minutes\", \"seconds\"].indexOf(normalizedUnit) === -1;\n\n  if (numeric === \"auto\" && lastable) {\n    const isDay = normalizedUnit === \"days\";\n    switch (count) {\n      case 1:\n        return isDay ? \"tomorrow\" : `next ${unitTexts[0]}`;\n      case -1:\n        return isDay ? \"yesterday\" : `last ${unitTexts[0]}`;\n      case 0:\n        return isDay ? \"today\" : `this ${unitTexts[0]}`;\n      default: // fall through\n    }\n  }\n\n  const isInPast = Object.is(count, -0) || count < 0,\n    formatValue = Math.abs(count),\n    singular = formatValue === 1,\n    formatUnit = narrow\n      ? singular\n        ? unitTexts[1]\n        : unitTexts[2] || unitTexts[1]\n      : singular\n      ? unitTexts[0]\n      : normalizedUnit;\n  return isInPast ? `${formatValue} ${formatUnit} ago` : `in ${formatValue} ${formatUnit}`;\n}\n\nexport function formatString(knownFormat: Intl.DateTimeFormatOptions) {\n  // these all have the offsets removed because we don't have access to them\n  // without all the intl stuff this is backfilling\n  const filtered = pick(knownFormat, [\n      \"weekday\",\n      \"era\",\n      \"year\",\n      \"month\",\n      \"day\",\n      \"hour\",\n      \"minute\",\n      \"second\",\n      \"timeZoneName\",\n      \"hour12\"\n    ]),\n    key = stringify(filtered),\n    dateTimeHuge = \"EEEE, LLLL d, yyyy, h:mm a\";\n  switch (key) {\n    case stringify(Formats.DATE_SHORT):\n      return \"M/d/yyyy\";\n    case stringify(Formats.DATE_MED):\n      return \"LLL d, yyyy\";\n    case stringify(Formats.DATE_MED_WITH_WEEKDAY):\n      return \"EEE, LLL d, yyyy\";\n    case stringify(Formats.DATE_FULL):\n      return \"LLLL d, yyyy\";\n    case stringify(Formats.DATE_HUGE):\n      return \"EEEE, LLLL d, yyyy\";\n    case stringify(Formats.TIME_SIMPLE):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_SECONDS):\n      return \"h:mm:ss a\";\n    case stringify(Formats.TIME_WITH_SHORT_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_LONG_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_24_SIMPLE):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_SECONDS):\n      return \"HH:mm:ss\";\n    case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_LONG_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.DATETIME_SHORT):\n      return \"M/d/yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_MED):\n      return \"LLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL):\n      return \"LLLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_HUGE):\n      return dateTimeHuge;\n    case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):\n      return \"M/d/yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_SECONDS):\n      return \"LLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_WEEKDAY):\n      return \"EEE, d LLL yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL_WITH_SECONDS):\n      return \"LLLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):\n      return \"EEEE, LLLL d, yyyy, h:mm:ss a\";\n    default:\n      return dateTimeHuge;\n  }\n}\n","import { ZoneIsAbstractError } from \"./errors\";\nimport { ZoneOffsetOptions, ZoneOffsetFormat } from \"./types/zone\";\n\n// Prefixing the parameter names with a _ confuses ESDoc\nfunction silenceUnusedWarning(...args: unknown[]) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n  args.length;\n}\n\n/**\n * An abstract Zone class\n * @interface\n */\nexport abstract class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type(): string {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name(): string {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get isUniversal(): boolean {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} [ts] - Epoch milliseconds for which to get the name\n   * @param {Object} [options] - Options to affect the format\n   * @param {string} [options.format] - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} [options.locale] - What locale to return the offset name in.\n   * @return {string | null}\n   */\n  offsetName(ts?: number, options?: ZoneOffsetOptions): string | null {\n    silenceUnusedWarning(ts, options);\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts: number, format: ZoneOffsetFormat): string {\n    silenceUnusedWarning(ts, format);\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts: number): number {\n    silenceUnusedWarning(ts);\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} other - the zone to compare\n   * @return {boolean}\n   */\n  equals(other: Zone): boolean {\n    silenceUnusedWarning(other);\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid(): boolean {\n    throw new ZoneIsAbstractError();\n  }\n}\n","import { formatOffset, parseZoneInfo, hasIntl } from \"../impl/util\";\nimport { Zone} from \"../zone\";\nimport { ZoneOffsetFormat, ZoneOffsetOptions } from \"../types/zone\";\n\nlet singleton: SystemZone | null = null;\n\n/**\n * Represents the system's local zone for this Javascript environment.\n * @implements {Zone}\n */\nexport class SystemZone extends Zone {\n  /**\n   * Get a singleton instance of the system's local zone\n   * @return {SystemZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"system\";\n  }\n\n  /** @override **/\n  get name() {\n    if (hasIntl()) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return \"system\";\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts: number, { format, locale }: ZoneOffsetOptions = {}) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts: number, format: ZoneOffsetFormat) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts: number) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(other: Zone) {\n    return other.type === \"system\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n","import { formatOffset, parseZoneInfo, isUndefined, ianaRegex, objToLocalTS } from \"../impl/util\";\nimport { Zone} from \"../zone\";\nimport { ZoneOffsetOptions, ZoneOffsetFormat } from \"../types/zone\";\nimport { InvalidZoneError } from \"../errors\";\n\nconst matchingRegex = RegExp(`^${ianaRegex.source}$`);\n\nlet dtfCache: Record<string, Intl.DateTimeFormat> = {};\n\nfunction makeDTF(zone: string) {\n  if (!dtfCache[zone]) {\n    try {\n      dtfCache[zone] = new Intl.DateTimeFormat(\"en-US\", {\n        hour12: false,\n        timeZone: zone,\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\"\n      });\n    } catch {\n      throw new InvalidZoneError(zone);\n    }\n  }\n  return dtfCache[zone];\n}\n\nconst typeToPos: Partial<Record<Intl.DateTimeFormatPartTypes, number>> = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction hackyOffset(dtf: Intl.DateTimeFormat, date: Date) {\n  const formatted = dtf.format(date).replace(/\\u200E/g, \"\"),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted);\n\n  if (parsed !== null) {\n    const [, month, day, year, hour, minute, second] = parsed;\n    return [\n      parseInt(year, 10),\n      parseInt(month, 10),\n      parseInt(day, 10),\n      parseInt(hour, 10),\n      parseInt(minute, 10),\n      parseInt(second, 10)\n    ];\n  }\n\n  return [0, 0, 0, 0, 0, 0];\n}\n\nfunction partsOffset(dtf: Intl.DateTimeFormat, date: Date) {\n  const formatted = dtf.formatToParts(date),\n    filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i],\n      pos = typeToPos[type];\n\n    if (!isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nlet ianaZoneCache: Record<string, IANAZone> = {};\n/**\n * A zone identified by an IANA identifier, like America/New_York\n * @implements {Zone}\n */\nexport class IANAZone extends Zone {\n  private readonly zoneName: string;\n  private readonly valid: boolean;\n\n  /**\n   * @param {string} name - Zone name\n   * @return {IANAZone}\n   */\n  static create(name: string) {\n    if (!ianaZoneCache[name]) {\n      ianaZoneCache[name] = new IANAZone(name);\n    }\n    return ianaZoneCache[name];\n  }\n\n  /**\n   * Reset local caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCache() {\n    ianaZoneCache = {};\n    dtfCache = {};\n  }\n\n  /**\n   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.\n   * @param {string} s - The string to check validity on\n   * @example IANAZone.isValidSpecifier(\"America/New_York\") //=> true\n   * @example IANAZone.isValidSpecifier(\"Fantasia/Castle\") //=> true\n   * @example IANAZone.isValidSpecifier(\"Sport~~blorp\") //=> false\n   * @return {boolean}\n   */\n  static isValidSpecifier(s: string) {\n    return !!(s && matchingRegex.exec(s) !== null);\n  }\n\n  /**\n   * Returns whether the provided string identifies a real zone\n   * @param {string} zone - The string to check\n   * @example IANAZone.isValidZone(\"America/New_York\") //=> true\n   * @example IANAZone.isValidZone(\"Fantasia/Castle\") //=> false\n   * @example IANAZone.isValidZone(\"Sport~~blorp\") //=> false\n   * @return {boolean}\n   */\n  static isValidZone(zone: string) {\n    try {\n      new Intl.DateTimeFormat(\"en-US\", { timeZone: zone }).format();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Etc/GMT+8 -> -480\n  /** @ignore */\n  static parseGMTOffset(specifier: string) {\n    if (specifier) {\n      const regexp = /^Etc\\/GMT([+-]\\d{1,2})$/i;\n      const match = regexp.exec(specifier);\n      if (match !== null) {\n        return -60 * parseInt(match[1]);\n      }\n    }\n    return null;\n  }\n\n  private constructor(name: string) {\n    super();\n    /** @private **/\n    this.zoneName = name;\n    /** @private **/\n    this.valid = IANAZone.isValidZone(name);\n  }\n\n  /** @override **/\n  get type() {\n    return \"iana\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.zoneName;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts: number, { format, locale }: ZoneOffsetOptions = {}) {\n    return parseZoneInfo(ts, format, locale, this.name);\n  }\n\n  /** @override **/\n  formatOffset(ts: number, format: ZoneOffsetFormat) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts: number) {\n    const date = new Date(ts),\n      dtf = makeDTF(this.name),\n      [year, month, day, hour, minute, second] =\n        dtf.formatToParts === undefined ? hackyOffset(dtf, date) : partsOffset(dtf, date),\n      // work around https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat\n      adjustedHour = hour === 24 ? 0 : hour;\n\n    const asUTC = objToLocalTS({\n      year,\n      month,\n      day,\n      hour: adjustedHour,\n      minute,\n      second,\n      millisecond: 0\n    });\n\n    let asTS = date.valueOf();\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  /** @override **/\n  equals(other: Zone) {\n    return other.type === \"iana\" && other.name === this.name;\n  }\n\n  /** @override **/\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { formatOffset, signedOffset } from \"../impl/util\";\nimport { Zone} from \"../zone\";\nimport { ZoneOffsetFormat, ZoneOffsetOptions } from \"../types/zone\";\n\nlet singleton: FixedOffsetZone | undefined;\n\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\nexport class FixedOffsetZone extends Zone {\n  private readonly fixed: number;\n\n  /**\n   * Get a singleton instance of UTC\n   * @return {FixedOffsetZone}\n   */\n  static get utcInstance() {\n    if (singleton === undefined) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  static instance(offset: number) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone | null}\n   */\n  static parseSpecifier(s: string) {\n    if (s) {\n      const regexp = /^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i;\n      const r = regexp.exec(s);\n      if (r !== null) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset: number) {\n    super();\n    /** @private **/\n    this.fixed = offset;\n  }\n\n  /** @override **/\n  get type() {\n    return \"fixed\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\n  }\n\n  /** @override **/\n  offsetName(_ts?: number, _options?: ZoneOffsetOptions) {\n    return this.name;\n  }\n\n  /** @override **/\n  formatOffset(_ts: number, format: ZoneOffsetFormat) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return true;\n  }\n\n  /** @override **/\n  offset(_ts?: number) {\n    return this.fixed;\n  }\n\n  /** @override **/\n  equals(other: Zone): boolean {\n    return other.type === \"fixed\" && (other as FixedOffsetZone).fixed === this.fixed;\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n","/**\n * @private\n */\n\nimport { Zone } from \"../zone\";\nimport { IANAZone } from \"../zones/IANAZone\";\nimport { FixedOffsetZone } from \"../zones/fixedOffsetZone\";\nimport { SystemZone } from \"../zones/systemZone\";\nimport { InvalidZoneError } from \"../errors\";\n\nimport { isUndefined, isString, isNumber } from \"./util\";\nimport { ZoneLike } from \"../types/zone\";\n\nexport const normalizeZone = (input: ZoneLike, defaultZone: Zone) => {\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  }\n  if (input instanceof Zone) {\n    return input;\n  }\n  if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === \"default\") {\n      return defaultZone;\n    }\n    if (lowered === \"system\") {\n      return SystemZone.instance;\n    }\n    if (lowered === \"utc\") {\n      return FixedOffsetZone.utcInstance;\n    }\n    const offset = IANAZone.parseGMTOffset(input);\n    if (offset != null) {\n      // handle Etc/GMT-4, which V8 chokes on\n      return FixedOffsetZone.instance(offset);\n    }\n    if (IANAZone.isValidSpecifier(lowered)) {\n      return IANAZone.create(input);\n    }\n    const fixed = FixedOffsetZone.parseSpecifier(lowered);\n    if (fixed !== null) {\n      return fixed;\n    }\n    throw new InvalidZoneError(input);\n  }\n  if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  }\n  throw new InvalidZoneError(input);\n};\n","import { SystemZone } from \"./zones/systemZone\";\nimport { IANAZone } from \"./zones/IANAZone\";\nimport { Locale } from \"./impl/locale\";\n\nimport { normalizeZone } from \"./impl/zoneUtil\";\nimport { NumberingSystem, CalendarSystem } from \"./types/locale\";\nimport { ZoneLike } from \"./types/zone\";\n\nlet now = () => Date.now(),\n  defaultZone: ZoneLike | undefined,\n  defaultLocale: string | undefined,\n  defaultNumberingSystem: NumberingSystem | undefined,\n  defaultOutputCalendar: CalendarSystem | undefined;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   *\n   * Use the value \"system\" (default) to reset this value to the system's time zone.\n   *\n   * zone can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3'.\n   *\n   * You may also supply an instance of a {@link Zone} class, or a number which will be interpreted as a UTC offset in minutes.\n   * @param {Zone | string | number} [zone='system'] - the zone value\n   */\n  static setDefaultZone(zone?: ZoneLike) {\n    defaultZone = zone;\n  }\n\n  /**\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n   * The default value is the system's time zone (the one set on the machine that runs this code).\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale: string | undefined) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem: NumberingSystem | undefined) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar: CalendarSystem | undefined) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n}\n","import * as English from \"./english\";\nimport * as Formats from \"./formats\";\nimport { hasFormatToParts, padStart } from \"./util\";\nimport {Locale} from \"./locale\";\nimport { DateTime } from \"../datetime\";\nimport { Duration} from \"../duration\";\nimport { StringUnitLength } from \"../types/common\";\nimport { DurationUnit } from \"../types/duration\";\nimport { ZoneOffsetFormat } from \"../types/zone\";\n\nfunction stringifyTokens(\n  splits: FormatToken[],\n  tokenToString: (token: string) => string | undefined\n) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst TokenToFormatOpts: Record<string, Intl.DateTimeFormatOptions> = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS\n};\n\nexport interface FormatToken {\n  literal: boolean;\n  val: string;\n}\n\ninterface FormatterOptions extends Intl.DateTimeFormatOptions {\n  allowZ?: boolean;\n  forceSimple?: boolean;\n  format?: ZoneOffsetFormat;\n  padTo?: number;\n  floor?: boolean;\n}\n\n/**\n * @private\n */\n\nexport class Formatter {\n  // Private readonly fields\n  private options: Readonly<FormatterOptions>;\n  private loc: Locale;\n  private systemLoc?: Locale;\n\n  static create(locale: Locale, options: FormatterOptions = {}) {\n    return new Formatter(locale, options);\n  }\n\n  static parseFormat(format: string) {\n    let current = undefined,\n      currentFull = \"\",\n      bracketedLevel = 0;\n\n    const splits: FormatToken[] = [];\n    for (let i = 0; i < format.length; i++) {\n      const c = format.charAt(i);\n      if (c === \"[\") {\n        if (bracketedLevel === 0) {\n          if (currentFull.length > 0) {\n            splits.push({ literal: false, val: currentFull });\n          }\n          current = undefined;\n          currentFull = \"\";\n        } else currentFull += c;\n        bracketedLevel = bracketedLevel + 1;\n      } else if (c === \"]\") {\n        bracketedLevel = bracketedLevel - 1;\n        if (bracketedLevel === 0) {\n          if (currentFull.length > 0) {\n            splits.push({ literal: true, val: currentFull });\n          }\n          current = undefined;\n          currentFull = \"\";\n        } else currentFull += c;\n      } else if (bracketedLevel > 0) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketedLevel > 0, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token: string) {\n    return TokenToFormatOpts[token];\n  }\n\n  constructor(locale: Locale, formatOptions: FormatterOptions) {\n    this.options = formatOptions;\n    this.loc = locale;\n    this.systemLoc = undefined;\n  }\n\n  formatWithSystemDefault(dt: DateTime, options: Intl.DateTimeFormatOptions) {\n    if (this.systemLoc === undefined) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.options, options));\n    return df.format();\n  }\n\n  formatDateTime(dt: DateTime) {\n    const df = this.loc.dtFormatter(dt, this.options);\n    return df.format();\n  }\n\n  formatDateTimeParts(dt: DateTime) {\n    const df = this.loc.dtFormatter(dt, this.options);\n    return df.formatToParts();\n  }\n\n  resolvedOptions(dt: DateTime) {\n    const df = this.loc.dtFormatter(dt, this.options);\n    return df.resolvedOptions();\n  }\n\n  num(n: number, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.options.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const options = {\n      padTo: p,\n      floor: this.options.floor\n    };\n\n    return this.loc.numberFormatter(options).format(n);\n  }\n\n  formatDateTimeFromString(dt: DateTime, format: string) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter =\n        this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\" && hasFormatToParts(),\n      string = (options: Intl.DateTimeFormatOptions, extract: Intl.DateTimeFormatPartTypes) =>\n        this.loc.extract(dt, options, extract),\n      formatOffset = (options: FormatterOptions & { format: ZoneOffsetFormat }) =>\n        dt.isOffsetFixed && dt.offset === 0 && options.allowZ\n          ? \"Z\"\n          : dt.zone.formatOffset(dt.toMillis(), options.format),\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: \"numeric\", hour12: true }, \"dayPeriod\"),\n      month = (length: StringUnitLength, standalone: boolean) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"),\n      weekday = (length: StringUnitLength, standalone: boolean) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" },\n              \"weekday\"\n            ),\n      maybeMacro = (token: string) => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = (length: StringUnitLength) =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"),\n      tokenToString = (token: string): string => {\n        // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({ format: \"narrow\", allowZ: this.options.allowZ });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({ format: \"short\", allowZ: this.options.allowZ });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({ format: \"techie\", allowZ: this.options.allowZ });\n          case \"ZZZZ\":\n            // like EST\n            return (\n              dt.zone.offsetName(dt.toMillis(), { format: \"short\", locale: this.loc.locale }) || \"\"\n            );\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return (\n              dt.zone.offsetName(dt.toMillis(), { format: \"long\", locale: this.loc.locale }) || \"\"\n            );\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter\n              ? string({ year: \"2-digit\" }, \"year\")\n              : this.num(parseInt(dt.year.toString(10).slice(-2), 10), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(parseInt(dt.weekYear.toString(10).slice(-2), 10), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.toMillis() / 1000));\n          case \"x\":\n            return this.num(dt.toMillis());\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(format), tokenToString);\n  }\n\n  formatDurationFromString(dur: Duration, format: string) {\n    const tokenToField = (token: string): DurationUnit | undefined => {\n        switch (token[0]) {\n          case \"S\":\n            return \"milliseconds\";\n          case \"s\":\n            return \"seconds\";\n          case \"m\":\n            return \"minutes\";\n          case \"h\":\n            return \"hours\";\n          case \"d\":\n            return \"days\";\n          case \"M\":\n            return \"months\";\n          case \"y\":\n            return \"years\";\n          default:\n            return undefined;\n        }\n      },\n      tokenToString = (lildur: Duration) => (token: string) => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(format),\n      realTokens = tokens.reduce<string[]>(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...(realTokens.map(tokenToField).filter(Boolean) as DurationUnit[]));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","import { hasFormatToParts, hasIntl, padStart, roundTo, hasRelative } from \"./util\";\nimport * as English from \"./english\";\nimport { Settings } from \"../settings\";\nimport { DateTime } from \"../datetime\";\nimport { Formatter } from \"./formatter\";\n\nimport { StringUnitLength, UnitLength } from \"../types/common\";\nimport { LocaleOptions, NumberingSystem, CalendarSystem } from \"../types/locale\";\n\nlet intlDTCache: Record<string, Intl.DateTimeFormat> = {};\n\nfunction getCachedDTF(locString: string, options: Intl.DateTimeFormatOptions = {}) {\n  const key = JSON.stringify([locString, options]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, options);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlNumCache: Record<string, Intl.NumberFormat> = {};\n\nfunction getCachedINF(locString: string, options: Intl.NumberFormatOptions) {\n  const key = JSON.stringify([locString, options]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, options);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\n\nlet intlRelCache: Record<string, Intl.RelativeTimeFormat> = {};\n\nfunction getCachedRTF(locale: Intl.BCP47LanguageTag, options: Intl.RelativeTimeFormatOptions = {}) {\n  const key = JSON.stringify([locale, options]);\n  let inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locale, options);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\n\nlet sysLocaleCache: string | undefined;\n\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  }\n  else if (hasIntl()) {\n    const computedSys = new Intl.DateTimeFormat().resolvedOptions().locale;\n    // node sometimes defaults to \"und\". Override that because that is dumb\n    sysLocaleCache = !computedSys || computedSys === \"und\" ? \"en-US\" : computedSys;\n    return sysLocaleCache;\n  }\n  else {\n    sysLocaleCache = \"en-US\";\n    return sysLocaleCache;\n  }\n}\n\nfunction parseLocaleString(localeStr: string): [string, NumberingSystem?, CalendarSystem?] {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  }\n  else {\n    let options: Intl.ResolvedDateTimeFormatOptions;\n    const smaller = localeStr.substring(0, uIndex);\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n\n    const { numberingSystem, calendar } = options;\n    // return the smaller one so that we can append the calendar and numbering overrides to it\n    return [smaller, numberingSystem as NumberingSystem, calendar as CalendarSystem];\n  }\n}\n\nfunction intlConfigString(\n  localeStr: string,\n  numberingSystem?: NumberingSystem,\n  outputCalendar?: CalendarSystem\n) {\n  if (hasIntl()) {\n    if (outputCalendar || numberingSystem) {\n      localeStr += \"-u\";\n\n      if (outputCalendar) {\n        localeStr += `-ca-${outputCalendar}`;\n      }\n\n      if (numberingSystem) {\n        localeStr += `-nu-${numberingSystem}`;\n      }\n      return localeStr;\n    }\n    else {\n      return localeStr;\n    }\n  }\n  else {\n    // arbitrary value, should never be used, all subsequent uses of this.intl are protected by an hasIntl check\n    return \"\";\n  }\n}\n\nfunction mapMonths<T>(f: (_: DateTime) => T): T[] {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays<T>(f: (_: DateTime) => T): T[] {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff<T extends UnitLength>(\n  loc: Locale,\n  length: T,\n  defaultOK: boolean,\n  englishFn: (length: T) => string[],\n  intlFn: (length: T) => string[]\n) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === \"error\") {\n    return [];\n  }\n  else if (mode === \"en\") {\n    return englishFn(length);\n  }\n  else {\n    return intlFn(length);\n  }\n}\n\n/**\n * @private\n */\ninterface NumberFormatterOptions {\n  padTo?: number;\n  floor?: boolean;\n}\n\nclass PolyNumberFormatter {\n  private readonly padTo: number;\n  private readonly floor: boolean;\n  private inf?: Readonly<Intl.NumberFormat>;\n\n  constructor(intl: string, forceSimple: boolean, options: NumberFormatterOptions) {\n    this.padTo = options.padTo || 0;\n    this.floor = options.floor || false;\n\n    if (!forceSimple && hasIntl()) {\n      const intlOpts: Intl.NumberFormatOptions = { useGrouping: false };\n      if (this.padTo > 0) {\n        intlOpts.minimumIntegerDigits = this.padTo;\n      }\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i: number) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    }\n    else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  private options: Readonly<Intl.DateTimeFormatOptions>;\n  private dt: DateTime;\n  private dtf?: Readonly<Intl.DateTimeFormat>;\n\n  constructor(dt: DateTime, intl: string, options: Intl.DateTimeFormatOptions) {\n    this.options = options;\n    const hasIntlDTF = hasIntl();\n\n    let z;\n    if (dt.zone.isUniversal && hasIntlDTF) {\n      // Chromium doesn't support fixed-offset zones like Etc/GMT+8 in its formatter,\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=364374.\n      // So we have to make do. Two cases:\n      // 1. The format options tell us to show the zone. We can't do that, so the best\n      // we can do is format the date in UTC.\n      // 2. The format options don't tell us to show the zone. Then we can adjust\n      // the time and tell the formatter to show it to us in UTC, so that the time is right\n      // and the bad zone doesn't show up.\n      // We can clean all this up when Chrome fixes this.\n      z = \"UTC\";\n      if (options.timeZoneName) {\n        this.dt = dt;\n      }\n      else {\n        this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.toMillis() + dt.offset * 60 * 1000);\n      }\n    }\n    else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    }\n    else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    if (hasIntlDTF) {\n      const intlOpts: Intl.DateTimeFormatOptions = Object.assign({}, this.options);\n      if (z) {\n        intlOpts.timeZone = z;\n      }\n      this.dtf = getCachedDTF(intl, intlOpts);\n    }\n  }\n\n  format() {\n    if (this.dtf) {\n      return this.dtf.format(this.dt.toJSDate());\n    }\n    else {\n      const tokenFormat = English.formatString(this.options),\n        loc = Locale.create(\"en-US\");\n      return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);\n    }\n  }\n\n  formatToParts() {\n    if (this.dtf && hasFormatToParts()) {\n      return this.dtf.formatToParts(this.dt.toJSDate());\n    }\n    else {\n      // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings\n      // and IMO it's too weird to have an uncanny valley like that\n      return [];\n    }\n  }\n\n  resolvedOptions() {\n    if (this.dtf) {\n      return this.dtf.resolvedOptions();\n    }\n    else {\n      return {\n        locale: \"en-US\",\n        numberingSystem: \"latn\",\n        calendar: \"gregory\",\n        timeZone: \"UTC\"\n      };\n    }\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  private options: Readonly<Intl.RelativeTimeFormatOptions>;\n  private rtf?: Readonly<Intl.RelativeTimeFormat>;\n\n  constructor(\n    locale: Intl.BCP47LanguageTag,\n    isEnglish: boolean,\n    options: Intl.RelativeTimeFormatOptions\n  ) {\n    this.options = Object.assign({ style: \"long\" }, options);\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(locale, options);\n    }\n  }\n\n  format(count: number, unit: Intl.RelativeTimeFormatUnit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    }\n    else {\n      return English.formatRelativeTime(\n        unit,\n        count,\n        this.options.numeric,\n        this.options.style !== \"long\"\n      );\n    }\n  }\n\n  formatToParts(count: number, unit: Intl.RelativeTimeFormatUnit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    }\n    else {\n      return [];\n    }\n  }\n}\n\ninterface MonthCache {\n  format: Partial<Record<UnitLength, string[]>>;\n  standalone: Partial<Record<UnitLength, string[]>>;\n}\n\ninterface WeekDaysCache {\n  format: Partial<Record<StringUnitLength, string[]>>;\n  standalone: Partial<Record<StringUnitLength, string[]>>;\n}\n\ntype EraCache = Partial<Record<StringUnitLength, string[]>>;\n\n/**\n * @private\n */\nexport class Locale {\n  public readonly locale: string;\n  public numberingSystem?: Readonly<NumberingSystem>;\n  public outputCalendar?: Readonly<CalendarSystem>;\n\n  private readonly intl: string;\n\n  private weekdaysCache: Readonly<WeekDaysCache>;\n  private monthsCache: Readonly<MonthCache>;\n  private meridiemCache?: Readonly<string[]>;\n  private eraCache: EraCache;\n\n  private readonly specifiedLocale?: string;\n  private fastNumbersCached?: boolean;\n\n  static create(\n    locale?: string,\n    numberingSystem?: NumberingSystem,\n    outputCalendar?: CalendarSystem,\n    defaultToEN = false\n  ) {\n    const specifiedLocale = locale || Settings.defaultLocale,\n      // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n      localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale()),\n      numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,\n      outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = undefined;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar }: LocaleOptions = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  private constructor(\n    locale: string,\n    numberingSystem?: NumberingSystem,\n    outputCalendar?: CalendarSystem,\n    specifiedLocale?: string\n  ) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numberingSystem || parsedNumberingSystem;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = undefined;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = undefined;\n  }\n\n  private supportsFastNumbers() {\n    if (this.numberingSystem && this.numberingSystem !== \"latn\") {\n      return false;\n    }\n    else {\n      return (\n        this.numberingSystem === \"latn\" ||\n        !this.locale ||\n        this.locale.startsWith(\"en\") ||\n        (hasIntl() && Intl.DateTimeFormat(this.intl).resolvedOptions().numberingSystem === \"latn\")\n      );\n    }\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached === undefined) {\n      this.fastNumbersCached = this.supportsFastNumbers();\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode(defaultOK = true) {\n    const intl = hasIntl(),\n      hasFTP = intl && hasFormatToParts(),\n      isActuallyEn = this.isEnglish(),\n      hasNoWeirdness =\n        (this.numberingSystem === undefined || this.numberingSystem === \"latn\") &&\n        (this.outputCalendar === undefined || this.outputCalendar === \"gregory\");\n\n    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {\n      return \"error\";\n    }\n    else if (!hasFTP || (isActuallyEn && hasNoWeirdness)) {\n      return \"en\";\n    }\n    else {\n      return \"intl\";\n    }\n  }\n\n  clone(alts: LocaleOptions, defaultToEN = false) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    }\n    else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        defaultToEN\n      );\n    }\n  }\n\n  redefaultToEN(alts: LocaleOptions = {}) {\n    return this.clone(alts, true /* defaultToEN */);\n  }\n\n  redefaultToSystem(alts: LocaleOptions = {}) {\n    return this.clone(alts);\n  }\n\n  months(length: UnitLength, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.months, len => {\n      const intl = format ? { month: len, day: \"numeric\" } : { month: len },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][len]) {\n        this.monthsCache[formatStr][len] = mapMonths(dt => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][len] as string[];\n    });\n  }\n\n  weekdays(length: StringUnitLength, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.weekdays, len => {\n      const intl = format\n        ? { weekday: len, year: \"numeric\", month: \"long\", day: \"numeric\" }\n        : { weekday: len },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][len]) {\n        this.weekdaysCache[formatStr][len] = mapWeekdays(dt => this.extract(dt, intl, \"weekday\"));\n      }\n      return this.weekdaysCache[formatStr][len] as string[];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(\n      this,\n      \"long\", // arbitrary unused value\n      defaultOK,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it makes parsing way easier.\n        if (this.meridiemCache === undefined) {\n          const intl = { hour: \"numeric\", hour12: true };\n          this.meridiemCache = [\n            DateTime.utc(2016, 11, 13, 9),\n            DateTime.utc(2016, 11, 13, 19)\n          ].map(dt => this.extract(dt, intl, \"dayPeriod\"));\n        }\n\n        return this.meridiemCache as string[];\n      }\n    );\n  }\n\n  eras(length: StringUnitLength, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.eras, len => {\n      const intl = { era: len };\n\n      // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[len]) {\n        this.eraCache[len] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt =>\n          this.extract(dt, intl, \"era\")\n        );\n      }\n\n      return this.eraCache[len] as string[];\n    });\n  }\n\n  extract(\n    dt: DateTime,\n    intlOptions: Intl.DateTimeFormatOptions,\n    field: Intl.DateTimeFormatPartTypes\n  ) {\n    const df = this.dtFormatter(dt, intlOptions),\n      results = df.formatToParts(),\n      // Lower case comparison, type is 'dayperiod' instead of 'dayPeriod' in documentation\n      matching = results.find(\n        (m: Intl.DateTimeFormatPart) => m.type.toLowerCase() === field.toLowerCase()\n      );\n\n    if (!matching) {\n      throw new Error(`Invalid extract field ${field}`);\n    }\n    return matching.value;\n  }\n\n  numberFormatter(options: NumberFormatterOptions = {}) {\n    return new PolyNumberFormatter(this.intl, this.fastNumbers, options);\n  }\n\n  dtFormatter(dt: DateTime, intlOptions: Intl.DateTimeFormatOptions = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOptions);\n  }\n\n  relFormatter(options: Intl.RelativeTimeFormatOptions = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), options);\n  }\n\n  isEnglish() {\n    return (\n      this.locale === \"en\" ||\n      this.locale.toLowerCase() === \"en-us\" ||\n      (hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\"))\n    );\n  }\n\n  equals(other: Locale) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n","import {\n  untruncateYear,\n  signedOffset,\n  parseInteger,\n  parseMillis,\n  ianaRegex,\n  isUndefined\n} from \"./util\";\nimport * as English from \"./english\";\nimport { FixedOffsetZone } from \"../zones/fixedOffsetZone\";\nimport { IANAZone } from \"../zones/IANAZone\";\nimport { Zone } from \"../zone\";\nimport { GenericDateTime } from \"../types/datetime\";\n\n/*\n * This file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\ntype ParseResult = [GenericDateTime | null, Zone | null];\ntype Extractor = (match: RegExpExecArray) => ParseResult;\ntype CombinableParseResult = [GenericDateTime | null, Zone | null, number];\ntype CombinableExtractor = (match: RegExpExecArray, cursor: number) => CombinableParseResult;\ntype ParsePattern = [RegExp, Extractor];\n\nfunction combineRegexes(...regexes: RegExp[]) {\n  const full = regexes.reduce((f, r) => f + r.source, \"\");\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors: CombinableExtractor[]) {\n  const combinedExtractor = (match: RegExpExecArray) =>\n    extractors\n    .reduce<CombinableParseResult>(\n      ([mergedVals, mergedZone, cursor], ex) => {\n        const [val, zone, next] = ex(match, cursor);\n        return [Object.assign(mergedVals, val), mergedZone || zone, next];\n      },\n      [{}, null, 1]\n    )\n    .slice(0, 2) as ParseResult;\n  return combinedExtractor;\n}\n\nfunction parse(s: string, ...patterns: ParsePattern[]) {\n  if (s === undefined || s === null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m !== null) {\n      return extractor(m);\n    }\n  }\n\n  return [null, null];\n}\n\nfunction simpleParse(...keys: (keyof GenericDateTime)[]) {\n  return (match: RegExpExecArray, cursor: number): CombinableParseResult => {\n    const ret: Record<string, number | undefined> = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInteger(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/,\n  isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/,\n  isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),\n  isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),\n  isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\n  isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/,\n  isoOrdinalRegex = /(\\d{4})-?(\\d{3})/,\n  extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekday\"),\n  extractISOOrdinalData = simpleParse(\"year\", \"ordinal\"),\n  sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/, // dumbed-down version of the ISO one\n  sqlTimeRegex = RegExp(\n    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`\n  ),\n  sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction int(match: RegExpExecArray, pos: number, fallback: number) {\n  const m = match[pos];\n  return isUndefined(m) ? fallback : parseInteger(m);\n}\n\nfunction extractISOYmd(match: RegExpExecArray, cursor: number): CombinableParseResult {\n  const item = {\n    year: int(match, cursor, 0), // 0 default value never used?\n    month: int(match, cursor + 1, 1),\n    day: int(match, cursor + 2, 1)\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match: RegExpExecArray, cursor: number): CombinableParseResult {\n  const item = {\n    hour: int(match, cursor, 0),\n    minute: int(match, cursor + 1, 0),\n    second: int(match, cursor + 2, 0),\n    millisecond: parseMillis(match[cursor + 3])\n  };\n\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match: RegExpExecArray, cursor: number): CombinableParseResult {\n  const local = !match[cursor] && !match[cursor + 1],\n    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match: RegExpExecArray, cursor: number): CombinableParseResult {\n  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO duration parsing\n\nconst isoDuration = /^-?P(?:(?:(-?\\d{1,9})Y)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,9})W)?(?:(-?\\d{1,9})D)?(?:T(?:(-?\\d{1,9})H)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,9}))?S)?)?)$/;\n\nfunction extractISODuration(match: RegExpExecArray) {\n  const [\n    s,\n    yearStr,\n    monthStr,\n    weekStr,\n    dayStr,\n    hourStr,\n    minuteStr,\n    secondStr,\n    millisecondsStr\n  ] = match;\n\n  const hasNegativePrefix = s.startsWith(\"-\");\n\n  const maybeNegate = (num: number | undefined) =>\n    num !== undefined && hasNegativePrefix ? -num : num;\n\n  return {\n    years: maybeNegate(parseInteger(yearStr)),\n    months: maybeNegate(parseInteger(monthStr)),\n    weeks: maybeNegate(parseInteger(weekStr)),\n    days: maybeNegate(parseInteger(dayStr)),\n    hours: maybeNegate(parseInteger(hourStr)),\n    minutes: maybeNegate(parseInteger(minuteStr)),\n    seconds: maybeNegate(parseInteger(secondStr)),\n    milliseconds: maybeNegate(parseMillis(millisecondsStr))\n  };\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets: Record<string, number> = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(\n  weekdayStr: string,\n  yearStr: string,\n  monthStr: string,\n  dayStr: string,\n  hourStr: string,\n  minuteStr: string,\n  secondStr: string\n) {\n  let weekday;\n  if (weekdayStr) {\n    weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  const year =\n    yearStr.length === 2 ? untruncateYear(parseInteger(yearStr) as number) : parseInteger(yearStr);\n\n  return {\n    year,\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInteger(dayStr),\n    hour: parseInteger(hourStr),\n    minute: parseInteger(minuteStr),\n    second: parseInteger(secondStr),\n    weekday\n  };\n}\n\n// RFC 2822/5322\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match: RegExpExecArray): ParseResult {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  }\n  else if (milOffset) {\n    offset = 0;\n  }\n  else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s: string) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n  .replace(/\\([^)]*\\)|[\\n\\t]/g, \" \")\n  .replace(/(\\s\\s+)/g, \" \")\n  .trim();\n}\n\n// http date\n\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match: RegExpExecArray): ParseResult {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match: RegExpExecArray): ParseResult {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nconst isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\nconst isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\nconst isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\nconst isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\n\nconst extractISOYmdTimeAndOffset = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOWeekTimeAndOffset = combineExtractors(\n  extractISOWeekData,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);\nconst extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);\n\n/**\n * @private\n */\n\nexport function parseISODate(s: string) {\n  return parse(\n    s,\n    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],\n    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],\n    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime],\n    [isoTimeCombinedRegex, extractISOTimeAndOffset]\n  );\n}\n\nexport function parseRFC2822Date(s: string) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\n\nexport function parseHTTPDate(s: string) {\n  return parse(\n    s,\n    [rfc1123, extractRFC1123Or850],\n    [rfc850, extractRFC1123Or850],\n    [ascii, extractASCII]\n  );\n}\n\nexport function parseISODuration(s: string) {\n  const m = isoDuration.exec(s);\n  if (m !== null) {\n    return extractISODuration(m);\n  }\n\n  return undefined;\n}\n\nconst sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\nconst sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\n\nconst extractISOYmdTimeOffsetAndIANAZone = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOTimeOffsetAndIANAZone = combineExtractors(\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\n\nexport function parseSQL(s: string) {\n  return parse(\n    s,\n    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone],\n    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]\n  );\n}\n","import { asNumber, isUndefined, isNumber, normalizeObject, roundTo } from \"./impl/util\";\nimport { Locale } from \"./impl/locale\";\nimport { Formatter } from \"./impl/formatter\";\nimport { parseISODuration } from \"./impl/regexParser\";\nimport { InvalidArgumentError, InvalidUnitError, UnparsableStringError } from \"./errors\";\nimport {\n  DurationObject,\n  DurationOptions,\n  DurationToFormatOptions,\n  DurationUnit\n} from \"./types/duration\";\nimport { ConversionAccuracy, ThrowOnInvalid } from \"./types/common\";\n\ninterface NormalizedDurationObject {\n  years?: number;\n  quarters?: number;\n  months?: number;\n  weeks?: number;\n  days?: number;\n  hours?: number;\n  minutes?: number;\n  seconds?: number;\n  milliseconds?: number;\n}\n\ntype NormalizedDurationUnit = keyof NormalizedDurationObject;\n\ntype ConversionMatrixUnit = Exclude<NormalizedDurationUnit, \"milliseconds\">;\ntype ConversionMatrix = Readonly<{ [key in ConversionMatrixUnit]: { [key in NormalizedDurationUnit]?: number } }>;\n\n// unit conversion constants\nconst lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 }\n  },\n  casualMatrix: ConversionMatrix = Object.assign(\n    {\n      years: {\n        quarters: 4,\n        months: 12,\n        weeks: 52,\n        days: 365,\n        hours: 365 * 24,\n        minutes: 365 * 24 * 60,\n        seconds: 365 * 24 * 60 * 60,\n        milliseconds: 365 * 24 * 60 * 60 * 1000\n      },\n      quarters: {\n        months: 3,\n        weeks: 13,\n        days: 91,\n        hours: 91 * 24,\n        minutes: 91 * 24 * 60,\n        seconds: 91 * 24 * 60 * 60,\n        milliseconds: 91 * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: 4,\n        days: 30,\n        hours: 30 * 24,\n        minutes: 30 * 24 * 60,\n        seconds: 30 * 24 * 60 * 60,\n        milliseconds: 30 * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  ),\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix: ConversionMatrix = Object.assign(\n    {\n      years: {\n        quarters: 4,\n        months: 12,\n        weeks: daysInYearAccurate / 7,\n        days: daysInYearAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      },\n      quarters: {\n        months: 3,\n        weeks: daysInYearAccurate / 28,\n        days: daysInYearAccurate / 4,\n        hours: (daysInYearAccurate * 24) / 4,\n        minutes: (daysInYearAccurate * 24 * 60) / 4,\n        seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,\n        milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4\n      },\n      months: {\n        weeks: daysInMonthAccurate / 7,\n        days: daysInMonthAccurate,\n        hours: daysInMonthAccurate * 24,\n        minutes: daysInMonthAccurate * 24 * 60,\n        seconds: daysInMonthAccurate * 24 * 60 * 60,\n        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  );\n\n// units ordered by size\nconst orderedUnits: NormalizedDurationUnit[] = [\n  \"years\",\n  \"quarters\",\n  \"months\",\n  \"weeks\",\n  \"days\",\n  \"hours\",\n  \"minutes\",\n  \"seconds\",\n  \"milliseconds\"\n];\n\nconst reverseUnits = orderedUnits.slice(0).reverse();\n\nfunction antiTrunc(n: number) {\n  return n < 0 ? Math.floor(n) : Math.ceil(n);\n}\n\n// NB: mutates parameters\nfunction convert(\n  matrix: ConversionMatrix,\n  fromMap: NormalizedDurationObject,\n  fromUnit: NormalizedDurationUnit,\n  toMap: NormalizedDurationObject,\n  toUnit: ConversionMatrixUnit\n) {\n  const conv = matrix[toUnit][fromUnit] as number,\n    raw = (fromMap[fromUnit] as number) / conv,\n    sameSign = Math.sign(raw) === Math.sign(toMap[toUnit] as number),\n    // ok, so this is wild, but see the matrix in the tests\n    added =\n      !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);\n\n  toMap[toUnit] = (toMap[toUnit] as number) + added;\n  fromMap[fromUnit] = (fromMap[fromUnit] as number) - added * conv;\n}\n\n// NB: mutates vals parameters\nfunction normalizeValues(matrix: ConversionMatrix, vals: NormalizedDurationObject) {\n  let previousUnit: NormalizedDurationUnit | undefined;\n  reverseUnits.forEach(unit => {\n    if (!isUndefined(vals[unit])) {\n      if (previousUnit) {\n        convert(matrix, vals, previousUnit, vals, unit as ConversionMatrixUnit);\n      }\n      previousUnit = unit;\n    }\n  });\n}\n\ninterface Config {\n  conversionAccuracy?: ConversionAccuracy;\n  values: NormalizedDurationObject;\n  loc: Locale;\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n * * **Unit values** See the {@link Duration#years}, {@link Duration.months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.\n * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.\n * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}\n *\n * There are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport class Duration {\n  // Private readonly fields\n  private values: Readonly<NormalizedDurationObject>;\n  private loc: Locale;\n  private matrix: ConversionMatrix;\n  private readonly isLuxonDuration: true;\n\n  /**\n   * @private\n   */\n  private constructor(config: Config) {\n    const accurate = config.conversionAccuracy === \"longterm\" || false;\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.matrix = accurate ? accurateMatrix : casualMatrix;\n    /**\n     * @access private\n     */\n    this.isLuxonDuration = true;\n  }\n\n  static fromMillis(count: number): Duration;\n  static fromMillis(count: number, options: DurationOptions & ThrowOnInvalid): Duration;\n  static fromMillis(count: number, options: DurationOptions): Duration | null;\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} options - options for parsing\n   * @param {string} [options.locale='en-US'] - the locale to use\n   * @param {string} [options.numberingSystem] - the numbering system to use\n   * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on error instead of throwing\n   * @return {Duration}\n   */\n  static fromMillis(count: number, options: DurationOptions = {}) {\n    return Duration.fromObject({ milliseconds: count }, options);\n  }\n\n  static fromObject(obj: DurationObject): Duration;\n  static fromObject(obj: DurationObject, options: DurationOptions & ThrowOnInvalid): Duration;\n  static fromObject(obj: DurationObject, options: DurationOptions): Duration | null;\n  /**\n   * Create a Duration from a Javascript object with keys like 'years' and 'hours.\n   * If this object is empty then a zero milliseconds duration is returned.\n   * @param {Object} obj - the object to create the Duration from\n   * @param {number} obj.years\n   * @param {number} obj.quarters\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {Object} options - options for parsing\n   * @param {string} [options.locale='en-US'] - the locale to use\n   * @param {string} [options.numberingSystem] - the numbering system to use\n   * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on error instead of throwing\n   * @return {Duration}\n   */\n  static fromObject(obj: DurationObject, options: DurationOptions = {}) {\n    if (obj === undefined || obj === null || typeof obj !== \"object\") {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new InvalidArgumentError(\n        `Duration.fromObject: argument expected to be an object, got ${\n          obj === null ? \"null\" : typeof obj\n        }`\n      );\n    }\n\n    let values;\n    try {\n      values = normalizeObject(obj as Record<string, number>, Duration.normalizeUnit);\n    } catch (error) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw error;\n    }\n\n    return new Duration({\n      values,\n      loc: Locale.fromObject(options),\n      conversionAccuracy: options.conversionAccuracy\n    });\n  }\n\n  static fromISO(text: string): Duration;\n  static fromISO(text: string, options: DurationOptions & ThrowOnInvalid): Duration;\n  static fromISO(text: string, options: DurationOptions): Duration | null;\n  /**\n   * Create a Duration from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} options - options for parsing\n   * @param {string} [options.locale='en-US'] - the locale to use\n   * @param {string} [options.numberingSystem] - the numbering system to use\n   * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text: string, options: DurationOptions = {}) {\n    const parsed = parseISODuration(text);\n    if (parsed) {\n      return Duration.fromObject(parsed, options);\n    }\n    else {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new UnparsableStringError(\"ISO 8601\", text);\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit: string) {\n    // TODO should be private\n    const pluralMapping: { [key in DurationUnit]: NormalizedDurationUnit } = {\n      year: \"years\",\n      years: \"years\",\n      quarter: \"quarters\",\n      quarters: \"quarters\",\n      month: \"months\",\n      months: \"months\",\n      week: \"weeks\",\n      weeks: \"weeks\",\n      day: \"days\",\n      days: \"days\",\n      hour: \"hours\",\n      hours: \"hours\",\n      minute: \"minutes\",\n      minutes: \"minutes\",\n      second: \"seconds\",\n      seconds: \"seconds\",\n      millisecond: \"milliseconds\",\n      milliseconds: \"milliseconds\"\n    };\n    const normalized = pluralMapping[(unit ? unit.toLowerCase() : unit) as DurationUnit];\n\n    if (!normalized) {\n      throw new InvalidUnitError(unit);\n    }\n\n    return normalized;\n  }\n\n  /**\n   * Check if an object is a Duration. Works across context boundaries\n   * @param {Object} o\n   * @return {boolean}\n   */\n  static isDuration(o: unknown): o is Duration {\n    return (o && (o as Duration).isLuxonDuration) || false;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @type {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @type {NumberingSystem}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n   * * `S` for milliseconds\n   * * `s` for seconds\n   * * `m` for minutes\n   * * `h` for hours\n   * * `d` for days\n   * * `M` for months\n   * * `y` for years\n   * Notes:\n   * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n   * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.\n   * @param {string} format - the format string\n   * @param {Object} options - options\n   * @param {boolean} [options.floor=true] - whether to floor numerical values or not\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\n   * @return {string}\n   */\n  toFormat(format: string, options: DurationToFormatOptions = { floor: true }) {\n    return Formatter.create(this.loc, options).formatDurationFromString(this, format);\n  }\n\n  /**\n   * Returns a Javascript object with this Duration's values.\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {Object}\n   */\n  toObject(): DurationObject {\n    return Object.assign({}, this.values);\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    let s = \"P\";\n    if (this.years !== 0) {\n      s += this.years + \"Y\";\n    }\n    if (this.months !== 0 || this.quarters !== 0) {\n      s += this.months + this.quarters * 3 + \"M\";\n    }\n    if (this.weeks !== 0) {\n      s += this.weeks + \"W\";\n    }\n    if (this.days !== 0) {\n      s += this.days + \"D\";\n    }\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) {\n      s += \"T\";\n    }\n    if (this.hours !== 0) {\n      s += this.hours + \"H\";\n    }\n    if (this.minutes !== 0) {\n      s += this.minutes + \"M\";\n    }\n    if (this.seconds !== 0 || this.milliseconds !== 0)\n    // this will handle \"floating point madness\" by removing extra decimal places\n    // https://stackoverflow.com/questions/588004/is-floating-point-math-broken\n    {\n      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + \"S\";\n    }\n    if (s === \"P\") {\n      s += \"T0S\";\n    }\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration.\n   * @return {number}\n   */\n  valueOf() {\n    return this.as(\"milliseconds\");\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object} duration - The amount to add. Either a Luxon Duration or the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration: DurationLike) {\n    const dur = friendlyDuration(duration),\n      result: NormalizedDurationObject = {};\n\n    orderedUnits.forEach(unit => {\n      if (dur.values[unit] !== undefined || this.values[unit] !== undefined) {\n        result[unit] = dur.get(unit) + this.get(unit);\n      }\n    });\n\n    return this.clone(result);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object} duration - The amount to subtract. Either a Luxon Duration or the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration: DurationLike) {\n    const dur = friendlyDuration(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Scale this Duration by the specified amount. Return a newly-constructed Duration.\n   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === \"hour\" ? x * 2 : x) //=> { hours: 2, minutes: 30 }\n   * @return {Duration}\n   */\n  mapUnits(fn: (x: number, unit: DurationUnit) => number) {\n    const result: NormalizedDurationObject = {};\n    for (const k in this.values) {\n      const unit = k as NormalizedDurationUnit;\n      result[unit] = asNumber(fn(this.values[unit] as number, unit));\n    }\n    return this.clone(result);\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\n   * @return {number}\n   */\n  get(unit: DurationUnit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Non-specified units stay unchanged. Return a newly-constructed Duration.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values: DurationObject) {\n    const mixed = Object.assign(\n      this.values,\n      normalizeObject(values as Record<string, number>, Duration.normalizeUnit)\n    );\n    return this.clone(mixed, false /* do not clean, merge with existing */);\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem and/or conversionAccuracy. Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy }: DurationOptions = {}) {\n    const conf = {\n      values: this.values,\n      loc: this.loc.clone({ locale, numberingSystem }),\n      conversionAccuracy: conversionAccuracy || this.conversionAccuracy()\n    };\n    return new Duration(conf);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit: DurationUnit) {\n    return this.shiftTo(unit).get(unit);\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    // todo - this should keep the options...\n    const vals = this.toObject();\n    normalizeValues(this.matrix, vals);\n    return this.clone(vals);\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units: DurationUnit[]) {\n    const normalizedUnits = units.map(u => Duration.normalizeUnit(u));\n\n    if (normalizedUnits.length === 0) {\n      return this;\n    }\n\n    const built: NormalizedDurationObject = {},\n      accumulated: NormalizedDurationObject = {},\n      vals = this.toObject();\n    let lastUnit: NormalizedDurationUnit | undefined = undefined;\n\n    for (const k of orderedUnits) {\n      if (normalizedUnits.indexOf(k) >= 0) {\n        lastUnit = k;\n\n        let own = 0;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const acc in accumulated) {\n          const unit = acc as ConversionMatrixUnit;\n          own += (this.matrix[unit][k] as number) * (accumulated[unit] as number);\n          delete accumulated[unit];\n        }\n\n        // plus anything that's already in this unit\n        const unitValue = vals[k];\n        if (isNumber(unitValue)) {\n          own += unitValue;\n        }\n\n        const i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = own - i; // we'd like to absorb these fractions in another unit\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down as NormalizedDurationUnit) > orderedUnits.indexOf(k)) {\n            convert(\n              this.matrix,\n              vals,\n              down as NormalizedDurationUnit,\n              built,\n              k as ConversionMatrixUnit // never happens when k is milliseconds\n            );\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      }\n      else if (isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    // lastUnit is defined here since units is not empty\n    for (const key in accumulated) {\n      const unit = key as NormalizedDurationUnit;\n      const acc = accumulated[unit];\n      if (acc !== undefined) {\n        built[lastUnit as NormalizedDurationUnit] =\n          (built[lastUnit as NormalizedDurationUnit] as number) +\n          (key === lastUnit\n            ? (accumulated[key] as number)\n            : // lastUnit could be 'milliseconds' but so would then be the unique key in accumulated\n              // Cast to ConversionMatrixUnit is hence safe here\n            acc / (this.matrix[lastUnit as ConversionMatrixUnit][unit] as number));\n      }\n    }\n\n    return this.clone(built).normalize();\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    const negated: NormalizedDurationObject = {};\n    for (const k in this.values) {\n      const unit = k as NormalizedDurationUnit;\n      negated[unit] = -(this.values[unit] as number);\n    }\n    return this.clone(negated);\n  }\n\n  /**\n   * Get the years.\n   * @type {number}\n   */\n  get years() {\n    return this.values.years || 0;\n  }\n\n  /**\n   * Get the quarters.\n   * @type {number}\n   */\n  get quarters() {\n    return this.values.quarters || 0;\n  }\n\n  /**\n   * Get the months.\n   * @type {number}\n   */\n  get months() {\n    return this.values.months || 0;\n  }\n\n  /**\n   * Get the weeks\n   * @type {number}\n   */\n  get weeks() {\n    return this.values.weeks || 0;\n  }\n\n  /**\n   * Get the days.\n   * @type {number}\n   */\n  get days() {\n    return this.values.days || 0;\n  }\n\n  /**\n   * Get the hours.\n   * @type {number}\n   */\n  get hours() {\n    return this.values.hours || 0;\n  }\n\n  /**\n   * Get the minutes.\n   * @type {number}\n   */\n  get minutes() {\n    return this.values.minutes || 0;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.values.seconds || 0;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.values.milliseconds || 0;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other: Duration) {\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    for (const u of orderedUnits) {\n      if (this.values[u] !== other.values[u]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * @private\n   */\n  // clone really means \"create another instance just like this one, but with these changes\"\n  private clone(values: NormalizedDurationObject, clear = true) {\n    // deep merge for vals\n    const conf = {\n      values: clear ? values : Object.assign({}, this.values, values),\n      loc: this.loc,\n      conversionAccuracy: this.conversionAccuracy()\n    };\n    return new Duration(conf);\n  }\n\n  /**\n   * @private\n   */\n  private conversionAccuracy(): ConversionAccuracy {\n    return this.matrix === accurateMatrix ? \"longterm\" : \"casual\";\n  }\n}\n\nexport type DurationLike = Duration | DurationObject;\n\n/**\n * @private\n */\nexport function friendlyDuration(duration: DurationLike | unknown) {\n  if (Duration.isDuration(duration)) {\n    return duration;\n  }\n\n  if (typeof duration === \"object\" && duration !== null) {\n    return Duration.fromObject(duration);\n  }\n\n  throw new InvalidArgumentError(\n    `Unknown duration argument ${duration} of type ${typeof duration}`\n  );\n}\n","import { DateTime, DateTimeLike } from \"./datetime\";\nimport { Duration, friendlyDuration, DurationLike } from \"./duration\";\nimport { InvalidArgumentError, UnparsableStringError } from \"./errors\";\nimport { ToISOTimeOptions, DateTimeWithZoneOptions } from \"./types/datetime\";\nimport { DurationUnit, DurationOptions } from \"./types/duration\";\nimport { IntervalObject } from \"./types/interval\";\nimport { ThrowOnInvalid } from \"./types/common\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start: DateTime | null, end: DateTime | null) {\n  if (!DateTime.isDateTime(start)) {\n    throw new InvalidArgumentError(\"Must pass a DateTime as the start\");\n  }\n  else if (!DateTime.isDateTime(end)) {\n    throw new InvalidArgumentError(\"Must pass a DateTime as the end\");\n  }\n  else if (end < start) {\n    throw new InvalidArgumentError(\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  }\n}\n\nfunction friendlyDateTime(dateTimeish: DateTimeLike) {\n  if (DateTime.isDateTime(dateTimeish)) {\n    return dateTimeish;\n  }\n  else if (dateTimeish instanceof Date) {\n    return DateTime.fromJSDate(dateTimeish);\n  }\n  else if (typeof dateTimeish === \"object\" && dateTimeish) {\n    return DateTime.fromObject(dateTimeish);\n  }\n\n  throw new InvalidArgumentError(\n    `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`\n  );\n}\n\ninterface Config {\n  start: DateTime | null;\n  end: DateTime | null;\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval#merge}, {@link Interval#xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}.\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport class Interval {\n  // Private readonly fields\n  private s: DateTime;\n  private e: DateTime;\n  private readonly isLuxonInterval: true;\n\n  /**\n   * @private\n   */\n  private constructor(config: Config) {\n    validateStartEnd(config.start, config.end);\n\n    /**\n     * @access private\n     */\n    this.s = config.start as DateTime;\n    /**\n     * @access private\n     */\n    this.e = config.end as DateTime;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start: DateTimeLike, end: DateTimeLike) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    return new Interval({\n      start: builtStart,\n      end: builtEnd\n    });\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object} duration - the length of the Interval, as a Duration object.\n   * @return {Interval}\n   */\n  static after(start: DateTimeLike, duration: DurationLike) {\n    const dur = friendlyDuration(duration),\n      dt = friendlyDateTime(start);\n\n    return new Interval({\n      start: dt,\n      end: dt ? dt.plus(dur) : null\n    });\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object} duration - the length of the Interval, as a Duration object.\n   * @return {Interval}\n   */\n  static before(end: DateTimeLike, duration: DurationLike) {\n    const dur = friendlyDuration(duration),\n      dt = friendlyDateTime(end);\n\n    return new Interval({\n      start: dt ? dt.minus(dur) : null,\n      end: dt\n    });\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [options] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text: string, options: DateTimeWithZoneOptions = {}) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    const nullOnInvalidOpts = Object.assign({}, options, { nullOnInvalid: true });\n    if (s && e) {\n      const start = DateTime.fromISO(s, nullOnInvalidOpts);\n      const end = DateTime.fromISO(e, nullOnInvalidOpts);\n\n      if (start !== null && end !== null) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (start !== null) {\n        const dur = Duration.fromISO(e, nullOnInvalidOpts);\n        if (dur !== null) {\n          return Interval.after(start, dur);\n        }\n      }\n      else if (end !== null) {\n        const dur = Duration.fromISO(s, nullOnInvalidOpts);\n        if (dur !== null) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    throw new UnparsableStringError(\"ISO 8601\", text);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {Object} o\n   * @return {boolean}\n   */\n  static isInterval(o: unknown): o is Interval {\n    return (o && (o as Interval).isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.s;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.e;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} [unit='milliseconds'] - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit: DurationUnit = \"milliseconds\") {\n    return this.toDuration(unit).get(unit);\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit: DurationUnit = \"milliseconds\") {\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit: DurationUnit) {\n    return this.isEmpty() || this.e.minus({ milliseconds: 1 }).hasSame(this.s, unit);\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime: DateTime) {\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime: DateTime) {\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime: DateTime) {\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end }: IntervalObject) {\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...[DateTime]} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  splitAt(...dateTimes: DateTimeLike[]) {\n    const sorted = dateTimes\n      .map(friendlyDateTime)\n      .filter(d => this.contains(d))\n      .sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object} duration - The length of each resulting interval, as a Duration object.\n   * @return {[Interval]}\n   */\n  splitBy(duration: DurationLike) {\n    const dur = friendlyDuration(duration);\n\n    if (dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      added,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  divideEqually(numberOfParts: number) {\n    return this.splitBy({ milliseconds: this.length() / numberOfParts }).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other: Interval) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other: Interval) {\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other: Interval) {\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other: Interval) {\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other: Interval) {\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval|null}\n   */\n  intersection(other: Interval) {\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    }\n    else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other: Interval) {\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static merge(intervals: Interval[]) {\n    const [found, final] = intervals\n    .sort((a, b) => a.s.valueOf() - b.s.valueOf())\n    .reduce<[Interval[], Interval | null]>(\n      ([sofar, current], item) => {\n        if (!current) {\n          return [sofar, item];\n        }\n        else if (current.overlaps(item) || current.abutsStart(item)) {\n          return [sofar, current.union(item)];\n        }\n        else {\n          return [sofar.concat([current]), item];\n        }\n      },\n      [[], null]\n    );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static xor(intervals: Interval[]) {\n    let start: DateTime | null = null,\n      currentCount = 0;\n\n    interface IntervalBoundary {\n      time: DateTime;\n      type: \"s\" | \"e\";\n    }\n\n    const results = [],\n      ends = intervals.map(i => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" }\n      ]),\n      flattened: IntervalBoundary[] = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time.valueOf() - b.time.valueOf());\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      }\n      else {\n        if (start && start.valueOf() !== i.time.valueOf()) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Returns Intervals representing the span(s) of time in this Interval that don't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {[Interval]}\n   */\n  difference(...intervals: Interval[]) {\n    return Interval.xor([this as Interval].concat(intervals))\n    .map(i => this.intersection(i))\n    .filter(i => i !== null && !i.isEmpty()) as Interval[];\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} options - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(options: ToISOTimeOptions = {}) {\n    return `${this.s.toISO(options)}/${this.e.toISO(options)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} options - The same options as {@link DateTime#toISO}\n   * @return {string}\n   *\n   */\n  toISOTime(options: ToISOTimeOptions = {}) {\n    return `${this.s.toISOTime(options)}/${this.e.toISOTime(options)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {Object} options - options\n   * @param {string} [options.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat: string, options = { separator: \" – \" }) {\n    return `${this.s.toFormat(dateFormat)}${options.separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  toDuration(): Duration;\n  toDuration(unit: DurationUnit | DurationUnit[]): Duration;\n  toDuration(\n    unit: DurationUnit | DurationUnit[],\n    options: DurationOptions & ThrowOnInvalid\n  ): Duration;\n  toDuration(unit: DurationUnit | DurationUnit[], options: DurationOptions): Duration | null;\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} options - options that affect the creation of the Duration\n   * @param {string} [options.locale=end()'s locale] - the locale to use\n   * @param {string} [options.numberingSystem=end()'s numberingSystem] - the numbering system to use\n   * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on error instead of throwing\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit: DurationUnit | DurationUnit[] = \"milliseconds\", options: DurationOptions = {}) {\n    return this.e.diff(this.s, unit, options);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn: (dt: DateTime) => DateTime) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n","import { DateTime } from \"./datetime\";\nimport { Settings } from \"./settings\";\nimport { Locale } from \"./impl/locale\";\nimport { IANAZone } from \"./zones/IANAZone\";\nimport { normalizeZone } from \"./impl/zoneUtil\";\n\nimport { hasFormatToParts, hasIntl, hasRelative } from \"./impl/util\";\nimport { StringUnitLength, UnitLength } from \"./types/common\";\nimport { InfoOptions, InfoCalendarOptions, InfoUnitOptions, Features } from \"./types/info\";\nimport { ZoneLike } from \"./types/zone\";\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone|number} [zone='default'] - Zone to check. Defaults to the system's time zone, unless overriden in Settings.defaultZone\n   * @return {boolean}\n   */\n  static hasDST(zone?: ZoneLike) {\n    const zoneObj = normalizeZone(zone, Settings.defaultZone);\n\n    if (!zoneObj.isValid) {\n      return false;\n    }\n    const proto = DateTime.now()\n    .setZone(zoneObj)\n    .set({ month: 12 });\n\n    return !zoneObj.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;\n  }\n\n  /**\n   * Return whether the specified zone is a valid IANA specifier.\n   * @param {string} zone - Zone to check\n   * @return {boolean}\n   */\n  static isValidIANAZone(zone: string) {\n    return IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);\n  }\n\n  /**\n   * Converts the input into a {@link Zone} instance.\n   *\n   * * If `input` is already a Zone instance, it is returned unchanged.\n   * * If `input` is a string containing a valid IANA time zone name, a Zone instance\n   *   with that name is returned.\n   * * If `input` is the string \"system\", the system's time zone is returned.\n   * * If `input` is the string \"default\", the default time zone, as defined in\n   *   Settings.defaultZone is returned.\n   * * If `input` is a string that doesn't refer to a known time zone, a Zone\n   *   instance with {@link Zone.isValid} == false is returned.\n   * * If `input is a number, a Zone instance with the specified fixed offset\n   *   in minutes is returned.\n   * * If `input` is `null` or `undefined`, the default zone is returned.\n   * @param {string|Zone|number} [input] - the value to be converted\n   * @return {Zone}\n   */\n  static normalizeZone(input?: ZoneLike) {\n    return normalizeZone(input, Settings.defaultZone);\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} options - options\n   * @param {string} [options.locale] - the locale code\n   * @param {string} [options.numberingSystem] - the numbering system\n   * @param {string} [options.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {[string]}\n   */\n  static months(length: UnitLength = \"long\", { locale, numberingSystem, outputCalendar = \"gregory\" }: InfoCalendarOptions = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link Info#months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} options - options\n   * @param {string} [options.locale] - the locale code\n   * @param {string} [options.numberingSystem] - the numbering system\n   * @param {string} [options.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static monthsFormat(length: UnitLength = \"long\", { locale, numberingSystem, outputCalendar = \"gregory\" }: InfoCalendarOptions = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} options - options\n   * @param {string} [options.locale] - the locale code\n   * @param {string} [options.numberingSystem] - the numbering system\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\n   * @return {[string]}\n   */\n  static weekdays(\n    length: StringUnitLength = \"long\",\n    { locale, numberingSystem }: InfoUnitOptions = {}\n  ) {\n    return Locale.create(locale, numberingSystem).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link Info#weekdays}\n   * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} options - options\n   * @param {string} [options.locale] - the locale code\n   * @param {string} [options.numberingSystem] - the numbering system\n   * @return {[string]}\n   */\n  static weekdaysFormat(\n    length: StringUnitLength = \"long\",\n    { locale, numberingSystem }: InfoUnitOptions = {}\n  ) {\n    return Locale.create(locale, numberingSystem).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {Object} options - options\n   * @param {string} [options.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]\n   * @return {[string]}\n   */\n  static meridiems({ locale }: InfoOptions = {}) {\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {Object} options - options\n   * @param {string} [options.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {[string]}\n   */\n  static eras(length: StringUnitLength = \"short\", { locale }: InfoOptions = {}) {\n    return Locale.create(locale, undefined, \"gregory\").eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `zones`: whether this environment supports IANA timezones\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n   * * `intl`: whether this environment supports general internationalization\n   * * `relative`: whether this environment supports relative time formatting\n   * @example Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }\n   * @return {Object}\n   */\n  static features(): Features {\n    let intl = false,\n      intlTokens = false,\n      zones = false,\n      relative = false;\n\n    if (hasIntl()) {\n      intl = true;\n      intlTokens = hasFormatToParts();\n      relative = hasRelative();\n\n      try {\n        zones =\n          new Intl.DateTimeFormat(\"en\", { timeZone: \"America/New_York\" }).resolvedOptions()\n            .timeZone === \"America/New_York\";\n      } catch (e) {\n        zones = false;\n      }\n    }\n\n    return { intl, intlTokens, zones, relative };\n  }\n}\n","import { Duration } from \"../duration\";\nimport { DateTime } from \"../datetime\";\nimport { DurationUnit, DurationOptions, DurationObject } from \"../types/duration\";\nimport { ThrowOnInvalid } from \"../types/common\";\n\nfunction dayDiff(earlier: DateTime, later: DateTime) {\n  const utcDayStart = (dt: DateTime) =>\n      dt\n      .toUTC(0, { keepLocalTime: true })\n      .startOf(\"days\")\n      .valueOf(),\n    ms = utcDayStart(later) - utcDayStart(earlier);\n  return Math.floor(Duration.fromMillis(ms).as(\"days\"));\n}\n\nfunction highOrderDiffs(\n  earlier: DateTime,\n  later: DateTime,\n  units: DurationUnit[]\n): [DateTime, DurationObject, DateTime, DurationUnit | undefined] {\n  const differs: [DurationUnit, (a: DateTime, b: DateTime) => number][] = [\n    [\"years\", (a, b) => b.year - a.year],\n    [\"months\", (a, b) => b.month - a.month + (b.year - a.year) * 12],\n    [\n      \"weeks\",\n      (a, b) => {\n        const days = dayDiff(a, b);\n        return (days - (days % 7)) / 7;\n      }\n    ],\n    [\"days\", dayDiff]\n  ];\n\n  const results: DurationObject = {};\n  let lowestOrder: DurationUnit | undefined,\n    highWater = earlier,\n    cursor = earlier.reconfigure({});\n\n  for (const [unit, differ] of differs) {\n    if (units.indexOf(unit) >= 0) {\n      lowestOrder = unit;\n\n      let delta = differ(cursor, later);\n      highWater = cursor.plus({ [unit]: delta });\n\n      if (highWater > later) {\n        cursor = cursor.plus({ [unit]: delta - 1 });\n        delta -= 1;\n      }\n      else {\n        cursor = highWater;\n      }\n\n      results[unit] = delta;\n    }\n  }\n\n  return [cursor, results, highWater, lowestOrder];\n}\n\nexport const diff = (earlier: DateTime, later: DateTime, units: DurationUnit[], options: DurationOptions & ThrowOnInvalid) => {\n  // eslint-disable-next-line prefer-const\n  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);\n\n  const remainingMillis = later.valueOf() - cursor.valueOf();\n\n  const lowerOrderUnits = units.filter(\n    u => [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].indexOf(u) >= 0\n  );\n\n  if (lowerOrderUnits.length === 0) {\n    // if there are no low order units, there is at least one high order unit\n    // and lowestOrder is hence defined\n    if (highWater < later) {\n      highWater = cursor.plus({ [lowestOrder as DurationUnit]: 1 });\n    }\n\n    if (highWater !== cursor) {\n      results[lowestOrder as DurationUnit] =\n        (results[lowestOrder as DurationUnit] as number) +\n        remainingMillis / (highWater.valueOf() - cursor.valueOf());\n    }\n  }\n\n  const duration = Duration.fromObject(results, options);\n\n  if (lowerOrderUnits.length > 0) {\n    return Duration.fromMillis(remainingMillis, options)\n    .shiftTo(...lowerOrderUnits)\n    .plus(duration);\n  }\n  else {\n    return duration;\n  }\n};\n","import { NumberingSystem } from \"../types/locale\";\nimport { Locale} from \"./locale\";\n\nconst numberingSystems: { [key in NumberingSystem]: string } = {\n  arab: \"[\\u0660-\\u0669]\",\n  arabext: \"[\\u06F0-\\u06F9]\",\n  bali: \"[\\u1B50-\\u1B59]\",\n  beng: \"[\\u09E6-\\u09EF]\",\n  deva: \"[\\u0966-\\u096F]\",\n  fullwide: \"[\\uFF10-\\uFF19]\",\n  gujr: \"[\\u0AE6-\\u0AEF]\",\n  hanidec: \"[〇|一|二|三|四|五|六|七|八|九]\",\n  khmr: \"[\\u17E0-\\u17E9]\",\n  knda: \"[\\u0CE6-\\u0CEF]\",\n  laoo: \"[\\u0ED0-\\u0ED9]\",\n  limb: \"[\\u1946-\\u194F]\",\n  mlym: \"[\\u0D66-\\u0D6F]\",\n  mong: \"[\\u1810-\\u1819]\",\n  mymr: \"[\\u1040-\\u1049]\",\n  orya: \"[\\u0B66-\\u0B6F]\",\n  tamldec: \"[\\u0BE6-\\u0BEF]\",\n  telu: \"[\\u0C66-\\u0C6F]\",\n  thai: \"[\\u0E50-\\u0E59]\",\n  tibt: \"[\\u0F20-\\u0F29]\",\n  latn: \"\\\\d\"\n};\n\nconst numberingSystemsUTF16: { [key in NumberingSystem]: [number, number] } = {\n  arab: [1632, 1641],\n  arabext: [1776, 1785],\n  bali: [6992, 7001],\n  beng: [2534, 2543],\n  deva: [2406, 2415],\n  fullwide: [65296, 65303],\n  gujr: [2790, 2799],\n  khmr: [6112, 6121],\n  knda: [3302, 3311],\n  laoo: [3792, 3801],\n  limb: [6470, 6479],\n  mlym: [3430, 3439],\n  mong: [6160, 6169],\n  mymr: [4160, 4169],\n  orya: [2918, 2927],\n  tamldec: [3046, 3055],\n  telu: [3174, 3183],\n  thai: [3664, 3673],\n  tibt: [3872, 3881],\n  latn: [48, 57], // not used by parseDigits, relying on parseInt instead\n  hanidec: [-1, -1] // see special case for hanidec characters below\n};\n\n// eslint-disable-next-line no-useless-escape\nconst hanidecChars = numberingSystems.hanidec.replace(/[\\[|\\]]/g, \"\").split(\"\");\n\nexport function parseDigits(str: string) {\n  const intValue = parseInt(str, 10);\n  if (!isNaN(intValue)) return intValue;\n\n  let digits = \"\";\n  for (let i = 0; i < str.length; i++) {\n    const code = str.charCodeAt(i);\n\n    if (str[i].search(numberingSystems.hanidec) !== -1) {\n      digits += hanidecChars.indexOf(str[i]);\n    } else {\n      for (const key in numberingSystemsUTF16) {\n        const [min, max] = numberingSystemsUTF16[key as NumberingSystem];\n        if (code >= min && code <= max) {\n          digits += code - min;\n          break;\n        }\n      }\n    }\n  }\n  return parseInt(digits, 10);\n}\n\nexport function digitRegex(locale: Locale, append = \"\") {\n  return new RegExp(`${numberingSystems[locale.numberingSystem || \"latn\"]}${append}`);\n}\n","import { parseMillis, isUndefined, untruncateYear, signedOffset } from \"./util\";\nimport { Formatter, FormatToken } from \"./formatter\";\nimport { FixedOffsetZone } from \"../zones/fixedOffsetZone\";\nimport { IANAZone } from \"../zones/IANAZone\";\nimport { digitRegex, parseDigits } from \"./digits\";\nimport { Locale } from \"./locale\";\nimport { GenericDateTime, ExplainedFormat } from \"../types/datetime\";\nimport { Zone } from \"../zone\";\nimport { DateTime } from \"../datetime\";\nimport { ConflictingSpecificationError } from \"../errors\";\n\nconst MISSING_FTP = \"missing Intl.DateTimeFormat.formatToParts support\";\n\ninterface UnitParser {\n  regex: RegExp;\n  deser: (_: string[]) => number | string;\n  groups?: number;\n  literal?: boolean; // TODO investigate if this shall not be merged with token.literal\n  token: FormatToken;\n}\n\ninterface InvalidUnitParser {\n  invalidReason: string;\n}\n\ntype CoreUnitParser = Omit<UnitParser, \"token\">;\n\nfunction intUnit(regex: RegExp, post: (_: number) => number = i => i): CoreUnitParser {\n  return { regex, deser: ([s]) => post(parseDigits(s)) };\n}\n\nconst NBSP = String.fromCharCode(160);\nconst spaceOrNBSP = `( |${NBSP})`;\nconst spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, \"g\");\n\nfunction fixListRegex(s: string) {\n  // make dots optional and also make them literal\n  // make space and non breakable space characters interchangeable\n  return s.replace(/\\./g, \"\\\\.?\").replace(spaceOrNBSPRegExp, spaceOrNBSP);\n}\n\nfunction stripInsensitivities(s: string) {\n  return s\n  .replace(/\\./g, \"\") // ignore dots that were made optional\n  .replace(spaceOrNBSPRegExp, \" \") // interchange space and nbsp\n  .toLowerCase();\n}\n\nfunction oneOf(strings: string[], startIndex: number): CoreUnitParser {\n  return {\n    regex: RegExp(strings.map(fixListRegex).join(\"|\")),\n    deser: ([s]) =>\n      strings.findIndex(i => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex\n  };\n}\n\nfunction offset(regex: RegExp, groups: number): CoreUnitParser {\n  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };\n}\n\nfunction simple(regex: RegExp): CoreUnitParser {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction escapeToken(value: string) {\n  // eslint-disable-next-line no-useless-escape\n  return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\nfunction unitForToken(token: FormatToken, loc: Locale) {\n  const one = digitRegex(loc),\n    two = digitRegex(loc, \"{2}\"),\n    three = digitRegex(loc, \"{3}\"),\n    four = digitRegex(loc, \"{4}\"),\n    six = digitRegex(loc, \"{6}\"),\n    oneOrTwo = digitRegex(loc, \"{1,2}\"),\n    oneToThree = digitRegex(loc, \"{1,3}\"),\n    oneToSix = digitRegex(loc, \"{1,6}\"),\n    oneToNine = digitRegex(loc, \"{1,9}\"),\n    twoToFour = digitRegex(loc, \"{2,4}\"),\n    fourToSix = digitRegex(loc, \"{4,6}\"),\n    literal = (t: FormatToken): CoreUnitParser => ({\n      regex: RegExp(escapeToken(t.val)),\n      deser: ([s]) => s,\n      literal: true\n    }),\n    unitate = (t: FormatToken) => {\n      if (token.literal) {\n        return literal(t);\n      }\n      switch (t.val) {\n        // era\n        case \"G\":\n          return oneOf(loc.eras(\"short\", false), 0);\n        case \"GG\":\n          return oneOf(loc.eras(\"long\", false), 0);\n        // years\n        case \"y\":\n          return intUnit(oneToSix);\n        case \"yy\":\n          return intUnit(twoToFour, untruncateYear);\n        case \"yyyy\":\n          return intUnit(four);\n        case \"yyyyy\":\n          return intUnit(fourToSix);\n        case \"yyyyyy\":\n          return intUnit(six);\n        // months\n        case \"M\":\n          return intUnit(oneOrTwo);\n        case \"MM\":\n          return intUnit(two);\n        case \"MMM\":\n          return oneOf(loc.months(\"short\", true, false), 1);\n        case \"MMMM\":\n          return oneOf(loc.months(\"long\", true, false), 1);\n        case \"L\":\n          return intUnit(oneOrTwo);\n        case \"LL\":\n          return intUnit(two);\n        case \"LLL\":\n          return oneOf(loc.months(\"short\", false, false), 1);\n        case \"LLLL\":\n          return oneOf(loc.months(\"long\", false, false), 1);\n        // dates\n        case \"d\":\n          return intUnit(oneOrTwo);\n        case \"dd\":\n          return intUnit(two);\n        // ordinals\n        case \"o\":\n          return intUnit(oneToThree);\n        case \"ooo\":\n          return intUnit(three);\n        // time\n        case \"HH\":\n          return intUnit(two);\n        case \"H\":\n          return intUnit(oneOrTwo);\n        case \"hh\":\n          return intUnit(two);\n        case \"h\":\n          return intUnit(oneOrTwo);\n        case \"mm\":\n          return intUnit(two);\n        case \"m\":\n          return intUnit(oneOrTwo);\n        case \"q\":\n          return intUnit(oneOrTwo);\n        case \"qq\":\n          return intUnit(two);\n        case \"s\":\n          return intUnit(oneOrTwo);\n        case \"ss\":\n          return intUnit(two);\n        case \"S\":\n          return intUnit(oneToThree);\n        case \"SSS\":\n          return intUnit(three);\n        case \"u\":\n          return simple(oneToNine);\n        // meridiem\n        case \"a\":\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case \"kkkk\":\n          return intUnit(four);\n        case \"kk\":\n          return intUnit(twoToFour, untruncateYear);\n        // weekNumber (W)\n        case \"W\":\n          return intUnit(oneOrTwo);\n        case \"WW\":\n          return intUnit(two);\n        // weekdays\n        case \"E\":\n        case \"c\":\n          return intUnit(one);\n        case \"EEE\":\n          return oneOf(loc.weekdays(\"short\", false, false), 1);\n        case \"EEEE\":\n          return oneOf(loc.weekdays(\"long\", false, false), 1);\n        case \"ccc\":\n          return oneOf(loc.weekdays(\"short\", true, false), 1);\n        case \"cccc\":\n          return oneOf(loc.weekdays(\"long\", true, false), 1);\n        // offset/zone\n        case \"Z\":\n        case \"ZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);\n        case \"ZZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case \"z\":\n          return simple(/[a-z_+-/]{1,256}?/i);\n        default:\n          return literal(t);\n      }\n    };\n\n  const unit = unitate(token);\n\n  if (unit === null) {\n    return {\n      invalidReason: MISSING_FTP\n    };\n  }\n\n  return { ...unit, token };\n}\n\nconst partTypeStyleToTokenVal: Record<Intl.DateTimeFormatPartTypes,\n  Record<string, string> | undefined> = {\n  literal: undefined, // Never used\n  dayPeriod: undefined, // Never used\n  era: undefined, // TODO investigate\n  timeZoneName: undefined, // TODO investigate\n  year: {\n    \"2-digit\": \"yy\",\n    numeric: \"yyyyy\"\n  },\n  month: {\n    numeric: \"M\",\n    \"2-digit\": \"MM\",\n    short: \"MMM\",\n    long: \"MMMM\"\n  },\n  day: {\n    numeric: \"d\",\n    \"2-digit\": \"dd\"\n  },\n  weekday: {\n    short: \"EEE\",\n    long: \"EEEE\"\n  },\n  hour: {\n    numeric: \"h\",\n    \"2-digit\": \"hh\"\n  },\n  minute: {\n    numeric: \"m\",\n    \"2-digit\": \"mm\"\n  },\n  second: {\n    numeric: \"s\",\n    \"2-digit\": \"ss\"\n  }\n};\n\nfunction tokenForPart(part: Intl.DateTimeFormatPart, formatOptions: Intl.DateTimeFormatOptions) {\n  const { type, value } = part;\n\n  if (type === \"literal\") {\n    return {\n      literal: true,\n      val: value\n    };\n  }\n\n  if (type === \"dayPeriod\") {\n    return {\n      literal: false,\n      val: \"a\"\n    };\n  }\n\n  const tokenVals = partTypeStyleToTokenVal[type];\n  if (tokenVals !== undefined) {\n    const style = formatOptions[type];\n    if (style) {\n      const val = tokenVals[style];\n      if (val !== undefined) {\n        return {\n          literal: false,\n          val\n        };\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction buildRegex(units: UnitParser[]) {\n  const re = units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, \"\");\n  return `^${re}$`;\n}\n\nfunction match(\n  input: string,\n  regex: RegExp,\n  handlers: UnitParser[]\n): [RegExpMatchArray | null, Record<string, number | string>] {\n  const matches = regex.exec(input);\n  const all: Record<string, number | string> = {};\n\n  if (matches !== null) {\n    let matchIndex = 1;\n    handlers.forEach(h => {\n      const groups = h.groups ? h.groups + 1 : 1;\n      if (!h.literal) {\n        all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n      }\n      matchIndex += groups;\n    });\n  }\n\n  return [matches, all];\n}\n\nfunction dateTimeFromMatches(\n  matches: Record<string, string | number>\n): [GenericDateTime, Zone | null] {\n  const toField = (token: string) => {\n    switch (token) {\n      case \"S\":\n        return \"millisecond\";\n      case \"s\":\n        return \"second\";\n      case \"m\":\n        return \"minute\";\n      case \"h\":\n      case \"H\":\n        return \"hour\";\n      case \"d\":\n        return \"day\";\n      case \"o\":\n        return \"ordinal\";\n      case \"L\":\n      case \"M\":\n        return \"month\";\n      case \"y\":\n        return \"year\";\n      case \"E\":\n      case \"c\":\n        return \"weekday\";\n      case \"W\":\n        return \"weekNumber\";\n      case \"k\":\n        return \"weekYear\";\n      default:\n        return null;\n    }\n  };\n\n  let zone;\n  if (!isUndefined(matches.Z)) {\n    zone = new FixedOffsetZone(matches.Z as number);\n  }\n  else if (!isUndefined(matches.z)) {\n    zone = IANAZone.create(matches.z as string);\n  }\n  else {\n    zone = null;\n  }\n\n  if (!isUndefined(matches.q)) {\n    matches.M = ((matches.q as number) - 1) * 3 + 1;\n  }\n\n  if (!isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h = (matches.h as number) + 12;\n    }\n    else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  if (!isUndefined(matches.u)) {\n    matches.S = parseMillis(matches.u as string) || 0;\n  }\n\n  const vals = Object.keys(matches).reduce<GenericDateTime>((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k] as number;\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone];\n}\n\nlet dummyDateTimeCache: DateTime | undefined;\n\nfunction getDummyDateTime() {\n  if (dummyDateTimeCache === undefined) {\n    dummyDateTimeCache = DateTime.fromMillis(1555555555555);\n  }\n\n  return dummyDateTimeCache;\n}\n\nfunction maybeExpandMacroToken(token: FormatToken, locale: Locale) {\n  if (token.literal) {\n    return token;\n  }\n\n  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);\n\n  if (!formatOpts) {\n    return token;\n  }\n\n  const formatter = Formatter.create(locale, formatOpts);\n  const parts = formatter.formatDateTimeParts(getDummyDateTime());\n\n  const tokens = parts.map(p => tokenForPart(p, formatOpts));\n\n  if (tokens.indexOf(undefined) >= 0) {\n    return token;\n  }\n\n  return tokens;\n}\n\nfunction expandMacroTokens(tokens: FormatToken[], locale: Locale) {\n  return Array.prototype.concat(...tokens.map(t => maybeExpandMacroToken(t, locale)));\n}\n\nfunction isInvalidUnitParser(parser: unknown): parser is InvalidUnitParser {\n  return !!parser && !!(parser as { invalidReason: string | undefined }).invalidReason;\n}\n\n/**\n * @private\n */\nexport function explainFromTokens(locale: Locale, input: string, format: string): ExplainedFormat {\n  const tokens = expandMacroTokens(Formatter.parseFormat(format), locale),\n    units = tokens.map(t => unitForToken(t, locale)),\n    disqualifyingUnit = units.find(isInvalidUnitParser);\n\n  if (disqualifyingUnit) {\n    return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };\n  }\n  else {\n    const regexString = buildRegex(units as UnitParser[]),\n      regex = RegExp(regexString, \"i\"),\n      [rawMatches, matches] = match(input, regex, units as UnitParser[]),\n      [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];\n    if (\"a\" in matches && \"H\" in matches) {\n      throw new ConflictingSpecificationError(\n        \"Can't include meridiem when specifying 24-hour format\"\n      );\n    }\n    return { input, tokens, regex, rawMatches, matches, result, zone };\n  }\n}\n\nexport function parseFromTokens(\n  locale: Locale,\n  input: string,\n  format: string\n): [GenericDateTime | null | undefined, Zone | null | undefined, string | undefined] {\n  const { result, zone, invalidReason } = explainFromTokens(locale, input, format);\n  return [result, zone, invalidReason];\n}\n","import {\n  integerBetween,\n  isLeapYear,\n  timeObject,\n  daysInYear,\n  daysInMonth,\n  weeksInWeekYear,\n  isInteger\n} from \"./util\";\nimport { TimeObject, WeekDateTime, GregorianDateTime, OrdinalDateTime } from \"../types/datetime\";\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction dayOfWeek(year: number, month: number, day: number) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction computeOrdinal(year: number, month: number, day: number) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year: number, ordinal: number) {\n  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex(i => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nexport function gregorianToWeek(gregObj: GregorianDateTime): WeekDateTime {\n  const { year, month, day } = gregObj,\n    ordinal = computeOrdinal(year, month, day),\n    weekday = dayOfWeek(year, month, day);\n\n  let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n    weekYear;\n\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear);\n  } else if (weekNumber > weeksInWeekYear(year)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n\n  return Object.assign({ weekYear, weekNumber, weekday }, timeObject(gregObj));\n}\n\nexport function weekToGregorian(weekData: WeekDateTime) {\n  const { weekYear, weekNumber, weekday } = weekData,\n    weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n    yearInDays = daysInYear(weekYear);\n\n  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n    year;\n\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n\n  return Object.assign({ year, month, day }, timeObject(weekData));\n}\n\nexport function gregorianToOrdinal(gregData: GregorianDateTime): OrdinalDateTime {\n  const { year, month, day } = gregData,\n    ordinal = computeOrdinal(year, month, day);\n\n  return Object.assign({ year, ordinal }, timeObject(gregData));\n}\n\nexport function ordinalToGregorian(ordinalData: OrdinalDateTime) {\n  const { year, ordinal } = ordinalData,\n    { month, day } = uncomputeOrdinal(year, ordinal);\n\n  return Object.assign({ year, month, day }, timeObject(ordinalData));\n}\n\nexport type UnitError = [string, number] | null;\n\nexport function hasInvalidWeekData(obj: WeekDateTime): UnitError {\n  const validYear = isInteger(obj.weekYear),\n    validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),\n    validWeekday = integerBetween(obj.weekday, 1, 7);\n\n  if (!validYear) {\n    return [\"weekYear\", obj.weekYear];\n  } else if (!validWeek) {\n    return [\"weekNumber\", obj.weekNumber];\n  } else if (!validWeekday) {\n    return [\"weekday\", obj.weekday];\n  } else return null;\n}\n\nexport function hasInvalidOrdinalData(obj: OrdinalDateTime): UnitError {\n  const validYear = isInteger(obj.year),\n    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\n\n  if (!validYear) {\n    return [\"year\", obj.year];\n  } else if (!validOrdinal) {\n    return [\"ordinal\", obj.ordinal];\n  } else return null;\n}\n\nexport function hasInvalidGregorianData(obj: GregorianDateTime): UnitError {\n  const validYear = isInteger(obj.year),\n    validMonth = integerBetween(obj.month, 1, 12),\n    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n\n  if (!validYear) {\n    return [\"year\", obj.year];\n  } else if (!validMonth) {\n    return [\"month\", obj.month];\n  } else if (!validDay) {\n    return [\"day\", obj.day];\n  } else return null;\n}\n\nexport function hasInvalidTimeData(obj: TimeObject): UnitError {\n  const { hour, minute, second, millisecond } = obj;\n  const validHour =\n      integerBetween(hour, 0, 23) ||\n      (hour === 24 && minute === 0 && second === 0 && millisecond === 0),\n    validMinute = integerBetween(minute, 0, 59),\n    validSecond = integerBetween(second, 0, 59),\n    validMillisecond = integerBetween(millisecond, 0, 999);\n\n  if (!validHour) {\n    return [\"hour\", obj.hour];\n  } else if (!validMinute) {\n    return [\"minute\", obj.minute];\n  } else if (!validSecond) {\n    return [\"second\", obj.second];\n  } else if (!validMillisecond) {\n    return [\"millisecond\", obj.millisecond];\n  } else return null;\n}\n","import { Duration, friendlyDuration, DurationLike } from \"./duration\";\nimport { Interval } from \"./interval\";\nimport { Settings } from \"./settings\";\nimport { Info } from \"./info\";\nimport { Formatter } from \"./impl/formatter\";\nimport { FixedOffsetZone } from \"./zones/fixedOffsetZone\";\nimport { Locale } from \"./impl/locale\";\nimport {\n  isUndefined,\n  maybeArray,\n  isDate,\n  isNumber,\n  bestBy,\n  daysInMonth,\n  daysInYear,\n  isLeapYear,\n  weeksInWeekYear,\n  normalizeObject,\n  roundTo,\n  objToLocalTS\n} from \"./impl/util\";\nimport { normalizeZone } from \"./impl/zoneUtil\";\nimport { diff } from \"./impl/diff\";\nimport { parseRFC2822Date, parseISODate, parseHTTPDate, parseSQL } from \"./impl/regexParser\";\nimport { parseFromTokens, explainFromTokens } from \"./impl/tokenParser\";\nimport {\n  gregorianToWeek,\n  weekToGregorian,\n  gregorianToOrdinal,\n  ordinalToGregorian,\n  hasInvalidGregorianData,\n  hasInvalidWeekData,\n  hasInvalidOrdinalData,\n  hasInvalidTimeData,\n  UnitError\n} from \"./impl/conversions\";\nimport * as Formats from \"./impl/formats\";\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  UnitOutOfRangeError,\n  MismatchedWeekdayError,\n  UnparsableStringError,\n  InvalidZoneError\n} from \"./errors\";\nimport { SystemZone } from \"./zones/systemZone\";\nimport { Zone } from \"./zone\";\nimport {\n  DateTimeOptions,\n  ToISOTimeOptions,\n  ToISOFormat,\n  ToSQLOptions,\n  ToRelativeOptions,\n  ToRelativeCalendarOptions,\n  SetZoneOptions,\n  GregorianDateTime,\n  WeekDateTime,\n  OrdinalDateTime,\n  GenericDateTime,\n  TimeObject,\n  DateTimeWithZoneOptions\n} from \"./types/datetime\";\nimport { DurationUnit, DurationOptions } from \"./types/duration\";\nimport { LocaleOptions, NumberingSystem, CalendarSystem } from \"./types/locale\";\nimport { ThrowOnInvalid } from \"./types/common\";\nimport { ZoneLike } from \"./types/zone\";\n\nconst MAX_DATE = 8.64e15;\n\n// find the right offset at a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS: number, o: number, tz: Zone): [number, number] {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts: number, offset: number): GregorianDateTime {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n}\n\n// convert a calendar object to an epoch timestamp\nfunction objToTS(obj: GregorianDateTime, offset: number, zone: Zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(\n  parsed: GenericDateTime | null,\n  parsedZone: Zone | null,\n  options: DateTimeWithZoneOptions,\n  format: string,\n  text: string\n) {\n  const { setZone, zone } = options;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      opts = Object.assign({}, options, {\n        zone: interpretationZone,\n        setZone: undefined\n      }),\n      inst = DateTime.fromObject(parsed, opts);\n    if (inst !== null) {\n      return setZone ? inst : inst.setZone(zone);\n    }\n  }\n  if (options.nullOnInvalid) {\n    return null;\n  }\n  throw new UnparsableStringError(format, text);\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt: DateTime, format: string, allowZ = true) {\n  return Formatter.create(Locale.create(\"en-US\"), {\n    allowZ,\n    forceSimple: true\n  }).formatDateTimeFromString(dt, format);\n}\n\n// technical time formats (e.g. the time part of ISO 8601), take some options\n// and this commonizes their handling\nfunction toTechTimeFormat(\n  dt: DateTime,\n  {\n    includeOffset,\n    suppressSeconds = false,\n    suppressMilliseconds = false,\n    includeZone = false,\n    spaceZone = false,\n    format = \"extended\"\n  }: {\n    includeOffset: boolean;\n    suppressSeconds?: boolean;\n    suppressMilliseconds?: boolean;\n    includeZone?: boolean;\n    spaceZone?: boolean;\n    format?: ToISOFormat;\n  }\n) {\n  let fmt = format === \"basic\" ? \"HHmm\" : \"HH:mm\";\n\n  if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {\n    fmt += format === \"basic\" ? \"ss\" : \":ss\";\n    if (!suppressMilliseconds || dt.millisecond !== 0) {\n      fmt += \".SSS\";\n    }\n  }\n\n  if ((includeZone || includeOffset) && spaceZone) {\n    fmt += \" \";\n  }\n\n  if (includeZone) {\n    fmt += \"z\";\n  }\n  else if (includeOffset) {\n    fmt += format === \"basic\" ? \"ZZZ\" : \"ZZ\";\n  }\n\n  return toTechFormat(dt, fmt);\n}\n\n// defaults for unspecified units in the supported calendars\nconst defaultUnitValues = {\n    year: 0, // unused value\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  };\n\n// Units in the supported calendars, sorted by bigness\nconst orderedUnits: Array<keyof GregorianDateTime> = [\n    \"year\",\n    \"month\",\n    \"day\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"millisecond\"\n  ],\n  orderedWeekUnits: Array<keyof WeekDateTime> = [\n    \"weekYear\",\n    \"weekNumber\",\n    \"weekday\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"millisecond\"\n  ],\n  orderedOrdinalUnits: Array<keyof OrdinalDateTime> = [\n    \"year\",\n    \"ordinal\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"millisecond\"\n  ];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit: string) {\n  const pluralMapping: Record<string, keyof GenericDateTime> = {\n    year: \"year\",\n    years: \"year\",\n    month: \"month\",\n    months: \"month\",\n    day: \"day\",\n    days: \"day\",\n    hour: \"hour\",\n    hours: \"hour\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    second: \"second\",\n    seconds: \"second\",\n    millisecond: \"millisecond\",\n    milliseconds: \"millisecond\",\n    weekday: \"weekday\",\n    weekdays: \"weekday\",\n    weeknumber: \"weekNumber\",\n    weeksnumber: \"weekNumber\",\n    weeknumbers: \"weekNumber\",\n    weekyear: \"weekYear\",\n    weekyears: \"weekYear\",\n    ordinal: \"ordinal\"\n  };\n  const normalized = pluralMapping[unit.toLowerCase()];\n\n  if (!normalized) {\n    throw new InvalidUnitError(unit);\n  }\n\n  return normalized;\n}\n\nfunction lastOpts(argList: unknown[]): [DateTimeOptions, number[]] {\n  if (argList.length > 0 && typeof argList[argList.length - 1] === \"object\") {\n    const options = argList[argList.length - 1] as {};\n    const args = Array.from(argList).slice(0, argList.length - 1);\n    return [options, args as number[]];\n  }\n  else {\n    return [{}, Array.from(argList) as number[]];\n  }\n}\n\ntype DiffRelativeOptions = ToRelativeOptions & {\n  numeric: Intl.RelativeTimeFormatNumeric;\n  units: Intl.RelativeTimeFormatUnit[];\n  calendary: boolean;\n};\n\ninterface DateTimeConfig {\n  ts: number;\n  zone: Zone;\n  loc: Locale;\n}\n\ninterface Config extends DateTimeConfig {\n  old?: {\n    ts: number;\n    zone: Zone;\n    o: number;\n    c: GregorianDateTime;\n  };\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the system's time zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},\n * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.\n * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime#plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toSystemZone}.\n * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport class DateTime {\n  // Private readonly fields\n  private readonly ts: number;\n  private _zone: Readonly<Zone>;\n  private loc: Locale;\n  private weekData: WeekDateTime | undefined;\n  private c: Readonly<GregorianDateTime>;\n  private readonly o: number;\n  private readonly isLuxonDateTime: true;\n\n  /**\n   * @access private\n   */\n  private constructor(config: Config) {\n    // can happen when using plus or minus with 1E8 days resulting in overflows\n    if (Number.isNaN(config.ts)) {\n      throw new InvalidArgumentError(\"invalid timestamp\");\n    }\n\n    const zone = config.zone || Settings.defaultZone;\n    if (!zone.isValid) {\n      throw new InvalidZoneError(zone.name);\n    }\n\n    /**\n     * @access private\n     */\n    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;\n\n    let o, c;\n    if (config.old !== undefined && config.old.ts === this.ts && config.old.zone.equals(zone)) {\n      o = config.old.o;\n      c = config.old.c;\n    }\n    else {\n      o = zone.offset(this.ts);\n      c = tsToObj(this.ts, o);\n    }\n    if (Number.isNaN(c.year)) {\n      throw new InvalidArgumentError(\"invalid timestamp\");\n    }\n\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n    /**\n     * @access private\n     */\n    this._zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.weekData = undefined;\n    /**\n     * @access private\n     */\n    this.isLuxonDateTime = true;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a DateTime for the current instant, in the system's time zone.\n   *\n   * Use Settings to override these default values if needed.\n   * @example DateTime.now().toISO() //~> now in the ISO format\n   * @return {DateTime}\n   */\n  static now() {\n    return DateTime.local();\n  }\n\n  static local(...args: number[]): DateTime;\n  static local(...args: (number | (DateTimeOptions & ThrowOnInvalid))[]): DateTime;\n  static local(...args: (number | DateTimeOptions)[]): DateTime | null;\n  /**\n   * Create a local DateTime\n   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month, 1-indexed\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\n   * @example DateTime.local()                                  //~> now\n   * @example DateTime.local({ zone: \"America/New_York\" })      //~> now, in US east coast time\n   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12, { locale: \"fr\")       //~> 2017-03-12T00:00:00, with a French locale\n   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, { zone: \"utc\" })   //~> 2017-03-12T05:00:00, in UTC\n   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765\n   * @return {DateTime}\n   */\n  static local(...args: (number | DateTimeOptions)[]) {\n    const [options, values] = lastOpts(args),\n      [year, month, day, hour, minute, second, millisecond] = values;\n    return DateTime.quickDT({ year, month, day, hour, minute, second, millisecond }, options);\n  }\n\n  static utc(...args: number[]): DateTime;\n  static utc(...args: (number | (DateTimeOptions & ThrowOnInvalid))[]): DateTime;\n  static utc(...args: (number | DateTimeOptions)[]): DateTime | null;\n  /**\n   * Create a DateTime in UTC\n   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\n   * @example DateTime.utc()                                            //~> now\n   * @example DateTime.utc(2017)                                        //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                                     //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                                 //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)                              //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)                          //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: \"fr\" } )       //~> 2017-03-12T05:45:00Z with a French locale\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                      //~> 2017-03-12T05:45:10Z\n   * @return {DateTime}\n   */\n  static utc(...args: (number | DateTimeOptions)[]) {\n    const [options, values] = lastOpts(args),\n      [year, month, day, hour, minute, second, millisecond] = values;\n\n    options.zone = FixedOffsetZone.utcInstance;\n    return DateTime.quickDT({ year, month, day, hour, minute, second, millisecond }, options);\n  }\n\n  static fromJSDate(date: Date): DateTime;\n  static fromJSDate(date: Date, options: DateTimeOptions & ThrowOnInvalid): DateTime;\n  static fromJSDate(date: Date, options: DateTimeOptions): DateTime | null;\n  /**\n   * Create a DateTime from a Javascript Date object. Uses the default zone.\n   * @param {Date} date - a Javascript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='default'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {bool} [options.nullOnInvalid=false] - return null on invalid values instead of throwing an error\n   * @return {DateTime}\n   */\n  static fromJSDate(date: Date, options: DateTimeOptions = {}) {\n    if (!isDate(date) || Number.isNaN(date.valueOf())) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new InvalidArgumentError(\"date argument must be a valid Date\");\n    }\n\n    return new DateTime({\n      ts: date.valueOf(),\n      zone: normalizeZone(options.zone, Settings.defaultZone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  static fromMillis(milliseconds: number): DateTime;\n  static fromMillis(milliseconds: number, options: DateTimeOptions & ThrowOnInvalid): DateTime;\n  static fromMillis(milliseconds: number, options: DateTimeOptions): DateTime | null;\n  /**\n   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='default'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {bool} [options.nullOnInvalid=false] - return null on invalid values instead of throwing an error\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds: number, options: DateTimeOptions = {}) {\n    if (!isNumber(milliseconds)) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new InvalidArgumentError(\n        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`\n      );\n    }\n    if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {\n      // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new InvalidArgumentError(\"Timestamp out of range\");\n    }\n\n    return new DateTime({\n      ts: milliseconds,\n      zone: normalizeZone(options.zone, Settings.defaultZone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  static fromSeconds(seconds: number): DateTime;\n  static fromSeconds(seconds: number, options: DateTimeOptions & ThrowOnInvalid): DateTime;\n  static fromSeconds(seconds: number, options: DateTimeOptions): DateTime | null;\n  /**\n   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} seconds - a number of seconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='default'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {bool} [options.nullOnInvalid=false] - return null on invalid values instead of throwing an error\n   * @return {DateTime}\n   */\n  static fromSeconds(seconds: number, options: DateTimeOptions = {}) {\n    if (!isNumber(seconds)) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\n    }\n\n    return new DateTime({\n      ts: seconds * 1000,\n      zone: normalizeZone(options.zone, Settings.defaultZone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  static fromObject(object?: GenericDateTime): DateTime;\n  static fromObject(object: GenericDateTime, options: DateTimeOptions & ThrowOnInvalid): DateTime;\n  static fromObject(object: GenericDateTime, options: DateTimeOptions): DateTime | null;\n  /**\n   * Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} object - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='default'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [options.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {bool} [options.nullOnInvalid=false] - return null on invalid values instead of throwing an error\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, }, {zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'default' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  static fromObject(object?: GenericDateTime, options: DateTimeOptions = {}) {\n    object = object || {};\n    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);\n\n    const tsNow = Settings.now();\n    let normalized, offsetProvis;\n    try {\n      normalized = normalizeObject(object, normalizeUnit);\n      offsetProvis = zoneToUse.offset(tsNow);\n    } catch (error) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw error;\n    }\n\n    const containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(options);\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    const gregorianNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      const objNow = gregorianToWeek(gregorianNow);\n      DateTime.normalizeWithDefaults(objNow, normalized, orderedWeekUnits, defaultWeekUnitValues);\n    }\n    else if (containsOrdinal) {\n      const objNow = gregorianToOrdinal(gregorianNow);\n      DateTime.normalizeWithDefaults(\n        objNow,\n        normalized,\n        orderedOrdinalUnits,\n        defaultOrdinalUnitValues\n      );\n    }\n    else {\n      DateTime.normalizeWithDefaults(gregorianNow, normalized, orderedUnits, defaultUnitValues);\n    }\n\n    // make sure the values we have are in range\n    let error: UnitError;\n    if (useWeekData) {\n      error = hasInvalidWeekData(normalized as WeekDateTime);\n    }\n    else if (containsOrdinal) {\n      error = hasInvalidOrdinalData(normalized as OrdinalDateTime);\n    }\n    else {\n      error = hasInvalidGregorianData(normalized as GregorianDateTime);\n    }\n    error = error || hasInvalidTimeData(normalized as TimeObject);\n\n    if (error) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new UnitOutOfRangeError(error[0], error[1]);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n      ? weekToGregorian(normalized as WeekDateTime)\n      : containsOrdinal\n        ? ordinalToGregorian(normalized as OrdinalDateTime)\n        : (normalized as GregorianDateTime),\n      ts = objToTS(gregorian, offsetProvis, zoneToUse)[0],\n      inst = new DateTime({\n        ts,\n        zone: zoneToUse,\n        loc\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && object.weekday !== inst.weekday) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new MismatchedWeekdayError(normalized.weekday, inst.toISO());\n    }\n\n    return inst;\n  }\n\n  static fromISO(text: string): DateTime;\n  static fromISO(text: string, options: DateTimeWithZoneOptions & ThrowOnInvalid): DateTime;\n  static fromISO(text: string, options: DateTimeWithZoneOptions): DateTime | null;\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} options - options to affect the creation\n   * @param {string|Zone} [options.zone='default'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [options.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {bool} [options.nullOnInvalid=false] - return null on invalid strings instead of throwing an error\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text: string, options: DateTimeWithZoneOptions = {}) {\n    const [vals, parsedZone] = parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, options, \"ISO 8601\", text);\n  }\n\n  static fromRFC2822(text: string): DateTime;\n  static fromRFC2822(text: string, options: DateTimeWithZoneOptions & ThrowOnInvalid): DateTime;\n  static fromRFC2822(text: string, options: DateTimeWithZoneOptions): DateTime | null;\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} options - options to affect the creation\n   * @param {string|Zone} [options.zone='default'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [options.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text: string, options: DateTimeWithZoneOptions = {}) {\n    const [vals, parsedZone] = parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, options, \"RFC 2822\", text);\n  }\n\n  static fromHTTP(text: string): DateTime;\n  static fromHTTP(text: string, options: DateTimeWithZoneOptions & ThrowOnInvalid): DateTime;\n  static fromHTTP(text: string, options: DateTimeWithZoneOptions): DateTime | null;\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {Object} options - options to affect the creation\n   * @param {string|Zone} [options.zone='default'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [options.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [options.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text: string, options: DateTimeWithZoneOptions = {}) {\n    const [vals, parsedZone] = parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, options, \"HTTP\", text);\n  }\n\n  static fromFormat(text: string, format: string): DateTime;\n  static fromFormat(\n    text: string,\n    format: string,\n    options: DateTimeWithZoneOptions & ThrowOnInvalid\n  ): DateTime;\n  static fromFormat(\n    text: string,\n    format: string,\n    options: DateTimeWithZoneOptions\n  ): DateTime | null;\n  /**\n   * Create a DateTime from an input string and format string.\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens\n   * @param {string} text - the string to parse\n   * @param {string} format - the format the string is expected to be in (see the link below for the formats)\n   * @param {Object} options - options to affect the creation\n   * @param {string|Zone} [options.zone='default'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\n   * @return {DateTime}\n   */\n  static fromFormat(text: string, format: string, options: DateTimeWithZoneOptions = {}) {\n    if (isUndefined(text) || isUndefined(format)) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\n    }\n\n    const localeToUse = Locale.create(\n      options.locale,\n      options.numberingSystem,\n      options.outputCalendar,\n      true /* defaultToEN */\n      ),\n      [vals, parsedZone, invalid] = parseFromTokens(localeToUse, text, format);\n\n    if (invalid) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw new UnparsableStringError(format, text);\n    }\n    else {\n      // Not invalid, vals and parsedZone are not undefined\n      return parseDataToDateTime(\n        vals as GenericDateTime | null,\n        parsedZone as Zone | null,\n        options,\n        `format ${format}`,\n        text\n      );\n    }\n  }\n\n  static fromSQL(text: string): DateTime;\n  static fromSQL(text: string, options: DateTimeWithZoneOptions & ThrowOnInvalid): DateTime;\n  static fromSQL(text: string, options: DateTimeWithZoneOptions): DateTime | null;\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} options - options to affect the creation\n   * @param {string|Zone} [options.zone='default'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on failed parsing instead of throwing\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */\n  static fromSQL(text: string, options: DateTimeWithZoneOptions = {}) {\n    const [vals, parsedZone] = parseSQL(text);\n    return parseDataToDateTime(vals, parsedZone, options, \"SQL\", text);\n  }\n\n  /**\n   * Check if an object is a DateTime. Works across context boundaries\n   * @param {Object} o\n   * @return {boolean}\n   */\n  static isDateTime(o: unknown): o is DateTime {\n    return (o && (o as DateTime).isLuxonDateTime) || false;\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit: keyof GenericDateTime) {\n    return this[unit];\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get outputCalendar() {\n    return this.loc.outputCalendar;\n  }\n\n  /**\n   * Get the time zone associated with this DateTime.\n   * @type {Zone}\n   */\n  get zone() {\n    return this._zone;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @type {string}\n   */\n  get zoneName() {\n    return this.zone.name;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @type {number}\n   */\n  get year() {\n    return this.c.year;\n  }\n\n  /**\n   * Get the quarter\n   * @example DateTime.local(2017, 5, 25).quarter //=> 2\n   * @type {number}\n   */\n  get quarter() {\n    return Math.ceil(this.c.month / 3);\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @type {number}\n   */\n  get month() {\n    return this.c.month;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @type {number}\n   */\n  get day() {\n    return this.c.day;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @type {number}\n   */\n  get hour() {\n    return this.c.hour;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @type {number}\n   */\n  get minute() {\n    return this.c.minute;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @type {number}\n   */\n  get second() {\n    return this.c.second;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @type {number}\n   */\n  get millisecond() {\n    return this.c.millisecond;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\n   * @type {number}\n   */\n  get weekYear() {\n    return this.possiblyCachedWeekData().weekYear;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @type {number}\n   */\n  get weekNumber() {\n    return this.possiblyCachedWeekData().weekNumber;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @type {number}\n   */\n  get weekday() {\n    return this.possiblyCachedWeekData().weekday;\n  }\n\n  /**\n   * Get the ordinal (meaning the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @type {number}\n   */\n  get ordinal() {\n    return gregorianToOrdinal(this.c).ordinal;\n  }\n\n  /**\n   * Get the human readable short month name, such as 'Oct'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n   * @type {string}\n   */\n  get monthShort() {\n    return Info.months(\"short\", { locale: this.locale })[this.month - 1];\n  }\n\n  /**\n   * Get the human readable long month name, such as 'October'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\n   * @type {string}\n   */\n  get monthLong() {\n    return Info.months(\"long\", { locale: this.locale })[this.month - 1];\n  }\n\n  /**\n   * Get the human readable short weekday, such as 'Mon'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n   * @type {string}\n   */\n  get weekdayShort() {\n    return Info.weekdays(\"short\", { locale: this.locale })[this.weekday - 1];\n  }\n\n  /**\n   * Get the human readable long weekday, such as 'Monday'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n   * @type {string}\n   */\n  get weekdayLong() {\n    return Info.weekdays(\"long\", { locale: this.locale })[this.weekday - 1];\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.now().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @type {number}\n   */\n  get offset() {\n    return this.zone.offset(this.ts);\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameShort() {\n    return this.zone.offsetName(this.ts, {\n      format: \"short\",\n      locale: this.locale\n    });\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameLong() {\n    return this.zone.offsetName(this.ts, {\n      format: \"long\",\n      locale: this.locale\n    });\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @type {boolean}\n   */\n  get isOffsetFixed() {\n    return this.zone.isUniversal;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @type {boolean}\n   */\n  get isInDST() {\n    return (\n      this.offset > this.set({ month: 12 }).offset || this.offset > this.set({ month: 6 }).offset\n    );\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @type {boolean}\n   */\n  get isInLeapYear() {\n    return isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\n   * @type {number}\n   */\n  get daysInMonth() {\n    return daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @type {number}\n   */\n  get daysInYear() {\n    return daysInYear(this.year);\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime's year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2004).weeksInWeekYear //=> 53\n   * @example DateTime.local(2013).weeksInWeekYear //=> 52\n   * @type {number}\n   */\n  get weeksInWeekYear() {\n    return weeksInWeekYear(this.weekYear);\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @return {Object}\n   */\n  resolvedLocaleOptions() {\n    const { locale, numberingSystem: ns, calendar } = Formatter.create(this.loc).resolvedOptions(\n      this\n    );\n    const numberingSystem = ns as NumberingSystem;\n    const outputCalendar = calendar as CalendarSystem;\n    return { locale, numberingSystem, outputCalendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link DateTime#setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {Object} [options={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, options: SetZoneOptions = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), options);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the system's time zone. Returns a newly-constructed DateTime.\n   * The system time zone is the one set on the machine where this code gets executed.\n   *\n   * Equivalent to `setZone(\"system\")`\n   * @return {DateTime}\n   */\n  toSystemZone() {\n    return this.setZone(SystemZone.instance);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the default zone. Returns a newly-constructed DateTime.\n   * The default time zone is used when creating new DateTimes, unless otherwise specified.\n   * It defaults to the system's time zone, but can be overriden in `Settings`.\n   *\n   * Equivalent to `setZone(\"default\")`\n   * @return {DateTime}\n   */\n  toDefaultZone() {\n    return this.setZone(Settings.defaultZone);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying instant the same (as in, the same timestamp), but the new instance will report different local time and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toSystemZone} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='default'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'default', 'system' or 'utc'. You may also supply an instance of a {@link Zone} class.\n   * @param {Object} options - options\n   * @param {boolean} [options.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone: ZoneLike, { keepLocalTime = false }: SetZoneOptions = {}) {\n    zone = normalizeZone(zone, Settings.defaultZone);\n    if (zone.equals(this.zone)) {\n      return this;\n    }\n    else if (!zone.isValid) {\n      throw new InvalidZoneError(zone.name);\n    }\n    else {\n      let newTS = this.ts;\n      if (keepLocalTime) {\n        const offsetGuess = zone.offset(this.ts);\n        const asObj = this.toObject();\n        newTS = objToTS(asObj, offsetGuess, zone)[0];\n      }\n      return this.clone({ ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {Object} [options] - the options to set\n   * @param {string} [options.locale] - ;\n   * @param {CalendarSystem} [options.outputCalendar] - ;\n   * @param {NumberingSystem} [options.numberingSystem] - ;\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  reconfigure(options: LocaleOptions) {\n    const loc = this.loc.clone(options);\n    return this.clone({ loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  setLocale(locale: string) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for \"setting\" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */\n  set(values: GenericDateTime) {\n    const normalized = normalizeObject(values, normalizeUnit),\n      settingWeekStuff =\n        !isUndefined(normalized.weekYear) ||\n        !isUndefined(normalized.weekNumber) ||\n        !isUndefined(normalized.weekday);\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));\n    }\n    else if (!isUndefined(normalized.ordinal)) {\n      mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));\n    }\n    else {\n      mixed = Object.assign(this.toObject(), normalized);\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (isUndefined(normalized.day)) {\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return this.clone({ ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|Object} duration - The amount to add. Either a Luxon Duration or the object argument to Duration.fromObject()\n   * @example DateTime.now().plus(123) //~> in 123 milliseconds\n   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min\n   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration: DurationLike) {\n    const dur = friendlyDuration(duration);\n    return this.clone(this.adjustTime(dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link DateTime#plus}\n   * @param {Duration|Object} duration - The amount to subtract. Either a Luxon Duration or the object argument to Duration.fromObject()\n   @return {DateTime}\n   */\n  minus(duration: DurationLike) {\n    const dur = friendlyDuration(duration).negate();\n    return this.clone(this.adjustTime(dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('week').toISOTime(); //=> '2014-03-03', weeks always start on a Monday\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit: DurationUnit) {\n    const o: GenericDateTime = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case \"years\":\n        o.month = 1;\n      // falls through\n      case \"quarters\":\n      case \"months\":\n        o.day = 1;\n      // falls through\n      case \"weeks\":\n      case \"days\":\n        o.hour = 0;\n      // falls through\n      case \"hours\":\n        o.minute = 0;\n      // falls through\n      case \"minutes\":\n        o.second = 0;\n      // falls through\n      case \"seconds\":\n        o.millisecond = 0;\n        break;\n      case \"milliseconds\":\n        break;\n      // no default, invalid units throw in normalizeUnit()\n    }\n\n    if (normalizedUnit === \"weeks\") {\n      o.weekday = 1;\n    }\n\n    if (normalizedUnit === \"quarters\") {\n      const q = Math.ceil(this.month / 3);\n      o.month = (q - 1) * 3 + 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (meaning the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit: DurationUnit) {\n    return this.plus({ [unit]: 1 })\n    .startOf(unit)\n    .minus({ milliseconds: 1 });\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens\n   * @param {string} format - the format string\n   * @param {Object} options - overriden configuration options\n   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(format: string, options: LocaleOptions = {}) {\n    return Formatter.create(this.loc.redefaultToEN(options)).formatDateTimeFromString(this, format);\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation\n   * of the DateTime in the assigned locale.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param options {Object} - Intl.DateTimeFormat constructor options and configuration options\n   * @example DateTime.now().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'\n   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'\n   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hour12: false }); //=> '21:32'\n   * @return {string}\n   */\n  toLocaleString(options: Intl.DateTimeFormatOptions = Formats.DATE_SHORT) {\n    return Formatter.create(this.loc, options).formatDateTime(this);\n  }\n\n  /**\n   * Returns an array of format \"parts\", meaning individual tokens along with metadata. This allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param options {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.now().toLocaleParts(); //=> [\n   *                                   //=>   { type: 'day', value: '25' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'month', value: '05' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'year', value: '1982' }\n   *                                   //=> ]\n   */\n  toLocaleParts(options: Intl.DateTimeFormatOptions = {}) {\n    return Formatter.create(this.loc, options).formatDateTimeParts(this);\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {Object} options - options\n   * @param {boolean} [options.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [options.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [options.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {string} [options.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'\n   * @return {string}\n   */\n  toISO(options: ToISOTimeOptions = {}) {\n    return `${this.toISODate({ format: options.format })}T${this.toISOTime(options)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @param {Object} options - options\n   * @param {string} [options.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\n   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'\n   * @return {string}\n   */\n  toISODate(options: { format?: ToISOFormat } = { format: \"extended\" }) {\n    let fmt = options.format === \"basic\" ? \"yyyyMMdd\" : \"yyyy-MM-dd\";\n    if (this.year > 9999) {\n      fmt = \"+\" + fmt;\n    }\n\n    return toTechFormat(this, fmt);\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-[W]WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {Object} options - options\n   * @param {boolean} [options.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [options.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [options.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {string} [options.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'\n   * @return {string}\n   */\n  toISOTime({\n              suppressMilliseconds = false,\n              suppressSeconds = false,\n              includeOffset = true,\n              format = \"extended\"\n            }: ToISOTimeOptions = {}) {\n    return toTechTimeFormat(this, {\n      suppressSeconds,\n      suppressMilliseconds,\n      includeOffset,\n      format\n    });\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\", false);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss [GMT]\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string}\n   */\n  toSQLDate() {\n    return toTechFormat(this, \"yyyy-MM-dd\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {Object} options - options\n   * @param {boolean} [options.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [options.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */\n  toSQLTime({ includeOffset = true, includeZone = false }: ToSQLOptions = {}) {\n    return toTechTimeFormat(this, {\n      includeOffset,\n      includeZone,\n      spaceZone: true\n    });\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {Object} options - options\n   * @param {boolean} [options.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [options.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */\n  toSQL(options: ToSQLOptions = {}) {\n    return `${this.toSQLDate()} ${this.toSQLTime(options)}`;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime.\n   * @return {number}\n   */\n  toMillis() {\n    return this.ts;\n  }\n\n  /**\n   * Returns the epoch seconds of this DateTime.\n   * @return {number}\n   */\n  toSeconds() {\n    return this.ts / 1000;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a BSON serializable equivalent to this DateTime.\n   * @return {Date}\n   */\n  toBSON() {\n    return this.toJSDate();\n  }\n\n  /**\n   * Returns a Javascript object with this DateTime's year, month, day, and so on.\n   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {Object}\n   */\n  toObject() {\n    return Object.assign({}, this.c) as GregorianDateTime;\n  }\n\n  /**\n   * Returns a Javascript Date equivalent to this DateTime.\n   * @return {Date}\n   */\n  toJSDate() {\n    return new Date(this.ts);\n  }\n\n  // COMPARE\n\n  diff(other: DateTime, unit?: DurationUnit | DurationUnit[]): Duration;\n  diff(\n    other: DateTime,\n    unit: DurationUnit | DurationUnit[],\n    options: DurationOptions & ThrowOnInvalid\n  ): Duration;\n  diff(\n    other: DateTime,\n    unit: DurationUnit | DurationUnit[],\n    options: DurationOptions\n  ): Duration | null;\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} other - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} options - options that affect the creation of the Duration\n   * @param {string} [options.locale=locale()] - the locale to use\n   * @param {string} [options.numberingSystem=numberingSystem()] - the numbering system to use\n   * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on error instead of throwing\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(\n    other: DateTime,\n    unit: DurationUnit | DurationUnit[] = \"milliseconds\",\n    options: DurationOptions = {}\n  ) {\n    const durOpts = Object.assign(\n      { locale: this.locale, numberingSystem: this.numberingSystem },\n      options,\n      { nullOnInvalid: false }\n    ) as DurationOptions & ThrowOnInvalid;\n\n    let units;\n    try {\n      units = maybeArray(unit).map(Duration.normalizeUnit);\n      if (units.length === 0) {\n        throw new InvalidArgumentError(\"At least one unit must be specified\");\n      }\n    } catch (error) {\n      if (options.nullOnInvalid) {\n        return null;\n      }\n      throw error;\n    }\n\n    const otherIsLater = other.valueOf() > this.valueOf(),\n      earlier = otherIsLater ? this : other,\n      later = otherIsLater ? other : this,\n      diffed = diff(earlier, later, units, durOpts);\n\n    return otherIsLater ? diffed.negate() : diffed;\n  }\n\n  diffNow(unit?: DurationUnit | DurationUnit[]): Duration;\n  diffNow(unit: DurationUnit | DurationUnit[], options: DurationOptions & ThrowOnInvalid): Duration;\n  diffNow(unit: DurationUnit | DurationUnit[], options: DurationOptions): Duration | null;\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link DateTime#diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} options - options that affect the creation of the Duration\n   * @param {string} [options.locale=locale()] - the locale to use\n   * @param {string} [options.numberingSystem=numberingSystem()] - the numbering system to use\n   * @param {string} [options.conversionAccuracy='casual'] - the conversion system to use\n   * @param {bool} [options.nullOnInvalid=false] - whether to return `null` on error instead of throwing\n   * @return {Duration}\n   */\n  diffNow(unit: DurationUnit | DurationUnit[] = \"milliseconds\", options: DurationOptions = {}) {\n    return this.diff(DateTime.now(), unit, options);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} other - the other end point of the Interval\n   * @return {Interval}\n   */\n  until(other: DateTime) {\n    return Interval.fromDateTimes(this, other);\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime\n   * @param {DateTime} other - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if both have the same calendar day\n   * @return {boolean}\n   */\n  hasSame(other: DateTime, unit: DurationUnit) {\n    if (Duration.normalizeUnit(unit) === \"milliseconds\") {\n      return this.valueOf() === other.valueOf();\n    }\n    else {\n      const inputMs = other.valueOf();\n      const otherZoneDateTime = this.setZone(other.zone, { keepLocalTime: true });\n\n      return +otherZoneDateTime.startOf(unit) <= inputMs && inputMs <= +otherZoneDateTime.endOf(unit);\n    }\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond and have the same zone and location.\n   * To compare just the millisecond values, use `+dt1 === +dt2`.\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other: DateTime) {\n    return (\n      this.valueOf() === other.valueOf() &&\n      this.zone.equals(other.zone) &&\n      this.loc.equals(other.loc)\n    );\n  }\n\n  /**\n   * Returns a string representation of a this time relative to now, such as \"in two days\". Can only internationalize if your\n   * platform supports Intl.RelativeTimeFormat. Rounds down by default.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} [options.style=\"long\"] - the style of units, must be \"long\", \"short\", or \"narrow\"\n   * @param {string} [options.unit] - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", or \"seconds\"\n   * @param {boolean} [options.round=true] - whether to round the numbers in the output.\n   * @param {boolean} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.\n   * @param {string} [options.locale] - override the locale of this DateTime\n   * @param {string} [options.numberingSystem] - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> \"in 1 day\"\n   * @example DateTime.now().setLocale(\"es\").toRelative({ days: 1 }) //=> \"dentro de 1 día\"\n   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: \"fr\" }) //=> \"dans 23 heures\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> \"2 days ago\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: \"hours\" }) //=> \"48 hours ago\"\n   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> \"1.5 days ago\"\n   */\n  toRelative(options: ToRelativeOptions = {}) {\n    const base = options.base || DateTime.fromObject({}, { zone: this.zone });\n    const padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;\n    return DateTime.diffRelative(\n      base,\n      this.plus({ milliseconds: padding }),\n      Object.assign(options, {\n        numeric: \"always\" as const,\n        units: [\n          \"years\",\n          \"months\",\n          \"days\",\n          \"hours\",\n          \"minutes\",\n          \"seconds\"\n        ] as Intl.RelativeTimeFormatUnit[],\n        calendary: false\n      })\n    );\n  }\n\n  /**\n   * Returns a string representation of this date relative to today, such as \"yesterday\" or \"next month\".\n   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} [options.locale] - override the locale of this DateTime\n   * @param {string} [options.unit] - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", or \"days\"\n   * @param {string} [options.numberingSystem] - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> \"tomorrow\"\n   * @example DateTime.now().setLocale(\"es\").plus({ days: 1 }).toRelative() //=> \"\"mañana\"\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: \"fr\" }) //=> \"demain\"\n   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> \"2 days ago\"\n   */\n  toRelativeCalendar(options: ToRelativeCalendarOptions = {}) {\n    return DateTime.diffRelative(\n      options.base || DateTime.fromObject({}, { zone: this.zone }),\n      this,\n      Object.assign(options, {\n        numeric: \"auto\" as const,\n        units: [\"years\", \"months\", \"days\"] as Intl.RelativeTimeFormatUnit[],\n        calendary: true\n      })\n    );\n  }\n\n  static min(): undefined;\n  static min(...dateTimes: DateTime[]): DateTime;\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime} the min DateTime, or undefined if called with no arguments\n   */\n  static min(...dateTimes: DateTime[]) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"min requires all arguments be DateTimes\");\n    }\n    if (dateTimes.length === 0) {\n      return undefined;\n    }\n    return bestBy(dateTimes, i => i.valueOf(), Math.min);\n  }\n\n  static max(): undefined;\n  static max(...dateTimes: DateTime[]): DateTime;\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime} the max DateTime, or undefined if called with no arguments\n   */\n  static max(...dateTimes: DateTime[]) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"max requires all arguments be DateTimes\");\n    }\n    if (dateTimes.length === 0) {\n      return undefined;\n    }\n    return bestBy(dateTimes, i => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromFormat()\n   * @param {string} text - the string to parse\n   * @param {string} format - the format the string is expected to be in (see description)\n   * @param {Object} options - options taken by fromFormat()\n   * @return {Object}\n   */\n  static fromFormatExplain(text: string, format: string, options: DateTimeOptions = {}) {\n    const localeToUse = Locale.create(\n      options.locale,\n      options.numberingSystem,\n      options.outputCalendar,\n      true /* defaultToEN */\n    );\n\n    return explainFromTokens(localeToUse, text, format);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link DateTime#toLocaleString} format like 10/14/1983\n   * @type {Object}\n   */\n  static get DATE_SHORT() {\n    return Formats.DATE_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED() {\n    return Formats.DATE_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED_WITH_WEEKDAY() {\n    return Formats.DATE_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_FULL() {\n    return Formats.DATE_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_HUGE() {\n    return Formats.DATE_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_SIMPLE() {\n    return Formats.TIME_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SECONDS() {\n    return Formats.TIME_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return Formats.TIME_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return Formats.TIME_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_SIMPLE() {\n    return Formats.TIME_24_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return Formats.TIME_24_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return Formats.TIME_24_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return Formats.TIME_24_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT() {\n    return Formats.DATETIME_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return Formats.DATETIME_SHORT_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED() {\n    return Formats.DATETIME_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return Formats.DATETIME_MED_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_WEEKDAY() {\n    return Formats.DATETIME_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL() {\n    return Formats.DATETIME_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return Formats.DATETIME_FULL_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE() {\n    return Formats.DATETIME_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return Formats.DATETIME_HUGE_WITH_SECONDS;\n  }\n\n  /**\n   * @private\n   */\n  //* *************************** *//\n  // Static private helper methods //\n  //* *************************** *//\n  // we cache week data on the DT object and this intermediates the cache\n  private possiblyCachedWeekData() {\n    if (this.weekData === undefined) {\n      this.weekData = gregorianToWeek(this.c);\n    }\n    return this.weekData;\n  }\n\n  /**\n   * @private\n   */\n  // clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n  // to create a new object while only changing some of the properties\n  private clone(alts: { ts?: number; zone?: Zone; loc?: Locale; o?: number }) {\n    const current = {\n      ts: this.ts,\n      zone: this.zone,\n      c: this.c,\n      o: this.o,\n      loc: this.loc\n    };\n    return new DateTime(Object.assign({}, current, alts, { old: current }));\n  }\n\n  /**\n   * @private\n   */\n  // this is a dumbed down version of fromObject() that runs about 60% faster\n  // but doesn't do any validation, makes a bunch of assumptions about what units\n  // are present, and so on.\n  private static quickDT(obj: GregorianDateTime, options: DateTimeOptions) {\n    const zone = normalizeZone(options.zone, Settings.defaultZone),\n      loc = Locale.fromObject(options),\n      tsNow = Settings.now();\n\n    let ts;\n\n    // assume we have the higher-order units\n    if (!isUndefined(obj.year)) {\n      for (const u of orderedUnits) {\n        if (isUndefined(obj[u])) {\n          obj[u] = defaultUnitValues[u];\n        }\n      }\n\n      const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\n      if (invalid) {\n        if (options.nullOnInvalid) {\n          return null;\n        }\n        throw new UnitOutOfRangeError(invalid[0], invalid[1]);\n      }\n\n      const offsetProvis = zone.offset(tsNow);\n      ts = objToTS(obj, offsetProvis, zone)[0];\n    }\n    else {\n      ts = tsNow;\n    }\n\n    return new DateTime({ ts, zone, loc });\n  }\n\n  /**\n   * @private\n   */\n  // create a new DT instance by adding a duration, adjusting for DSTs\n  private adjustTime(dur: Duration) {\n    const previousOffset = this.o,\n      year = this.c.year + Math.trunc(dur.years),\n      month = this.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,\n      c = Object.assign({}, this.c, {\n        year,\n        month,\n        day:\n          Math.min(this.c.day, daysInMonth(year, month)) +\n          Math.trunc(dur.days) +\n          Math.trunc(dur.weeks) * 7\n      }),\n      millisToAdd = Duration.fromObject({\n        years: dur.years - Math.trunc(dur.years),\n        quarters: dur.quarters - Math.trunc(dur.quarters),\n        months: dur.months - Math.trunc(dur.months),\n        weeks: dur.weeks - Math.trunc(dur.weeks),\n        days: dur.days - Math.trunc(dur.days),\n        hours: dur.hours,\n        minutes: dur.minutes,\n        seconds: dur.seconds,\n        milliseconds: dur.milliseconds\n      }).as(\"milliseconds\"),\n      localTS = objToLocalTS(c);\n\n    let [ts, o] = fixOffset(localTS, previousOffset, this.zone);\n\n    if (millisToAdd !== 0) {\n      ts += millisToAdd;\n      // that could have changed the offset by going over a DST, but we want to keep the ts the same\n      o = this.zone.offset(ts);\n    }\n\n    return { ts, o };\n  }\n\n  /**\n   * @private\n   */\n  private static normalizeWithDefaults<T>(\n    objNow: T,\n    normalized: Partial<T>,\n    units: Array<keyof T>,\n    defaultValues: Partial<T>\n  ) {\n    // set default values for missing stuff in object\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!isUndefined(v)) {\n        foundFirst = true;\n      }\n      else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      }\n      else {\n        normalized[u] = objNow[u];\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  private static diffRelative(start: DateTime, end: DateTime, options: DiffRelativeOptions) {\n    const round = isUndefined(options.round) ? true : options.round,\n      format = (c: number, unit: Intl.RelativeTimeFormatUnit) => {\n        c = roundTo(c, round || options.calendary ? 0 : 2, true);\n        const rtfOptions: Intl.RelativeTimeFormatOptions = { numeric: options.numeric };\n        if (options.style) {\n          rtfOptions.style = options.style;\n        }\n        const formatter = end.loc.clone(options).relFormatter(rtfOptions);\n        return formatter.format(c, unit);\n      },\n      differ = (unit: Intl.RelativeTimeFormatUnit) => {\n        if (options.calendary) {\n          if (!end.hasSame(start, unit)) {\n            return end\n            .startOf(unit)\n            .diff(start.startOf(unit), unit)\n            .get(unit);\n          }\n          else {\n            return 0;\n          }\n        }\n        else {\n          return end.diff(start, unit).get(unit);\n        }\n      };\n\n    if (options.unit) {\n      return format(differ(options.unit), options.unit);\n    }\n\n    for (const unit of options.units) {\n      const count = differ(unit);\n      if (Math.abs(count) >= 1) {\n        return format(count, unit);\n      }\n    }\n    return format(0, options.units[options.units.length - 1]);\n  }\n}\n\nexport type DateTimeLike = DateTime | Date | GenericDateTime;\n"],"names":["Formats.DATE_SHORT","Formats.DATE_MED","Formats.DATE_MED_WITH_WEEKDAY","Formats.DATE_FULL","Formats.DATE_HUGE","Formats.TIME_SIMPLE","Formats.TIME_WITH_SECONDS","Formats.TIME_WITH_SHORT_OFFSET","Formats.TIME_WITH_LONG_OFFSET","Formats.TIME_24_SIMPLE","Formats.TIME_24_WITH_SECONDS","Formats.TIME_24_WITH_SHORT_OFFSET","Formats.TIME_24_WITH_LONG_OFFSET","Formats.DATETIME_SHORT","Formats.DATETIME_MED","Formats.DATETIME_FULL","Formats.DATETIME_HUGE","Formats.DATETIME_SHORT_WITH_SECONDS","Formats.DATETIME_MED_WITH_SECONDS","Formats.DATETIME_MED_WITH_WEEKDAY","Formats.DATETIME_FULL_WITH_SECONDS","Formats.DATETIME_HUGE_WITH_SECONDS","singleton","English.meridiemForDateTime","English.monthForDateTime","English.weekdayForDateTime","English.eraForDateTime","English.formatString","English.formatRelativeTime","English.months","English.weekdays","English.meridiems","English.eras","English.weekdaysLong","English.weekdaysShort","English.monthsShort","orderedUnits"],"mappings":"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"}